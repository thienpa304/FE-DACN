{"version":3,"file":"static/js/694.c6dc266b.chunk.js","mappings":"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","sources":["modules/application/applicationService.ts","modules/jobs/hooks/useQueryJobById.ts","utils/keywords.ts","utils/reviewProfile.ts","utils/compareEnum.ts"],"sourcesContent":["import BaseService from 'src/common/base-service';\n\nexport const ApplicationService = new BaseService('employee/applications');\nexport const CandidateProfilesService = new BaseService(\n  'employer/applications'\n);\nexport const UpdateStatusService = new BaseService('employer/applications');\nexport const ApplicationTotalResults = new BaseService(\n  'employer/applications/totalResults'\n);\n","import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { Job } from '../model';\nimport { JobViewService } from '../jobService';\nimport { useApp } from 'src/modules/app/hooks';\nimport { useEffect, useState } from 'react';\n\nexport default function useQueryJobById(id) {\n  if (!id) return {};\n  const { data, isLoading, isFetching } = useQuery<\n    ResponseData<Job>,\n    AxiosError<ResponseData<Job>>\n  >(['job-getById', id], async () => JobViewService.getById(id), {\n    retry: 1,\n    refetchOnWindowFocus: false\n  });\n\n  const [job, setJob] = useState<Job>();\n\n  useEffect(() => {\n    if (data?.data) {\n      const saveJob = {\n        ...data?.data,\n        sex: data?.data?.sex === null ? 'Tất cả' : data?.data?.sex\n      };\n      setJob(saveJob);\n    }\n  }, [JSON.stringify(data)]);\n\n  return {\n    data: job,\n    isLoading,\n    isFetching\n  };\n}\n\nexport function useQueryJobByIdList(idList: number[]) {\n  const { isEmployer } = useApp();\n  const [dataList, setDataList] = useState<ResponseData<Job>[]>([]);\n  const { data, isLoading } = useQuery<\n    ResponseData<Job>[],\n    AxiosError<ResponseData<Job>[]>\n  >(\n    ['jobs-getByIdList', JSON.stringify(idList)],\n    async () => {\n      if (!idList.length) return [];\n      Promise.allSettled(idList.map((id) => JobViewService.getById(id)))\n        .then((results) => {\n          // Lọc ra các kết quả thành công và chỉ lưu dữ liệu của các promise đã được giải quyết vào dataList\n          const fulfilledResults = results.filter(\n            (result): result is PromiseFulfilledResult<any> =>\n              result.status === 'fulfilled'\n          );\n          const dataList = fulfilledResults.map((result) => result.value);\n\n          // Cập nhật dataList\n          setDataList(dataList);\n        })\n        .catch((e) => console.log(e));\n    },\n    {\n      retry: 1,\n      refetchOnWindowFocus: false,\n      keepPreviousData: true,\n      enabled: isEmployer\n    }\n  );\n  return {\n    jobs:\n      dataList?.map((item) => ({\n        ...item?.data,\n        id: item?.data?.postId,\n        sex: item?.data?.sex === null ? 'Tất cả' : item?.data?.sex\n      })) || [],\n    isLoading\n  };\n}\n","import _ from 'lodash';\nimport { AttachedDocument, OnlineProfile } from 'src/modules/jobProfile/model';\n\n// export function tfidfReview(keywordArray: string[], documentText: string) {\n//   const termFreq = keywordArray.reduce((result, keywordArray) => {\n//     const regex = new RegExp(`\\\\b${keywordArray}\\\\b`, 'gi');\n//     const matches = documentText.match(regex) || [];\n//     result[keywordArray] = matches.length;\n//     return result;\n//   }, {});\n\n//   const totalWords = documentText.split(/\\s+/).length;\n\n//   const tfidf = {};\n\n//   Object.entries(termFreq).forEach(([word, termCount]) => {\n//     if (typeof termCount === 'number') {\n//       // Check if termCount is a number\n//       const tf = termCount / totalWords;\n//       const idf = Math.log(keywordArray.length / (termCount || 1));\n//       tfidf[word] = tf * idf;\n//     } else {\n//       // Handle the case where termCount is not a number\n//       console.error(`Term count for \"${word}\" is not a number.`);\n//     }\n//   });\n\n//   return _.entries(tfidf)\n//     .sort((a, b) => b[1] - a[1])\n//     .map((entry) => entry[0]);\n// }\n\nexport const loadKeywords = (analysisResults: any[], document?: any) => {\n  if (analysisResults.length <= 0 && !Boolean(analysisResults[0])) return;\n\n  const result = analysisResults[0];\n\n  const startIndex = result.indexOf('[');\n  if (startIndex === -1) {\n    console.log(\"Không tìm thấy ký tự '['\");\n    return;\n  }\n\n  // Tìm vị trí kết thúc của ']'\n  const endIndex = result.lastIndexOf(']');\n  if (endIndex === -1) {\n    console.log(\"Không tìm thấy ký tự ']'\");\n    return;\n  }\n\n  // Trích xuất chuỗi con từ vị trí startIndex đến endIndex\n  const extractedString = result\n    .substring(startIndex + 1, endIndex)\n    .replace(/[\"]/g, '');\n  console.log('extractedString: ', extractedString);\n\n  // B1: Thay thế dấu \"'\" thành dấu '\"' để đảm bảo JSON hợp lệ\n  const jsonString = extractedString.replace(/[_!@#$%^&*;|<>'\"\\n\\t\\r]/g, '');\n  console.log('jsonString: ', jsonString);\n\n  // B2: Parse string sang array\n  const keywordArray = jsonString.split(',');\n  console.log('keywordArray', keywordArray);\n\n  const keywordList = keywordArray.slice(0, 20);\n  console.log('keywordList?.join(', ')', keywordList?.join(', '));\n  return keywordList?.join(', ');\n};\n\nfunction removeDateAttributes(data) {\n  return data.map((item) => {\n    const { startDate, endDate, id, isDoing, ...rest } = item;\n    return rest;\n  });\n}\n\nconst removeAttributes = (\n  profile: Partial<OnlineProfile | AttachedDocument>,\n  profileType: string,\n  cvText?: string\n) => {\n  // if profile type is OnlineProfile then return\n  if (profileType === 'online') {\n    const profileData = profile as Partial<OnlineProfile>;\n    return {\n      jobTitle: profileData?.jobTitle,\n      profession: profileData?.profession,\n      work_experiences: profileData?.work_experiences.map((experience) => {\n        return {\n          jobTitle: experience.jobTitle,\n          jobDescription: experience.jobDescription\n        };\n      }),\n      education_informations: profileData?.education_informations.map(\n        (education) => education.specialization\n      ),\n      another_degrees: profileData?.another_degrees?.map(\n        (degree) => degree.degreeName\n      )\n    };\n  } else {\n    return {\n      jobTitle: profile?.jobTitle,\n      profession: profile?.profession,\n      cvContent: cvText\n    };\n  }\n};\n\ntype profileType = 'online' | 'document';\nexport function preProcessData(\n  object,\n  profileType: profileType,\n  cvText?: string\n) {\n  const dataToAnalyze = removeAttributes(object, profileType, cvText);\n  return dataToAnalyze;\n}\n","import {\r\n  RoundOneCheck,\r\n  RoundThreeCheck,\r\n  RoundTwoCheck,\r\n  extractSkill\r\n} from 'src/modules/ai/roles';\r\nimport { preProcessText } from './inputOutputFormat';\r\nimport sendChatGPTRequest, {\r\n  getEmbedding\r\n} from 'src/modules/ai/sendChatGPTRequest';\r\nimport { getFileByUrl } from 'src/common/firebaseService';\r\nimport pdfToText from 'react-pdftotext';\r\nimport { User } from 'src/modules/users/model';\r\nimport { AttachedDocument, OnlineProfile } from 'src/modules/jobProfile/model';\r\nimport { Application } from 'src/modules/application/model';\r\nimport { Job } from 'src/modules/jobs/model';\r\nimport { compareDegrees, compareExperience } from './compareEnum';\r\nimport dayjs from 'dayjs';\r\nimport { dot } from 'mathjs';\r\nimport { loadKeywords } from './keywords';\r\n\r\nexport const FAIL_SCORE = 0; // < 30\r\nexport const LOW_SCORE = 30; // 30 - 80\r\nexport const NORMAL_SCORE = 80; // 80 - 110\r\nexport const HIGH_SCORE = 110; // higher than 110\r\n\r\nexport type ProfileTypeInfo = {\r\n  personal_information: User;\r\n  online_profile?: OnlineProfile;\r\n  attached_document?: AttachedDocument;\r\n  application: Partial<Omit<Application, 'applicationType'>> & {\r\n    id: number;\r\n    applicationType: string;\r\n    matchingScore: number;\r\n  };\r\n};\r\n\r\nexport type ProfileApplicationType = {\r\n  id: number;\r\n  employee_Profile: ProfileTypeInfo;\r\n  employer_Requirement: Partial<Job>;\r\n};\r\n\r\nconst fetchAndProcessCVData = async (dataToAnalyze, dataProcessor) => {\r\n  return Promise.all(\r\n    dataToAnalyze.map(async (data) => ({\r\n      ...data,\r\n      employee_Profile: await dataProcessor(data.employee_Profile)\r\n    }))\r\n  );\r\n};\r\n\r\nconst filterAndMapProfiles = (dataList) => {\r\n  return dataList\r\n    .filter((data) => data.employee_Profile)\r\n    .map(({ employee_Profile, employer_Requirement }) => ({\r\n      employee_Profile,\r\n      employer_Requirement\r\n    }));\r\n};\r\n\r\nconst preprocessText = (text) => {\r\n  if (!text) return null;\r\n\r\n  const preprocessedText = text\r\n    .replace(/[^\\w\\s,+()@.:\\/-]/g, '')\r\n    .replace(/\\s+/g, ' ');\r\n\r\n  return preprocessedText ? preprocessedText : null;\r\n};\r\n\r\nconst findMatchedProfile = (\r\n  profileId,\r\n  cvEnclosedProfileList,\r\n  attachProfileList\r\n) => {\r\n  return (\r\n    cvEnclosedProfileList.find(\r\n      (cvItem) => cvItem.employee_Profile.application.id === profileId\r\n    ) ||\r\n    attachProfileList.find(\r\n      (attachItem) => attachItem.employee_Profile.application.id === profileId\r\n    )\r\n  );\r\n};\r\n\r\nexport const preprocessJobData = (job) => ({\r\n  id: job?.postId,\r\n  jobTitle: job?.jobTitle,\r\n  profession: job?.profession,\r\n  jobDescription: preProcessText(job?.jobDescription),\r\n  jobRequirements: preProcessText(job?.jobRequirements),\r\n  benefits: preProcessText(job?.benefits),\r\n  workAddress: job?.workAddress,\r\n  minAge: job?.minAge,\r\n  maxAge: job?.maxAge,\r\n  sex: job?.sex,\r\n  requiredSkills: job?.requiredSkills,\r\n  employmentType: job?.employmentType,\r\n  degree: job?.degree,\r\n  experience: job?.experience,\r\n  positionLevel: job?.positionLevel,\r\n  keywords: job?.keywords\r\n});\r\n\r\nexport const preprocessProfileData = (profile) => ({\r\n  ...profile,\r\n  personal_information: {\r\n    dob: profile?.personal_information?.dob,\r\n    sex: profile?.personal_information?.sex\r\n  }\r\n});\r\n\r\nexport const matchProfileById = (\r\n  analyzedProfile,\r\n  cvEnclosedProfileList,\r\n  attachProfileList\r\n) => {\r\n  return analyzedProfile.map((item) => {\r\n    const foundItem = findMatchedProfile(\r\n      item.id,\r\n      cvEnclosedProfileList,\r\n      attachProfileList\r\n    );\r\n    if (foundItem) return { ...item, ...foundItem };\r\n    return item;\r\n  });\r\n};\r\n\r\nexport const firstRoundForGeneralInfo = (job, profile) => {\r\n  const { personal_information, online_profile, attached_document } = profile;\r\n\r\n  const birthday = dayjs(personal_information?.dob, 'YYYY-MM-DD').isValid()\r\n    ? dayjs(personal_information?.dob, 'YYYY-MM-DD')\r\n    : dayjs(personal_information?.dob, 'DD-MM-YYYY');\r\n  const age = dayjs().year() - birthday.year();\r\n\r\n  if (\r\n    (job?.sex !== null && job?.sex !== personal_information?.sex) ||\r\n    job?.minAge > age ||\r\n    job?.maxAge < age\r\n  )\r\n    return -10;\r\n\r\n  if (online_profile && !isProfileQualified(online_profile, job)) return -10;\r\n\r\n  if (attached_document && !isProfileQualified(attached_document, job))\r\n    return -10;\r\n\r\n  return 30;\r\n};\r\n\r\nconst isProfileQualified = (profile, job) => {\r\n  const { profession, degree, experience } = profile;\r\n\r\n  const employeeProfessionList = profession.split(', ');\r\n  const jobProfessionList = job.profession.split(', ');\r\n  if (!employeeProfessionList.some((item) => jobProfessionList.includes(item)))\r\n    return false;\r\n\r\n  if (compareDegrees(degree, job?.degree) < 0) return false;\r\n\r\n  if (compareExperience(experience, job?.experience) < 0) return false;\r\n\r\n  return true;\r\n};\r\n\r\nconst handleRoundOne = async (\r\n  resetMatchingScoreList: ProfileApplicationType[],\r\n  setAnalyzedProfile: (data: ProfileApplicationType[]) => Promise<void>,\r\n  handleAnalyzeResult: (result: any[]) => Promise<void>,\r\n  handleGoToAnalyzeResult: (signal: boolean, resultData: any) => void\r\n) => {\r\n  console.log('Start round 1');\r\n  const attachedDocumentDataList = resetMatchingScoreList.filter(\r\n    (item) => item.employee_Profile.attached_document?.CV\r\n  );\r\n  const cvEnclosedDataList = resetMatchingScoreList.filter(\r\n    (item) =>\r\n      !item.employee_Profile?.online_profile &&\r\n      !item.employee_Profile.attached_document\r\n  );\r\n\r\n  const attachedDocumentList = await fetchAndProcessCVData(\r\n    attachedDocumentDataList,\r\n    readCVData\r\n  );\r\n  const cvEnclosedList = await fetchAndProcessCVData(\r\n    cvEnclosedDataList,\r\n    readEnclosedCVData\r\n  );\r\n\r\n  const attachProfileList = filterAndMapProfiles(attachedDocumentList);\r\n  const cvEnclosedProfileList = filterAndMapProfiles(cvEnclosedList);\r\n\r\n  const cvContentProfile = matchProfileById(\r\n    resetMatchingScoreList,\r\n    cvEnclosedProfileList,\r\n    attachProfileList\r\n  );\r\n  console.log('cvContentProfile', cvContentProfile);\r\n\r\n  const result = await sendChatGPTRequest(\r\n    RoundOneCheck,\r\n    cvEnclosedProfileList\r\n  ).catch(() => []);\r\n  setAnalyzedProfile(cvContentProfile);\r\n  if (result !== null && result !== undefined)\r\n    handleGoToAnalyzeResult(true, result);\r\n};\r\n\r\nconst handleRoundTwo = async (\r\n  passRoundProfiles,\r\n  handleAnalyzeResult: (result: any[]) => Promise<void>\r\n) => {\r\n  console.log('Start round 2');\r\n  const dataSendToGPT = passRoundProfiles.map((item) => {\r\n    let profile;\r\n    if (item?.employee_Profile?.online_profile) {\r\n      profile = {\r\n        jobTitle: item?.employee_Profile?.online_profile?.jobTitle,\r\n        skills: item?.employee_Profile?.online_profile.skills,\r\n        another_degree:\r\n          item?.employee_Profile?.online_profile.another_degree?.map(\r\n            (degree) => degree.Name\r\n          ),\r\n        education_informations:\r\n          item?.employee_Profile?.online_profile.education_informations?.map(\r\n            (education) => education.degreeName\r\n          ),\r\n        work_experiences:\r\n          item?.employee_Profile?.online_profile.work_experiences?.map(\r\n            (experience) => {\r\n              return {\r\n                jobTitle: experience?.jobTitle,\r\n                jobDescription: experience?.jobDescription\r\n              };\r\n            }\r\n          )\r\n      };\r\n    } else if (item?.employee_Profile?.attached_document) {\r\n      profile = {\r\n        skills: item?.employee_Profile?.attached_document.skills,\r\n        CV: item?.employee_Profile?.attached_document.CV\r\n      };\r\n    } else {\r\n      profile = item?.employee_Profile?.application.CV;\r\n    }\r\n    return {\r\n      employer_Requirement: {\r\n        requiredSkills: item.employer_Requirement.requiredSkills\r\n      },\r\n      employee_Profile: {\r\n        profile: profile,\r\n        application_id: item?.employee_Profile?.application.application_id\r\n      }\r\n    };\r\n  });\r\n\r\n  console.log(dataSendToGPT);\r\n  const responses = await getEmbedding(\r\n    await Promise.all(\r\n      dataSendToGPT.map(async (item) => {\r\n        const sentence = await sendChatGPTRequest(\r\n          extractSkill,\r\n          [item.employee_Profile.profile],\r\n          null,\r\n          {\r\n            '58': 5,\r\n            '60': 5\r\n          }\r\n        );\r\n        let skills;\r\n        if (sentence.length > 0) {\r\n          skills = loadKeywords(sentence).split(',');\r\n        }\r\n        console.log(skills);\r\n\r\n        return {\r\n          id: item.employee_Profile.application_id,\r\n          employer_Requirement:\r\n            item.employer_Requirement.requiredSkills.split(','),\r\n          employee_Profile: skills\r\n        };\r\n      })\r\n    )\r\n  );\r\n  console.log(responses);\r\n\r\n  const result = responses.map((item) => {\r\n    const acc = item.employer_Requirement.filter((require) =>\r\n      item.employee_Profile.some(\r\n        (skills) => dot(skills.result, require.result) > 0.65\r\n      )\r\n    );\r\n    return {\r\n      id: item.id,\r\n      result: (100 / item.employer_Requirement.length) * acc.length\r\n    };\r\n  });\r\n\r\n  console.log(result);\r\n\r\n  handleAnalyzeResult(result.map((res) => JSON.stringify(res)));\r\n};\r\n\r\nconst handleRoundThree = async (\r\n  passRoundProfiles,\r\n  handleAnalyzeResult: (result: any[]) => Promise<void>\r\n) => {\r\n  console.log('Start round 3');\r\n\r\n  const response = await getEmbedding(\r\n    passRoundProfiles.map((item) => ({\r\n      id: item.id,\r\n      employer_Requirement: item.employer_Requirement.keywords.split(','),\r\n      employee_Profile: item.employee_Profile.application.keywords.split(',')\r\n    }))\r\n  );\r\n  const resultList = await Promise.all(\r\n    response.map(async (item) => {\r\n      let score = item.employee_Profile.reduce((acc, profile) => {\r\n        const hasMatch = item.employer_Requirement.some((requirement) => {\r\n          const cosineSimilarity = dot(profile.result, requirement.result);\r\n          return cosineSimilarity > 0.65;\r\n        });\r\n        return hasMatch ? acc + 5 : acc;\r\n      }, 0);\r\n\r\n      const lackOfSkillsList = await Promise.all(\r\n        item.employer_Requirement\r\n          .filter(\r\n            (require) =>\r\n              !item.employee_Profile.some(\r\n                (skills) => dot(skills.result, require.result) > 0.6\r\n              )\r\n          )\r\n          .map(async (require) => require.word)\r\n      );\r\n\r\n      const sentence = await sendChatGPTRequest(\r\n        extractSkill +\r\n          'Hãy viết lại từng kĩ năng ở dạng từ khóa, viết hoa chữ cái đầu và hãy dịch các kĩ năng sang tiếng Việt.\\n',\r\n        [lackOfSkillsList],\r\n        null,\r\n        {\r\n          '58': 5,\r\n          '60': 5\r\n        }\r\n      );\r\n      let skills;\r\n      if (sentence.length > 0) {\r\n        skills = loadKeywords(sentence).split(',');\r\n      }\r\n      const hints =\r\n        lackOfSkillsList.length > 0\r\n          ? `Để tăng tỉ lệ đậu bạn có thể trang bị thêm kĩ năng: ${[\r\n              ...new Set(skills)\r\n            ]\r\n              .slice(0, 4)\r\n              .join(', ')}`\r\n          : 'Hồ sơ của bạn đã đáp ứng yêu cầu của tin tuyển dụng này';\r\n\r\n      return {\r\n        id: item.id,\r\n        result: score,\r\n        hints: hints\r\n      };\r\n    })\r\n  );\r\n\r\n  const list = resultList.map((result) => JSON.stringify(result));\r\n\r\n  handleAnalyzeResult(list);\r\n};\r\n\r\nexport const fetchDataFromUrl = async (url, type) => {\r\n  try {\r\n    const filePath = await getFileByUrl(url);\r\n    const response = await fetch(filePath);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch file');\r\n    }\r\n    const blob = await response.blob();\r\n    return pdfToText(blob);\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const readCVData = async (employee_Profile) => {\r\n  if (employee_Profile?.attached_document) {\r\n    const text = await fetchDataFromUrl(\r\n      employee_Profile.attached_document.CV,\r\n      'attached_document'\r\n    );\r\n    const preprocessedText = preprocessText(text);\r\n\r\n    return preprocessedText\r\n      ? {\r\n          ...employee_Profile,\r\n          attached_document: {\r\n            ...employee_Profile.attached_document,\r\n            CV: preprocessedText\r\n          }\r\n        }\r\n      : null;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const readEnclosedCVData = async (employee_Profile) => {\r\n  if (\r\n    employee_Profile?.application?.applicationType === 'Nộp nhanh' &&\r\n    employee_Profile?.application?.CV\r\n  ) {\r\n    const text = await fetchDataFromUrl(\r\n      employee_Profile.application.CV,\r\n      'enclosed_CV'\r\n    );\r\n    const preprocessedText = preprocessText(text);\r\n\r\n    if (preprocessedText) {\r\n      return {\r\n        ...employee_Profile,\r\n        application: { ...employee_Profile.application, CV: preprocessedText }\r\n      };\r\n    }\r\n\r\n    return employee_Profile;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const review = async ({\r\n  round,\r\n  handleAnalyzeResult,\r\n  setIsAnalyzing,\r\n  setAnalyzedProfile,\r\n  passRoundProfiles,\r\n  resetMatchingScoreList,\r\n  handleGoToAnalyzeResult\r\n}: {\r\n  round: number;\r\n  handleAnalyzeResult: (result: any[]) => Promise<void>;\r\n  setIsAnalyzing: (data: boolean) => void;\r\n  setAnalyzedProfile?: (data: ProfileApplicationType[]) => Promise<void>;\r\n  passRoundProfiles?: ProfileApplicationType[];\r\n  resetMatchingScoreList?: ProfileApplicationType[];\r\n  handleGoToAnalyzeResult?: any;\r\n}) => {\r\n  setIsAnalyzing(true);\r\n\r\n  switch (round) {\r\n    case 1:\r\n      await handleRoundOne(\r\n        resetMatchingScoreList,\r\n        setAnalyzedProfile,\r\n        handleAnalyzeResult,\r\n        handleGoToAnalyzeResult\r\n      );\r\n      break;\r\n    case 2:\r\n      await handleRoundTwo(passRoundProfiles, handleAnalyzeResult);\r\n      break;\r\n    case 3:\r\n      await handleRoundThree(passRoundProfiles, handleAnalyzeResult);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport const parseResponseJSONData = async (result: any[]) => {\r\n  return Promise.all(result.map(async (data) => data && JSON.parse(data)));\r\n};\r\n","import { Degree, Experience } from 'src/constants/enum';\nimport { findObjectKey } from './inputOutputFormat';\n\nexport function compareExperience(\n  employee: string,\n  requirement: string\n): number {\n  // Chuyển đổi chuỗi sang giá trị enum tương ứng\n  const employeeIndex = Object.values(Experience).indexOf(\n    employee as Experience\n  );\n  const requirementIndex = Object.values(Experience).indexOf(\n    employee as Experience\n  );\n  // So sánh giá trị enum\n  if (employeeIndex > requirementIndex) {\n    return -1; // idx cang lon trinh do cang thap\n  } else return 1;\n}\n\nexport function compareDegrees(employee: string, requirement: string): number {\n  const employeeIndex = Object.values(Degree).indexOf(employee as Degree);\n  const requirementIndex = Object.values(Degree).indexOf(requirement as Degree);\n  // So sánh giá trị enum\n  if (employeeIndex > requirementIndex) {\n    return -1; // idx cang lon trinh do cang thap\n  } else return 1; // employee lớn hơn requirement\n}\n"],"names":["ApplicationService","BaseService","CandidateProfilesService","UpdateStatusService","ApplicationTotalResults","useQueryJobById","id","data","isLoading","isFetching","useQuery","async","JobViewService","getById","retry","refetchOnWindowFocus","job","setJob","useState","useEffect","_data$data","_data$data2","saveJob","sex","JSON","stringify","useQueryJobByIdList","idList","isEmployer","useApp","dataList","setDataList","length","Promise","allSettled","map","then","results","filter","result","status","value","catch","e","console","log","keepPreviousData","enabled","jobs","item","_item$data","_item$data2","_item$data3","postId","loadKeywords","analysisResults","document","Boolean","startIndex","indexOf","endIndex","lastIndexOf","extractedString","substring","replace","jsonString","keywordArray","split","keywordList","slice","join","removeAttributes","profile","profileType","cvText","_profileData$another_","profileData","jobTitle","profession","work_experiences","experience","jobDescription","education_informations","education","specialization","another_degrees","degree","degreeName","cvContent","preProcessData","object","LOW_SCORE","NORMAL_SCORE","HIGH_SCORE","fetchAndProcessCVData","dataToAnalyze","dataProcessor","all","employee_Profile","filterAndMapProfiles","_ref","employer_Requirement","preprocessText","text","preprocessedText","preprocessJobData","preProcessText","jobRequirements","benefits","workAddress","minAge","maxAge","requiredSkills","employmentType","positionLevel","keywords","preprocessProfileData","_profile$personal_inf","_profile$personal_inf2","personal_information","dob","firstRoundForGeneralInfo","online_profile","attached_document","birthday","dayjs","isValid","age","year","isProfileQualified","employeeProfessionList","jobProfessionList","some","includes","employee","requirement","Object","values","Degree","Experience","compareExperience","fetchDataFromUrl","url","type","filePath","getFileByUrl","response","fetch","ok","Error","blob","pdfToText","error","readCVData","CV","readEnclosedCVData","_employee_Profile$app","_employee_Profile$app2","application","applicationType","review","round","handleAnalyzeResult","setIsAnalyzing","setAnalyzedProfile","passRoundProfiles","resetMatchingScoreList","handleGoToAnalyzeResult","_ref2","attachedDocumentDataList","_item$employee_Profil","cvEnclosedDataList","_item$employee_Profil2","attachedDocumentList","cvEnclosedList","attachProfileList","cvEnclosedProfileList","cvContentProfile","matchProfileById","analyzedProfile","foundItem","findMatchedProfile","profileId","find","cvItem","attachItem","sendChatGPTRequest","RoundOneCheck","undefined","handleRoundOne","dataSendToGPT","_item$employee_Profil3","_item$employee_Profil13","_item$employee_Profil17","_item$employee_Profil4","_item$employee_Profil5","_item$employee_Profil6","_item$employee_Profil7","_item$employee_Profil8","_item$employee_Profil9","_item$employee_Profil10","_item$employee_Profil11","_item$employee_Profil12","skills","another_degree","Name","_item$employee_Profil14","_item$employee_Profil15","_item$employee_Profil16","application_id","responses","getEmbedding","sentence","extractSkill","acc","require","dot","res","handleRoundTwo","score","reduce","lackOfSkillsList","word","hints","concat","Set","handleRoundThree","parseResponseJSONData","parse"],"sourceRoot":""}