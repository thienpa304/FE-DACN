{"version":3,"file":"static/js/952.f9fb2b3a.chunk.js","mappings":"qJAEO,MAAMA,EAAqB,IAAIC,EAAAA,EAAY,yBACrCC,EAA2B,IAAID,EAAAA,EAC1C,yBAEWE,EAAsB,IAAIF,EAAAA,EAAY,yBACZ,IAAIA,EAAAA,EACzC,qC,gJCHa,SAASG,EAAoBC,GAAY,IAAX,KAAEC,GAAMD,EACnD,MAAM,MAAEE,IAAUC,EAAAA,EAAAA,MACZC,EAAQF,GACR,cAAEG,GAAkBD,GACpB,KAAEE,EAAI,UAAEC,GCDD,SAA0CC,GACvD,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,KACvB,IAAKF,EAAI,MAAO,CAAC,EACjB,MAAM,KAAEF,EAAI,UAAEC,IAAcI,EAAAA,EAAAA,UAI1B,CAAC,sBAAuBH,IACxBI,SAAYf,EAAAA,GAAyBgB,QAAQL,IAC7C,CACEM,MAAO,EACPC,sBAAsB,EACtBC,kBAAkB,EAClBC,QAASR,IAIb,MAAO,CACLH,KAAU,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KACZC,YAEJ,CDpB8BW,CAAiCb,GAE7D,OAAIE,GAAkBY,EAAAA,EAAAA,KAACC,EAAAA,EAAc,KAC9BD,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CAACpB,KAAMK,GACvB,C","sources":["modules/application/applicationService.ts","pages/view-candidate-profile/index.tsx","modules/application/hooks/useQueryCandidateApplicationById.ts"],"sourcesContent":["import BaseService from 'src/common/base-service';\n\nexport const ApplicationService = new BaseService('employee/applications');\nexport const CandidateProfilesService = new BaseService(\n  'employer/applications'\n);\nexport const UpdateStatusService = new BaseService('employer/applications');\nexport const ApplicationTotalResults = new BaseService(\n  'employer/applications/totalResults'\n);\n","import ViewCV from './ViewCV';\nimport useQueryCandidateApplicationById from 'src/modules/application/hooks/useQueryCandidateApplicationById';\nimport { useLocation } from 'react-router';\nimport SuspenseLoader from 'src/components/SuspenseLoader';\n\nexport default function ViewCandidateProfile({ user }) {\n  const { state } = useLocation();\n  const param = state as any;\n  const { applicationId } = param;\n  const { data, isLoading } = useQueryCandidateApplicationById(applicationId);\n\n  if (isLoading) return <SuspenseLoader />;\n  return <ViewCV user={data} />;\n}\n","import { AxiosError } from 'axios';\r\nimport { useQuery } from 'react-query';\r\nimport { ResponseData } from 'src/common/http-request';\r\nimport { EmployeeApplication } from '../model';\r\nimport { CandidateProfilesService } from '../applicationService';\r\nimport { useEffect, useState } from 'react';\r\nimport { useApp } from 'src/modules/app/hooks';\r\n\r\nexport default function useQueryCandidateApplicationById(id) {\r\n  const { isEmployer } = useApp();\r\n  if (!id) return {};\r\n  const { data, isLoading } = useQuery<\r\n    ResponseData<EmployeeApplication>,\r\n    AxiosError<ResponseData<EmployeeApplication>>\r\n  >(\r\n    ['application-getById', id],\r\n    async () => CandidateProfilesService.getById(id),\r\n    {\r\n      retry: 1,\r\n      refetchOnWindowFocus: false,\r\n      keepPreviousData: true,\r\n      enabled: isEmployer\r\n    }\r\n  );\r\n\r\n  return {\r\n    data: data?.data,\r\n    isLoading\r\n  };\r\n}\r\n\r\nexport function useQueryCandidateApplicationByIdList(idList: number[]) {\r\n  const [dataList, setDataList] = useState<ResponseData<EmployeeApplication>[]>(\r\n    []\r\n  );\r\n  const { data, isLoading, refetch } = useQuery<\r\n    ResponseData<EmployeeApplication>[],\r\n    AxiosError<ResponseData<EmployeeApplication>[]>\r\n  >(\r\n    ['application-getByIdList', JSON.stringify(idList)],\r\n    async () => {\r\n      if (!idList.length) return [];\r\n      Promise.allSettled(\r\n        idList.map((id) => CandidateProfilesService.getById(id))\r\n      )\r\n        .then((results) => {\r\n          // Lọc ra các kết quả thành công và chỉ lưu dữ liệu của các promise đã được giải quyết vào dataList\r\n          const fulfilledResults = results.filter(\r\n            (result): result is PromiseFulfilledResult<any> =>\r\n              result.status === 'fulfilled'\r\n          );\r\n          const dataList = fulfilledResults.map((result) => result.value);\r\n\r\n          // Cập nhật dataList\r\n          setDataList(dataList);\r\n        })\r\n        .catch((e) => console.error(e));\r\n    },\r\n    {\r\n      retry: 1,\r\n      refetchOnWindowFocus: false,\r\n      keepPreviousData: true\r\n    }\r\n  );\r\n\r\n  return {\r\n    data: dataList?.map((item) => item?.data),\r\n    isLoading,\r\n    refetch\r\n  };\r\n}\r\n"],"names":["ApplicationService","BaseService","CandidateProfilesService","UpdateStatusService","ViewCandidateProfile","_ref","user","state","useLocation","param","applicationId","data","isLoading","id","isEmployer","useApp","useQuery","async","getById","retry","refetchOnWindowFocus","keepPreviousData","enabled","useQueryCandidateApplicationById","_jsx","SuspenseLoader","ViewCV"],"sourceRoot":""}