{"version":3,"file":"static/js/836.636b57e2.chunk.js","mappings":"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","sources":["components/NumberFormatCustom/index.tsx","components/UploadError/index.tsx","modules/jobProfile/GeneralForm.tsx","modules/jobProfile/Personal.tsx","modules/jobProfile/SubmitBox.tsx","modules/jobProfile/TableOfContent.tsx","modules/jobProfile/onlineProfile/hooks/useMutateUpdateOnlineProfile.ts","modules/jobProfile/onlineProfile/hooks/useMutateOnlineProfile.ts","modules/jobProfile/onlineProfile/components/General/index.tsx","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateExperience.ts","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateUpdateExperience.ts","modules/jobProfile/onlineProfile/hooks/useWorkExperience.ts","modules/jobProfile/onlineProfile/components/Experience/EditWork.tsx","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateDeleteExperience.ts","modules/jobProfile/onlineProfile/components/Experience/ViewWork.tsx","modules/jobProfile/onlineProfile/components/Experience/index.tsx","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateEducation.ts","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateUpdateEducation.ts","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateDeleteEducation.ts","components/EditDataGrid/EditFormOnMobile.tsx","components/EditDataGrid/index.tsx","modules/jobProfile/onlineProfile/components/Education/index.tsx","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateDegree.ts","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateUpdateDegree.ts","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateDeleteDegree.ts","modules/jobProfile/onlineProfile/components/Degree/index.tsx","modules/jobProfile/onlineProfile/index.tsx","modules/users/hooks/useMutateAvatar.ts"],"sourcesContent":["import * as React from 'react';\nimport { NumericFormat, NumericFormatProps } from 'react-number-format';\n\ninterface CustomProps {\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\nconst NumericFormatCustom = React.forwardRef<NumericFormatProps, CustomProps>(\n  function NumericFormatCustom(props, ref) {\n    const { onChange, ...other } = props;\n\n    return (\n      <NumericFormat\n        {...other}\n        getInputRef={ref}\n        onValueChange={(values) => {\n          onChange({\n            target: {\n              name: props.name,\n              value: values.value\n            }\n          });\n        }}\n        thousandSeparator\n        valueIsNumericString\n      />\n    );\n  }\n);\n\nexport default NumericFormatCustom;\n","import { Typography } from '@mui/material';\nimport {\n  avatarFormat,\n  CVFormat,\n  coverImgFormat\n} from 'src/constants/uploadFileRule';\n\nconst generateErrorText = (\n  object: string,\n  acceptTypes: string[],\n  acceptSize: number,\n  fileType: string\n) => {\n  const typeRegex = new RegExp(`${fileType}/`, 'g');\n  return (\n    <Typography color=\"error\" my={1} fontWeight={700} fontSize={13}>\n      {object} phải có định dạng&nbsp;\n      {acceptTypes.join(', ').replace(typeRegex, '.')} và dung lượng{' '}\n      {` <=${acceptSize / 1024 / 1024}MB`}\n    </Typography>\n  );\n};\n\nconst generateOverTokenErrorText = () => {\n  return (\n    <Typography color=\"error\" my={1} fontWeight={700} fontSize={13}>\n      Rất tiếc, hệ thống chỉ có thể phân tích hồ sơ chứa tối đa 4000 từ. Vui\n      lòng tải hồ sơ khác !\n    </Typography>\n  );\n};\n\nconst generateFailedOCRErrorText = () => {\n  return (\n    <Typography color=\"error\" my={1} fontWeight={700} fontSize={13}>\n      Không nhận diện được nội dung trong file hồ sơ của bạn. Vui lòng tải hồ sơ\n      khác !\n    </Typography>\n  );\n};\n\nexport const avatarErrorText = generateErrorText(\n  'Ảnh đại diện',\n  avatarFormat.acceptTypes,\n  avatarFormat.acceptSize,\n  'image'\n);\nexport const coverErrorText = generateErrorText(\n  'Ảnh bìa',\n  coverImgFormat.acceptTypes,\n  coverImgFormat.acceptSize,\n  'image'\n);\nexport const applicationErrorText = generateErrorText(\n  'CV',\n  CVFormat.acceptTypes,\n  CVFormat.acceptSize,\n  'application'\n);\nexport const overTokenErrorText = generateOverTokenErrorText();\nexport const failedOCRErrorText = generateFailedOCRErrorText();\n","import React, { useState, useEffect } from 'react';\nimport { Box, Grid, Typography, Container, Divider } from '@mui/material';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from 'src/components/FormControl';\nimport SelectInput from 'src/components/SelectInput';\nimport TextField from 'src/components/TextField';\nimport Autocomplete from 'src/components/Autocomplete';\nimport { useForm } from 'react-hook-form';\nimport {\n  convertObjectListToString,\n  convertObjectListToStringForSkill,\n  convertToObjectsForSkill,\n  findObjectKey\n} from 'src/utils/formatData';\nimport NumericFormatCustom from 'src/components/NumberFormatCustom';\nimport EditButton from 'src/components/EditButton';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport {\n  Degree,\n  EmploymentType,\n  Experience,\n  PositionLevel\n} from 'src/constants/enum';\nimport GeneralViewUI from './GeneralViewUI';\nimport TagInput from 'src/components/TagInput';\nimport skills from 'src/constants/skills';\nimport { SKILLS } from 'src/constants';\ninterface Option {\n  value: any;\n  label: any;\n}\n\ninterface FormProps {\n  jobTitle: string;\n  profession: string | Option[];\n  currentPosition: string;\n  desiredPosition: string;\n  desiredSalary: number;\n  degree: string;\n  experience: string;\n  workAddress: string | Option[];\n  employmentType: string;\n  careerGoal: string;\n  skills: string;\n}\n\ninterface GeneralFormProps {\n  data: FormProps;\n  options: {\n    profession: Option[];\n    workAddress: Option[];\n    positionLevel: Option[];\n    degree: Option[];\n    experience: Option[];\n    workingForm: Option[];\n  };\n  onSubmit: (data: FormProps) => void;\n}\n\nconst GeneralForm: React.FC<GeneralFormProps> = ({\n  data,\n  options,\n  onSubmit\n}) => {\n  const defaultValues: FormProps = {\n    jobTitle: '',\n    profession: '',\n    currentPosition: '',\n    desiredPosition: '',\n    desiredSalary: null,\n    degree: '',\n    experience: '',\n    workAddress: '',\n    employmentType: '',\n    careerGoal: '',\n    skills: ''\n  };\n\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<FormProps>({\n    defaultValues: defaultValues\n  });\n\n  const ref = React.useRef(null);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const [employeeSkills, setSetEmployeeSkills] = useState(null);\n\n  const handleSaveProfile = (data: FormProps) => {\n    const newData = processDataPayload(data);\n    onSubmit(newData);\n    setIsReadOnly(true);\n  };\n\n  const handleCancel = () => {\n    reset(data);\n    setIsReadOnly(true);\n  };\n\n  const onEdit = () => setIsReadOnly(false);\n\n  const processDataPayload = (data: FormProps) => {\n    return {\n      ...data,\n      profession: convertObjectListToString(data?.profession as Option[]),\n      workAddress: convertObjectListToString(data?.workAddress as Option[]),\n      skills: Array.isArray(data.skills)\n        ? data.skills.map((item) => item.value || item).join(',')\n        : data.skills\n    };\n  };\n\n  useEffect(() => {\n    reset(data);\n    data?.skills &&\n      setSetEmployeeSkills(convertToObjectsForSkill(data?.skills));\n  }, [data]);\n\n  return (\n    <Container id=\"general\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin chung\n          </Typography>\n        </Box>\n        {isReadOnly && <EditButton onClick={onEdit} />}\n      </Box>\n      <Divider />\n      {isReadOnly ? (\n        <GeneralViewUI\n          user={{\n            ...data,\n            degree: Degree[data.degree] ? Degree[data.degree] : data.degree\n          }}\n        />\n      ) : (\n        <Grid sx={{ mt: 1 }} py={2}>\n          <Grid container mb={4} spacing={3}>\n            <Grid item xs={12}>\n              <FormControl\n                element={<TextField />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"jobTitle\"\n                label=\"Vị trí mong muốn\"\n                name=\"jobTitle\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={<Autocomplete />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"profession\"\n                label=\"Nghề nghiệp\"\n                name=\"profession\"\n                options={options.profession}\n                required\n                disabled={isReadOnly}\n                defaultValue={data?.profession}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.positionLevel}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"currentPosition\"\n                label=\"Cấp bậc hiện tại\"\n                name=\"currentPosition\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.positionLevel}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"desiredPosition\"\n                label=\"Cấp bậc mong muốn\"\n                name=\"desiredPosition\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<TextField />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"desiredSalary\"\n                label=\"Mức lương mong muốn\"\n                name=\"desiredSalary\"\n                pattern=\"integer\"\n                required\n                disabled={isReadOnly}\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  endAdornment: (\n                    <InputAdornment position=\"end\">triệu VNĐ</InputAdornment>\n                  )\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.degree}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"degree\"\n                label=\"Trình độ học vấn\"\n                name=\"degree\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.experience}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"experience\"\n                label=\"Số năm kinh nghiệm\"\n                name=\"experience\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.workingForm}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"employmentType\"\n                label=\"Hình thức làm việc\"\n                name=\"employmentType\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={<Autocomplete />}\n                options={options.workAddress}\n                control={control}\n                errors={errors}\n                defaultValue={data?.workAddress}\n                fullWidth\n                id=\"workAddress\"\n                label=\"Địa chỉ làm việc\"\n                name=\"workAddress\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={<TextField />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"careerGoal\"\n                label=\"Mục tiêu nghề nghiệp\"\n                name=\"careerGoal\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={\n                  <Autocomplete\n                    freeSolo={true}\n                    limitTags={7}\n                    options={SKILLS.map((item) => item.value)}\n                  />\n                }\n                defaultValue={data?.skills?.split(',')}\n                control={control}\n                errors={errors}\n                id=\"skills\"\n                label=\"Kĩ năng bắt buộc\"\n                name=\"skills\"\n                required\n              />\n              <Typography\n                fontSize={12}\n                color=\"secondary\"\n                fontStyle={'italic'}\n                sx={{ display: 'flex', justifyContent: 'center' }}\n              >\n                Hãy liệt kê tối đa 10 từ khóa. Ví dụ: Python, ReactJS, HTML,\n                Go... Sẽ giúp hệ thống tìm kiếm được doanh nghiệp phù hợp với hồ\n                sơ bạn nhất\n              </Typography>\n            </Grid>\n          </Grid>\n          {!isReadOnly && (\n            <ButtonGroup\n              handleSubmit={handleSubmit(handleSaveProfile)}\n              handleCancel={handleCancel}\n            />\n          )}\n        </Grid>\n      )}\n    </Container>\n  );\n};\n\nexport default GeneralForm;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  Typography,\n  Container,\n  styled,\n  Divider,\n  Avatar,\n  useTheme\n} from '@mui/material';\nimport AddPhotoAlternateOutlinedIcon from '@mui/icons-material/AddPhotoAlternateOutlined';\nimport DoNotDisturbOnOutlinedIcon from '@mui/icons-material/DoNotDisturbOnOutlined';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport FormControl from 'src/components/FormControl';\nimport SelectInput from 'src/components/SelectInput';\nimport DatePicker from 'src/components/DatePicker';\nimport TextField from 'src/components/TextField';\nimport EditButton from 'src/components/EditButton';\nimport { useForm } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { User } from '../users/model';\nimport { useApp } from 'src/modules/app/hooks';\nimport useMutateUserData from '../users/hooks/useMutateUserHook';\nimport { GENDER, ISMARRIED, ISMARRIED_OPTION } from 'src/constants/option';\nimport {\n  GetFileByUserId,\n  UploadFileByUserId,\n  RemoveFileByUserId,\n  DocumentType,\n  getFileByUrl,\n  uploadFile,\n  removeFileByUrl\n} from 'src/common/firebaseService';\nimport { avatarFormat } from 'src/constants/uploadFileRule';\nimport { toOutputDateString, toInputDateString } from 'src/utils/formatData';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport { avatarErrorText } from 'src/components/UploadError';\nimport useMutateAvatar from 'src/modules/users/hooks/useMutateAvatar';\nimport PersonalViewUI from './PersonalViewUI';\nimport { checkIsMobile, checkIsTablet } from 'src/utils/responsive';\n\nconst Input = styled('input')({\n  display: 'none'\n});\n\nexport default function Personal() {\n  const [avatarState, setAvatarState] = useState({\n    avatar: null,\n    avatarError: false,\n    storageAvatar: null,\n    uploadFile: null\n  });\n  const { user, setUserApp } = useApp();\n  const { onSaveData: onSavaAvatar } = useMutateAvatar();\n  const { onSaveData } = useMutateUserData();\n  const { acceptTypes, acceptSize } = avatarFormat;\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    reset(defaultUserValues);\n    handleGetAvatar();\n  }, [user]);\n\n  const handleEdit = () => setIsReadOnly(false);\n\n  const handleSaveProfile = async (data) => {\n    setLoading(true);\n\n    let avatarUrl = user.avatar;\n    if (avatarState.uploadFile)\n      avatarUrl = await uploadFile(avatarState.uploadFile).catch(() => '');\n    if (!avatarState.avatar) {\n      await removeFileByUrl(user.avatar);\n      avatarUrl = '';\n    }\n\n    const newData = {\n      ...data,\n      dob: toOutputDateString(data.dob),\n      isMarried: data.isMarried === 'Đã kết hôn' ? '1' : '0',\n      avatar: avatarUrl\n    };\n    setUserApp({\n      ...newData,\n      isMarried: newData.isMarried === '1',\n      sex: GENDER.find((item) => item.value === newData.sex)?.label,\n      avatar: avatarUrl\n    });\n    onSaveData(newData);\n\n    onSavaAvatar(newData);\n    setLoading(false);\n    setIsReadOnly(true);\n  };\n\n  const handleCancel = () => {\n    reset(defaultUserValues);\n    setAvatarState({ ...avatarState, avatar: avatarState.storageAvatar });\n    setIsReadOnly(true);\n  };\n\n  const handleGetAvatar = async () => {\n    const avatarUrl = await getFileByUrl(user?.avatar).catch(() => '');\n    setAvatarState({\n      ...avatarState,\n      avatar: avatarUrl,\n      storageAvatar: avatarUrl\n    });\n  };\n\n  const handleUploadAvatar = (e) => {\n    const image = e.target.files[0];\n    if (!image) return;\n    if (!acceptTypes.includes(image.type) || image.size > acceptSize) {\n      setAvatarState({ ...avatarState, avatarError: true });\n      return;\n    }\n    const imageUrl = URL.createObjectURL(image);\n    setAvatarState({\n      ...avatarState,\n      avatar: imageUrl,\n      uploadFile: image,\n      avatarError: false\n    });\n  };\n\n  const handleDeleteAvatar = () => {\n    setAvatarState({ ...avatarState, avatar: null, avatarError: false });\n  };\n\n  const defaultUserValues = {\n    ...user,\n    dob: toInputDateString(user.dob as string, 'DD-MM-YYYY'),\n    sex: GENDER.find((item) => item.label === user.sex)?.value,\n    isMarried: user.isMarried ? 'Đã kết hôn' : 'Độc thân'\n  };\n\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<User>({\n    defaultValues: defaultUserValues\n  });\n\n  const theme = useTheme();\n  const isMobile = checkIsMobile(theme);\n  const isTablet = checkIsTablet(theme);\n\n  return (\n    <Container id=\"personal\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin cá nhân\n          </Typography>\n        </Box>\n        {isReadOnly && <EditButton onClick={handleEdit} />}\n      </Box>\n      <Divider />\n      <Grid container sx={{ mt: 1 }} py={2}>\n        <Grid item xs={isTablet ? 12 : 3} pr={2}>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            rowGap={2}\n          >\n            <Avatar\n              alt={user.name}\n              src={avatarState.avatar}\n              sx={{\n                borderRadius: 2,\n                width: '75%',\n                maxWidth: '180px',\n                height: 180,\n                objectFit: 'cover'\n              }}\n            />\n            {!avatarState.avatar && !isReadOnly && (\n              <label htmlFor=\"userAvatar\">\n                <Button\n                  component=\"label\"\n                  size=\"small\"\n                  startIcon={<AddPhotoAlternateOutlinedIcon />}\n                  variant=\"text\"\n                  color=\"secondary\"\n                >\n                  <FormControl\n                    element={<Input type=\"file\" accept=\"image/*\" />}\n                    control={control}\n                    name=\"userAvatar\"\n                    id=\"userAvatar\"\n                    label=\"Ảnh đại diện\"\n                    onChange={handleUploadAvatar}\n                    // sx={{ fontSize: 15 }}\n                  />\n                  <Typography sx={{ fontSize: 15, fontWeight: 700 }}>\n                    Tải lên\n                  </Typography>\n                </Button>\n              </label>\n            )}\n\n            {avatarState.avatar && !isReadOnly && (\n              <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                <Button\n                  component=\"label\"\n                  size=\"small\"\n                  startIcon={<AddPhotoAlternateOutlinedIcon />}\n                  variant=\"text\"\n                  color=\"secondary\"\n                >\n                  <FormControl\n                    element={<Input type=\"file\" accept=\"image/*\" />}\n                    control={control}\n                    name=\"userAvatar\"\n                    id=\"userAvatar\"\n                    label=\"Ảnh đại diện\"\n                    onChange={handleUploadAvatar}\n                  />\n                  <Typography sx={{ fontSize: 15, fontWeight: 700 }}>\n                    Thay đổi\n                  </Typography>\n                </Button>\n                <Button\n                  component=\"label\"\n                  onClick={handleDeleteAvatar}\n                  size=\"small\"\n                  startIcon={<DoNotDisturbOnOutlinedIcon />}\n                  variant=\"text\"\n                  color=\"secondary\"\n                >\n                  <Typography sx={{ fontSize: 15, fontWeight: 700 }}>\n                    Xóa\n                  </Typography>\n                </Button>\n              </Box>\n            )}\n            {avatarState.avatarError && avatarErrorText}\n          </Box>\n        </Grid>\n        <Grid item xs={isTablet ? 12 : 9}>\n          {!isReadOnly ? (\n            <Grid container mb={4} spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"name\"\n                  label=\"Họ và tên\"\n                  name=\"name\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email\"\n                  name=\"email\"\n                  pattern=\"email\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"phone\"\n                  label=\"Số điện thoại\"\n                  name=\"phone\"\n                  pattern=\"phone\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<DatePicker maxDate={dayjs()} />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"dob\"\n                  label=\"Ngày sinh\"\n                  name=\"dob\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<SelectInput />}\n                  options={GENDER}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"sex\"\n                  label=\"Giới tính\"\n                  name=\"sex\"\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<SelectInput />}\n                  options={ISMARRIED_OPTION}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"isMarried\"\n                  label=\"Tình trạng hôn nhân\"\n                  name=\"isMarried\"\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"address\"\n                  label=\"Địa chỉ\"\n                  name=\"address\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n            </Grid>\n          ) : (\n            <PersonalViewUI user={user} />\n          )}\n          {!isReadOnly && (\n            <Box display=\"flex\" justifyContent=\"center\" sx={{ gap: 3 }}>\n              {loading ? (\n                <CircularProgress size={20} />\n              ) : (\n                <ButtonGroup\n                  handleSubmit={handleSubmit(handleSaveProfile)}\n                  handleCancel={handleCancel}\n                />\n              )}\n            </Box>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import { Box, styled } from '@mui/material';\n\nconst SubmitBox = styled(Box)(({ theme }) => ({\n  background: '#ffff',\n  height: 70,\n  width: '100%',\n  boxShadow: '0px 0px 10px #aae2f7',\n  left: 0,\n  right: 0,\n  bottom: 0,\n  zIndex: 1,\n  position: 'sticky',\n  display: 'flex',\n  justifyContent: 'flex-end',\n  alignItems: 'center',\n  gap: theme.spacing(4)\n}));\n\nexport default SubmitBox;\n","import { List, ListItem, Button, Typography, Grid } from '@mui/material';\n\nconst handleScrollToSection = (sectionId) => {\n  const element = document.getElementById(sectionId);\n  if (element) {\n    element.scrollIntoView({ behavior: 'smooth' });\n  }\n};\n\nconst TableOfContents = ({ sections }) => {\n  return (\n    <List component=\"nav\" sx={{ px: 0 }}>\n      <ListItem>\n        <Typography fontSize={14} fontWeight={700}>\n          Hồ sơ trực tuyến của bạn\n        </Typography>\n      </ListItem>\n      {sections.map((section) => (\n        <ListItem key={section.id} sx={{ p: 0 }}>\n          <Button\n            sx={{ py: 1 }}\n            fullWidth\n            onClick={() => handleScrollToSection(section.id)}\n            color=\"secondary\"\n          >\n            <Grid container>\n              <Grid\n                item\n                xs={2}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n              >\n                {section.icon}\n              </Grid>\n              <Grid\n                item\n                xs={10}\n                display=\"flex\"\n                justifyContent=\"left\"\n                alignItems=\"center\"\n              >\n                <Typography fontSize={13}>{section.title}</Typography>\n              </Grid>\n            </Grid>\n          </Button>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default TableOfContents;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateUpdateOnlineProfile = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const useMutateFunction = (data) =>\n    OnlineProfileService.updateWithoutId(data);\n\n  const {\n    mutate: onUpdateData,\n    isLoading,\n    isSuccess\n  } = useMutation<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>,\n    OnlineProfile\n  >(useMutateFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-OnlineProfile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onUpdateData,\n    isSuccess\n  };\n};\n\nexport default useMutateUpdateOnlineProfile;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateOnlineProfile = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const mutationFunction = OnlineProfileService.create;\n\n  const { mutate: onSaveData, isSuccess } = useMutation<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>,\n    OnlineProfile\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-OnlineProfile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isSuccess\n  };\n};\n\nexport default useMutateOnlineProfile;\n","import { useState, useEffect } from 'react';\nimport GeneralForm from '../../../GeneralForm';\nimport { OnlineProfile } from '../../../model';\nimport useMutateOnlineProfile from '../../hooks/useMutateOnlineProfile';\nimport useUpdateOnlineProfile from '../../hooks/useMutateUpdateOnlineProfile';\nimport {\n  EXPERIENCE,\n  POSITION_LEVEL,\n  WORKING_FORM,\n  DEGREE,\n  PROFESSION,\n  WORK_AT\n} from 'src/constants/option';\nimport { convertStringToObjectList, findObjectKey } from 'src/utils/formatData';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { Degree } from 'src/constants/enum';\n\nexport default function OnlineGeneral() {\n  const { profile, setProfile } = useOnlineProfile();\n  const { onSaveData } = useMutateOnlineProfile();\n  const { onUpdateData } = useUpdateOnlineProfile();\n  const [newData, setNewData] = useState(null);\n\n  const options = {\n    profession: PROFESSION,\n    workAddress: WORK_AT,\n    positionLevel: POSITION_LEVEL,\n    degree: DEGREE,\n    experience: EXPERIENCE,\n    workingForm: WORKING_FORM\n  };\n\n  const handleSaveProfile = (data: OnlineProfile) => {\n    const degree = findObjectKey(data.degree, Degree);\n\n    const newData = data;\n    // setProfile(newData);\n    if (profile?.userId) onUpdateData(newData);\n    else onSaveData(newData);\n  };\n\n  const formatInputData = (data: OnlineProfile) => ({\n    ...data,\n    profession: convertStringToObjectList(data?.profession, options.profession),\n    workAddress: convertStringToObjectList(\n      data?.workAddress,\n      options.workAddress\n    )\n  });\n\n  useEffect(() => {\n    setNewData(formatInputData(profile as OnlineProfile));\n  }, [profile]);\n\n  return (\n    <GeneralForm\n      data={newData}\n      options={options}\n      onSubmit={handleSaveProfile}\n    />\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { WorkExperience } from 'src/modules/jobProfile/model/index';\nimport { WorkExperienceService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = WorkExperienceService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    WorkExperience\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateExperience;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { ExperienceService } from 'src/modules/jobProfile/employeeProfileService';\nimport { WorkExperience } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    [id: string, data: WorkExperience]\n  >(([id, data]) => ExperienceService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateExperience;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from 'src/redux/hooks';\nimport { WorkExperience } from '../../model';\nimport {\n  selectWorkExperience,\n  setWorkExperience as setWorkExperienceAction\n} from '../workExperienceSlice';\n\nconst useWorkExperience = () => {\n  const { work_experiences } = useAppSelector(selectWorkExperience);\n  const dispatch = useAppDispatch();\n\n  const setWorkExperience = (data) => {\n    dispatch(setWorkExperienceAction(data));\n  };\n\n  return {\n    work_experiences,\n    setWorkExperience\n  };\n};\n\nexport default useWorkExperience;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  Typography,\n  Divider,\n  Checkbox,\n  InputLabel,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport FormControl from 'src/components/FormControl';\nimport TextField from 'src/components/TextField';\nimport { useForm } from 'react-hook-form';\nimport { WorkExperience } from '../../../model';\nimport useMutateExperience from './hooks/useMutateExperience';\nimport useMutateUpdateExperience from './hooks/useMutateUpdateExperience';\nimport DatePicker from 'src/components/DatePicker';\nimport dayjs from 'dayjs';\nimport { toInputDateString, toOutputDateString } from 'src/utils/formatData';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport useWorkExperience from '../../hooks/useWorkExperience';\nimport { v4 } from 'uuid';\n\nexport default function EditExperience(props) {\n  const { onSaveData } = useMutateExperience();\n  const { onSaveDataById } = useMutateUpdateExperience();\n  const { onClose, workId } = props;\n  const { profile, setProfile } = useOnlineProfile();\n  const { work_experiences, setWorkExperience } = useWorkExperience();\n  const [error, setError] = useState({ state: false, message: '' });\n\n  const defaultUserValues = {\n    jobTitle: '',\n    companyName: '',\n    startDate: null,\n    endDate: null,\n    isDoing: false,\n    jobDescription: ''\n  };\n\n  const {\n    control,\n    watch,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<WorkExperience>({\n    defaultValues: defaultUserValues\n  });\n\n  const isDoing = watch('isDoing', false);\n  const startDate = watch('startDate');\n  const endDate = watch('endDate');\n\n  const validateDates = () => {\n    if (startDate && endDate) {\n      if (dayjs(startDate).isAfter(endDate)) {\n        setError({\n          state: true,\n          message: 'Ngày kết thúc phải sau ngày bắt đầu'\n        });\n      } else {\n        setError({ state: false, message: '' });\n      }\n    }\n    if (isDoing) setError({ state: false, message: '' });\n  };\n\n  useEffect(() => {\n    validateDates();\n  }, [startDate, endDate, isDoing]);\n\n  const processInputData = (data) => {\n    if (!data.isDoing)\n      return {\n        ...data,\n        startDate: toInputDateString(data.startDate),\n        endDate: toInputDateString(data.endDate)\n      };\n    return {\n      ...data,\n      startDate: toInputDateString(data.startDate),\n      endDate: null\n    };\n  };\n\n  const processOutputData = (data) => {\n    if (!data.isDoing)\n      return {\n        ...data,\n        startDate: toOutputDateString(data.startDate),\n        endDate: toOutputDateString(data.endDate)\n      };\n    return {\n      ...data,\n      startDate: toOutputDateString(data.startDate),\n      endDate: null\n    };\n  };\n\n  const handleSaveExperienceData = async (data) => {\n    if (error.state) return;\n    const formattedOutputData = processOutputData(data);\n    // if (!profile.userId) {\n    //   if (data.id) {\n    //     const index = work_experiences.findIndex((item) => item.id === data.id);\n    //     if (index !== -1) {\n    //       const expList = [...work_experiences];\n    //       expList[index] = { ...formattedOutputData, id: data.id };\n    //       setWorkExperience(expList);\n    //     }\n    //   } else {\n    //     const expList = [\n    //       ...work_experiences,\n    //       { id: v4(), ...formattedOutputData }\n    //     ];\n    //     setWorkExperience(expList);\n    //     setProfile({ work_experiences: expList });\n    //   }\n    // } else {\n    // }\n    if (data.id) onSaveDataById([data.id, formattedOutputData]);\n    else onSaveData(formattedOutputData);\n    onClose();\n  };\n\n  useEffect(() => {\n    const foundExperience =\n      profile?.work_experiences?.find(\n        (experience) => experience.id === workId\n      ) || work_experiences?.find((experience) => experience.id === workId);\n    if (foundExperience) {\n      const formattedInputData = processInputData(foundExperience);\n      reset(formattedInputData);\n    }\n  }, [workId, profile]);\n\n  return (\n    <>\n      <Divider />\n      <Box py={3}>\n        <Grid container mb={4} spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"jobTitle\"\n              label=\"Chức danh\"\n              name=\"jobTitle\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"companyName\"\n              label=\"Công ty\"\n              name=\"companyName\"\n              required\n            />\n          </Grid>\n          <Grid item container xs={12} columnSpacing={3}>\n            <Grid item xs={12} display=\"flex\" height={30}>\n              <FormControl\n                element={<Checkbox checked={isDoing} />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"isDoing\"\n                label=\"Tôi đang làm ở đây\"\n                name=\"isDoing\"\n                sx={{ width: 10, height: 10, mr: 1 }}\n              />\n              <InputLabel htmlFor=\"isDoing\">Tôi đang làm ở đây</InputLabel>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<DatePicker />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"startDate\"\n                label=\"Thời gian bắt đầu\"\n                name=\"startDate\"\n                maxDate={dayjs()}\n              />\n            </Grid>\n            {!isDoing && (\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<DatePicker />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"endDate\"\n                  label=\"Thời gian kết thúc\"\n                  name=\"endDate\"\n                  maxDate={dayjs()}\n                />\n              </Grid>\n            )}\n            {isDoing && (\n              <Grid\n                item\n                xs={12}\n                sm={6}\n                display=\"flex\"\n                alignContent=\"center\"\n                alignItems=\"center\"\n              >\n                <TrendingFlatIcon />\n                <Typography fontSize={20}>Hiện tại</Typography>\n              </Grid>\n            )}\n          </Grid>\n          {error.state && (\n            <Grid item xs={12}>\n              <Alert severity=\"error\">\n                <AlertTitle>{error.message}</AlertTitle>\n              </Alert>\n            </Grid>\n          )}\n          <Grid item xs={12}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"jobDescription\"\n              label=\"Mô tả công việc\"\n              name=\"jobDescription\"\n              minRows={3}\n              required\n              multiline\n            />\n          </Grid>\n        </Grid>\n        <ButtonGroup\n          handleSubmit={handleSubmit(handleSaveExperienceData)}\n          handleCancel={onClose}\n        />\n      </Box>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { ExperienceService } from 'src/modules/jobProfile/employeeProfileService';\nimport { WorkExperience } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    string\n  >((id) => ExperienceService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteExperience;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  Divider,\n  Avatar,\n  IconButton,\n  Snackbar,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport AutoFixHighOutlinedIcon from '@mui/icons-material/AutoFixHighOutlined';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport ModeEditOutlineIcon from '@mui/icons-material/ModeEditOutline';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport { defaultImage } from 'src/constants/uploadFileRule';\nimport EditExperience from './EditWork';\nimport useMutateDeleteExperience from './hooks/useMutateDeleteExperience';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport useWorkExperience from '../../hooks/useWorkExperience';\nimport { toOutputDateString } from 'src/utils/formatData';\nimport alertDialog from 'src/utils/alertDialog';\n\nexport default function ExperienceView(props) {\n  const { onDeleteDataById } = useMutateDeleteExperience();\n  const { profile } = useOnlineProfile();\n  const { work_experiences, setWorkExperience } = useWorkExperience();\n  const [listOfWork, setListOfWork] = useState([]);\n  const [selectedWorkId, setSelectedWorkId] = useState(null);\n  const [isEditWorkVisible, setIsEditWorkVisible] = useState(false);\n  const [isNoProfile, setIsNoProfile] = useState(false);\n\n  const handleEditWork = (workId) => {\n    if (workId) setSelectedWorkId(workId);\n    setIsEditWorkVisible(true);\n  };\n\n  const handleAddWork = () => {\n    if (!profile?.work_experiences) {\n      setIsNoProfile(true);\n      return;\n    }\n    setSelectedWorkId(null);\n    setIsEditWorkVisible(true);\n  };\n\n  const handleDeleteWork = (id) => {\n    alertDialog({\n      selectedId: id,\n      handleConfirm: handleConfirmDelete\n    });\n  };\n\n  const handleConfirmDelete = (id) => {\n    onDeleteDataById(id);\n  };\n\n  useEffect(() => {\n    profile?.work_experiences ? setListOfWork(profile?.work_experiences) : [];\n    //   : setListOfWork(work_experiences);\n  }, [profile, work_experiences]);\n\n  return (\n    <>\n      {listOfWork?.map((work) => (\n        <Box key={work.id} display=\"flex\" columnGap={2} my={2}>\n          <Box>\n            <Avatar\n              src={defaultImage.companyAvatar}\n              variant=\"rounded\"\n              sx={{\n                bgcolor: '#a0b9cfc2',\n                height: 80,\n                width: 80\n              }}\n            >\n              <BusinessIcon />\n            </Avatar>\n          </Box>\n          <Box display=\"flex\" flexDirection=\"column\" rowGap=\"3px\" flex={1}>\n            <Typography fontWeight={700}>{work.jobTitle}</Typography>\n            <Typography fontSize={12}>{work.companyName}</Typography>\n            <Typography fontSize={12}>\n              {toOutputDateString(work.startDate)} -{' '}\n              {work.endDate && work.endDate !== '1899-11-30'\n                ? toOutputDateString(work.endDate)\n                : 'Hiện tại'}\n            </Typography>\n            <Box display=\"flex\">\n              <Typography fontSize={12}>Mô tả công việc:&nbsp;</Typography>\n              <Box>\n                <Typography fontSize={12}>{work.jobDescription}</Typography>\n              </Box>\n            </Box>\n          </Box>\n          <Box>\n            <IconButton onClick={() => handleEditWork(work.id)}>\n              <ModeEditOutlineIcon />\n            </IconButton>\n            <IconButton onClick={() => handleDeleteWork(work.id)}>\n              <DeleteOutlineIcon />\n            </IconButton>\n          </Box>\n        </Box>\n      ))}\n      {isEditWorkVisible && (\n        <EditExperience\n          workId={selectedWorkId}\n          onClose={() => setIsEditWorkVisible(false)}\n          onlineProfile={profile}\n        />\n      )}\n      {(!isEditWorkVisible || listOfWork?.length === 0) && (\n        <>\n          <Typography fontSize={12} color={'grey.600'}>\n            <em>\n              Mô tả kinh nghiệm làm việc của bạn càng chi tiết càng tốt, điều đó\n              giúp bạn có cơ hội được tuyển dụng cao hơn{' '}\n            </em>\n          </Typography>\n          <Divider />\n          <Button\n            variant=\"text\"\n            color=\"secondary\"\n            onClick={handleAddWork}\n            startIcon={<AutoFixHighOutlinedIcon fontSize=\"large\" />}\n            sx={{ my: 1 }}\n          >\n            <Typography>Thêm kinh nghiệm làm việc</Typography>\n          </Button>\n          <Snackbar\n            open={isNoProfile}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            autoHideDuration={5000}\n            onClose={() => setIsNoProfile(false)}\n          >\n            <Alert severity=\"error\">\n              <AlertTitle>\n                <strong>\n                  {isNoProfile &&\n                    'Vui lòng hoàn thành trước phần Thông tin chung!'}\n                </strong>\n              </AlertTitle>\n            </Alert>\n          </Snackbar>\n        </>\n      )}\n    </>\n  );\n}\n","import { Box, Typography, Container, Divider } from '@mui/material';\nimport ExperienceView from './ViewWork';\n\nexport default function Experience() {\n  return (\n    <>\n      <Container id=\"work_experience\">\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Box display=\"flex\">\n            <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n              Kinh nghiệm nghề nghiệp\n            </Typography>\n          </Box>\n        </Box>\n        <Divider />\n        <ExperienceView />\n      </Container>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationInformation } from 'src/modules/jobProfile/model/index';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = EducationService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    EducationInformation\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateEducation;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\nimport { EducationInformation } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    [id: string, data: EducationInformation]\n  >(([id, data]) => EducationService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateEducation;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\nimport { EducationInformation } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    string\n  >((id) => EducationService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteEducation;\n","import {\n  Box,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  Grid\n} from '@mui/material';\nimport React, { useEffect, useMemo } from 'react';\nimport FormControl from '../FormControl';\nimport TextField from '../TextField';\nimport ButtonGroup from '../ButtonGroup';\nimport { useForm } from 'react-hook-form';\nimport { useResponsive } from 'src/utils/responsive';\nimport DatePicker from '../DatePicker';\nimport dayjs from 'dayjs';\nimport {\n  isIsoDate,\n  toInputDateString,\n  toOutputDateString\n} from 'src/utils/formatData';\nimport { log10 } from 'mathjs';\n\nconst dateType = ['startDate', 'endDate'];\n\nexport default function EditGridInfo(props) {\n  const {\n    row,\n    columns,\n    open,\n    close,\n    handleClose,\n    title,\n    handleSave,\n    handleUpdate\n  } = props;\n  const { isMobile } = useResponsive();\n  console.log('row', row);\n  console.log('columns', columns);\n\n  const defaultValues = columns.reduce((acc, column) => {\n    acc[column.field] = '';\n    return acc;\n  }, {});\n\n  const defaultData = useMemo(() => {\n    const data = { ...row };\n    if (row?.startDate) {\n      data.startDate = toInputDateString(row?.startDate, 'DD/MM/YYYY');\n    }\n    if (row?.endDate)\n      data.endDate = toInputDateString(row?.endDate, 'DD/MM/YYYY');\n    return data;\n  }, [row]);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm({\n    defaultValues: defaultValues\n  });\n\n  const handleSaveInfo = (data) => {\n    for (let key in data) {\n      if (!data.hasOwnProperty(key)) continue;\n\n      if (dateType.includes(key)) {\n        debugger;\n        const dateString = toOutputDateString(data[key]);\n        data[key] = dateString;\n      }\n    }\n\n    if (row?.id) handleUpdate(row?.id, data);\n    else handleSave(data);\n    reset(defaultValues);\n    close();\n  };\n\n  useEffect(() => {\n    if (!row) reset(defaultValues);\n\n    reset(defaultData);\n  }, [row]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      fullWidth\n      maxWidth={'md'}\n      fullScreen={isMobile}\n    >\n      <DialogTitle\n        sx={{\n          textAlign: 'center',\n          fontWeight: 700,\n          fontSize: { md: '1.3rem', xs: '1rem' }\n        }}\n      >\n        {title}\n      </DialogTitle>\n      <Divider />\n      <DialogContent>\n        <Box sx={{ p: 3 }}>\n          <Grid container spacing={3} mb={4}>\n            {columns?.map(\n              (col, index) =>\n                col?.field !== 'id' && (\n                  <Grid key={index} item xs={12}>\n                    <FormControl\n                      element={\n                        dateType.includes(col?.field) ? (\n                          <DatePicker />\n                        ) : (\n                          <TextField />\n                        )\n                      }\n                      control={control}\n                      errors={errors}\n                      fullWidth\n                      label={col?.headerName}\n                      name={col?.field}\n                      multiline\n                      required\n                    />\n                  </Grid>\n                )\n            )}\n          </Grid>\n          <ButtonGroup\n            handleSubmit={handleSubmit(handleSaveInfo)}\n            handleCancel={() => close()}\n          />\n        </Box>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Snackbar,\n  Alert,\n  AlertTitle,\n  Typography,\n  Dialog,\n  DialogTitle,\n  Divider,\n  DialogContent\n} from '@mui/material';\nimport {\n  GridRowsProp,\n  GridRowModesModel,\n  GridRowModes,\n  DataGrid,\n  GridColDef,\n  GridToolbarContainer,\n  GridActionsCellItem,\n  GridEventListener,\n  GridRowId,\n  GridRowModel,\n  GridRowEditStopReasons\n} from '@mui/x-data-grid';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport dayjs from 'dayjs';\nimport alertDialog from 'src/utils/alertDialog';\nimport EditGridInfo from './EditFormOnMobile';\nimport { useResponsive } from 'src/utils/responsive';\n\nconst randomId = () =>\n  `${Math.floor(Math.random() * 10000)}${Math.random()\n    .toString(36)\n    .substring(2, 7)}`;\n\ninterface EditToolbarProps {\n  setCurrentRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\n  setRowModesModel: (\n    newModel: (oldModel: GridRowModesModel) => GridRowModesModel\n  ) => void;\n}\n\nconst EditDataGrid = (props) => {\n  const {\n    columns,\n    rows,\n    handleSave,\n    handleUpdate,\n    handleDelete,\n    profile,\n    title,\n    ...rest\n  } = props;\n  const [currentRows, setCurrentRows] = useState<GridRowsProp>([]);\n  const [initialRows, setInitialRows] = useState<GridRowsProp>([]);\n  const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\n  const [error, setError] = useState({ type: null, errorField: null });\n  const [openEditOnMobile, setOpenEditOnMobile] = useState({\n    open: false,\n    row: null\n  });\n  const { isMobile } = useResponsive();\n\n  useEffect(() => {\n    setCurrentRows(rows?.length > 0 ? rows : []);\n    setInitialRows(rows?.length > 0 ? rows : []);\n  }, [rows]);\n\n  function EditToolbar(props: EditToolbarProps) {\n    const { setCurrentRows, setRowModesModel } = props;\n\n    const handleAddClick = () => {\n      if (isMobile) {\n        setOpenEditOnMobile(() => ({ open: true, row: null }));\n        return;\n      }\n\n      // Have not fill common info\n      if (!profile?.userId) {\n        setError({ type: 'noProfile', errorField: null });\n        return;\n      }\n      // Is editing\n      if (currentRows[0]?.isNew) return;\n\n      const id = randomId();\n      const newRow = { id, isNew: true };\n      const emptyRow = columns.reduce((acc, column) => {\n        return { ...acc, [column.field]: '' };\n      }, newRow);\n\n      setCurrentRows((oldRows) => [emptyRow, ...oldRows]);\n      setRowModesModel((oldModel) => ({\n        ...oldModel,\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: columns[0].field }\n      }));\n    };\n\n    return (\n      <GridToolbarContainer>\n        <Button\n          color=\"secondary\"\n          startIcon={<AddIcon />}\n          onClick={handleAddClick}\n        >\n          <Typography sx={{ fontWeight: 700, fontSize: 16 }}>\n            Thêm mới\n          </Typography>\n        </Button>\n      </GridToolbarContainer>\n    );\n  }\n\n  const handleRowEditStop: GridEventListener<'rowEditStop'> = (\n    params,\n    event\n  ) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const handleEditOnMobile = (row) => {\n    setOpenEditOnMobile({ open: true, row: row });\n  };\n\n  const handleEditClick = (id: GridRowId) => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleSaveClick = (id: GridRowId) => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n  };\n\n  const handleDeleteClick = (id: GridRowId) => {\n    alertDialog({\n      selectedId: id,\n      handleConfirm: handleConfirmDelete\n    });\n  };\n\n  const handleConfirmDelete = (id: GridRowId) => {\n    setCurrentRows(currentRows.filter((row) => row.id !== id));\n    handleDelete(id);\n  };\n\n  const handleCancelClick = (id: GridRowId) => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true }\n    });\n\n    const editedRow = currentRows.find((row) => row.id === id);\n    if (editedRow!.isNew) {\n      setCurrentRows(currentRows.filter((row) => row.id !== id));\n    }\n  };\n\n  const processRowUpdate = (newRow: GridRowModel) => {\n    let updatedRow;\n    const existingRow = initialRows.find((row) => row.id === newRow.id);\n\n    const invalidFields = columns\n      .filter(\n        (col) =>\n          col.type === 'date' &&\n          (!dayjs(newRow[col.field]).isValid() || newRow[col.field] === null)\n      )\n      .map((col) => col.headerName);\n\n    const missingFields = columns\n      .filter((col) => newRow[col.field] === '')\n      .map((col) => col.headerName);\n\n    for (const col of columns) {\n      if (col.type === 'date') {\n        newRow[col.field] = dayjs(newRow[col.field]).format('DD/MM/YYYY');\n      }\n    }\n\n    if (missingFields.length > 0) {\n      setError({ type: 'missing', errorField: `${missingFields.join(', ')}` });\n      return;\n    }\n    if (invalidFields.length > 0) {\n      setError({ type: 'invalid', errorField: `${invalidFields.join(', ')}` });\n      return;\n    }\n\n    if (!existingRow) {\n      updatedRow = { ...newRow, isNew: false };\n      handleSave({ ...newRow });\n    } else {\n      updatedRow = { ...newRow, isNew: false };\n      handleUpdate(newRow.id, updatedRow);\n    }\n    const rowList = currentRows.map((row) =>\n      row.id === newRow.id ? updatedRow : row\n    );\n    setCurrentRows(rowList);\n    return updatedRow;\n  };\n\n  const handleRowModesModelChange = (newRowModesModel: GridRowModesModel) => {\n    setRowModesModel(newRowModesModel);\n  };\n\n  const actionColumns: GridColDef[] = [\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: 'Chỉnh sửa',\n      width: 100,\n      cellClassName: 'actions',\n      getActions: ({ id, row }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveIcon />}\n              label=\"Save\"\n              sx={{\n                color: 'primary.main'\n              }}\n              onClick={() => handleSaveClick(id)}\n              key=\"save\"\n            />,\n            <GridActionsCellItem\n              icon={<CancelIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={() => handleCancelClick(id)}\n              color=\"inherit\"\n              key=\"cancel\"\n            />\n          ];\n        }\n        return [\n          <GridActionsCellItem\n            icon={<EditIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={() =>\n              isMobile ? handleEditOnMobile(row) : handleEditClick(id)\n            }\n            color=\"inherit\"\n            key=\"edit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={() => handleDeleteClick(id)}\n            color=\"inherit\"\n            key=\"delete\"\n          />\n        ];\n      }\n    }\n  ];\n\n  const fullCols: GridColDef[] = [...columns, ...actionColumns];\n\n  return (\n    <>\n      <DataGrid\n        rows={currentRows}\n        columns={fullCols}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        processRowUpdate={processRowUpdate}\n        disableColumnMenu\n        hideFooterSelectedRowCount\n        initialState={{\n          pagination: {\n            paginationModel: {\n              pageSize: 5\n            }\n          }\n        }}\n        slots={{\n          toolbar: EditToolbar\n        }}\n        slotProps={{\n          toolbar: {\n            setCurrentRows,\n            setRowModesModel\n          }\n        }}\n        getRowHeight={() => 'auto'}\n        sx={{\n          minHeight: 208,\n          '&.MuiDataGrid-root--densityCompact .MuiDataGrid-cell': { py: '8px' },\n          '&.MuiDataGrid-root--densityStandard .MuiDataGrid-cell': {\n            py: '15px'\n          },\n          '&.MuiDataGrid-root--densityComfortable .MuiDataGrid-cell': {\n            py: '22px'\n          },\n          '.MuiDataGrid-columnHeaderTitle': { fontWeight: 700 }\n        }}\n        {...rest}\n      />\n      <Snackbar\n        open={error?.type}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={5000}\n        onClose={() => setError({ type: null, errorField: null })}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            {error?.type === 'missing' && 'Chưa nhập đầy đủ thông tin'}\n            {error?.type === 'invalid' && 'Thời gian không hợp lệ'}\n            <strong>\n              {error?.type === 'noProfile' &&\n                'Vui lòng hoàn thành trước phần Thông tin chung!'}\n            </strong>\n          </AlertTitle>\n          <strong>{error?.errorField}</strong>\n        </Alert>\n      </Snackbar>\n      {isMobile && (\n        <EditGridInfo\n          row={openEditOnMobile.row}\n          open={openEditOnMobile.open}\n          close={() => setOpenEditOnMobile(() => ({ open: false, row: null }))}\n          title={title}\n          handleSave={handleSave}\n          handleUpdate={handleUpdate}\n          columns={columns}\n        />\n      )}\n    </>\n  );\n};\n\nexport default EditDataGrid;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Divider,\n  Alert,\n  AlertTitle,\n  Snackbar,\n  styled\n} from '@mui/material';\nimport { GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport useQueryOnlineProfile from '../../hooks/useQueryOnlineProfile';\nimport useMutateEducation from './hooks/useMutateEducation';\nimport useMutateUpdateEducation from './hooks/useMutateUpdateEducation';\nimport useMutateDeleteEducation from './hooks/useMutateDeleteEducation';\nimport dayjs from 'dayjs';\nimport EditDataGrid from 'src/components/EditDataGrid';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { toOutputDateString } from 'src/utils/formatData';\nimport DatePicker from 'src/components/DatePicker';\nimport { useResponsive } from 'src/utils/responsive';\n\nconst DatePickerStyle = {\n  '.css-i4bv87-MuiSvgIcon-root': {\n    height: '14px',\n    width: '14px'\n  },\n  '.css-1qrfzum-MuiButtonBase-root-MuiIconButton-root': {\n    paddingX: '0px',\n    marginRight: '-5px'\n  },\n  '.css-yykmq0-MuiInputBase-input-MuiOutlinedInput-input': {\n    paddingX: 0,\n    marginX: 0\n  },\n  '.css-33lv7h-MuiInputBase-root-MuiOutlinedInput-root': {\n    fontSize: '12px',\n    paddingRight: 0,\n    paddingLeft: '-100px'\n  }\n};\n\nexport default function Education() {\n  const { isMobile } = useResponsive();\n  const { profile, setProfile } = useOnlineProfile();\n  const { onSaveData } = useMutateEducation();\n  const { onSaveDataById } = useMutateUpdateEducation();\n  const { onDeleteDataById } = useMutateDeleteEducation();\n\n  const [rows, setRows] = useState<GridRowsProp>([]);\n  const [error, setError] = useState({ state: false, message: '' });\n\n  const processData = (rows: GridRowsProp) => {\n    rows.map((row) => {\n      row.startDate = toOutputDateString(row.startDate);\n      row.endDate = toOutputDateString(row.endDate);\n    });\n  };\n\n  useEffect(() => {\n    const rows = profile?.education_informations;\n    const initialRows = rows ? JSON.parse(JSON.stringify(rows)) : [];\n    if (initialRows) processData(initialRows);\n    setRows(profile?.education_informations?.length > 0 ? initialRows : []);\n  }, [profile]);\n\n  const validation = (data) => {\n    if (\n      dayjs(data.startDate, 'DD/MM/YYYY').isAfter(\n        dayjs(data.endDate, 'DD/MM/YYYY')\n      )\n    ) {\n      setError({ state: true, message: 'Ngày kết thúc phải sau ngày bắt đầu' });\n      return false;\n    }\n    return true;\n  };\n\n  const handleSaveEducationData = (data) => {\n    if (validation(data)) {\n      onSaveData(data);\n      // console.log(data);\n      // const prevList = profile?.education_informations || [];\n      // const eduList = [...prevList, { ...data }];\n      // setProfile({ education_informations: eduList });\n    }\n  };\n  const handleUpdateEducationData = (id, data) => {\n    if (validation(data)) {\n      onSaveDataById([id, data]);\n      // const index = profile?.education_informations?.findIndex(\n      //   (item) => item.id === data.id\n      // );\n\n      // if (index !== -1) {\n      //   const eduList = [...profile?.education_informations] || [];\n      //   eduList[index] = data;\n      //   setProfile({ education_informations: eduList });\n      // }\n    }\n  };\n  const handleDeleteEducationData = (id) => {\n    onDeleteDataById(id);\n    // const eduList = profile?.education_informations?.filter(\n    //   (edu) => edu.id !== id\n    // );\n    // setProfile({ education_informations: eduList });\n  };\n\n  const handleDateChange = (params, date) => {\n    params.api.setEditCellValue({\n      ...params,\n      value: date // Cập nhật giá trị đã chọn từ DatePicker vào row\n    });\n  };\n\n  const columns: GridColDef[] = [\n    // {\n    //   field: 'id',\n    //   headerName: 'ID'\n    // },\n    {\n      field: 'schoolName',\n      headerName: 'Trường/ Trung tâm đào tạo',\n      width: !isMobile ? 240 : 190,\n      editable: true\n    },\n    {\n      field: 'specialization',\n      headerName: 'Chuyên ngành',\n      width: 220,\n      editable: true\n    },\n    {\n      field: 'degreeName',\n      headerName: 'Tên chứng chỉ',\n      width: 150,\n      editable: true\n    },\n    {\n      field: 'startDate',\n      headerName: 'Bắt đầu',\n      type: 'date',\n      width: 110,\n      editable: true,\n      valueGetter: (params) => {\n        return dayjs(params.value, 'DD/MM/YYYY').toDate();\n      },\n      valueFormatter(params) {\n        return toOutputDateString(params.value);\n      },\n      renderEditCell: (params) => {\n        return (\n          <DatePicker\n            sx={DatePickerStyle}\n            onChange={(e) => handleDateChange(params, e)}\n            value={params.value}\n          />\n        );\n      }\n    },\n    {\n      field: 'endDate',\n      headerName: 'Kết thúc',\n      type: 'date',\n      width: 110,\n      editable: true,\n      valueGetter: (params) => {\n        return dayjs(params.value, 'DD-MM-YYYY').toDate();\n      },\n      valueFormatter(params) {\n        return toOutputDateString(params.value);\n      },\n      renderEditCell: (params) => {\n        return (\n          <DatePicker\n            sx={DatePickerStyle}\n            onChange={(e) => handleDateChange(params, e)}\n            value={params.value}\n          />\n        );\n      }\n    }\n  ];\n\n  return (\n    <Container id=\"education\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin học vấn\n          </Typography>\n        </Box>\n      </Box>\n      <Divider />\n      <Box pt={3} pb={6}>\n        <EditDataGrid\n          profile={profile}\n          rows={rows}\n          columns={columns}\n          title={'Thông tin học vấn'}\n          handleSave={handleSaveEducationData}\n          handleUpdate={handleUpdateEducationData}\n          handleDelete={handleDeleteEducationData}\n          initialState={{\n            pagination: {\n              paginationModel: {\n                pageSize: 5\n              }\n            },\n            columns: {\n              columnVisibilityModel: {\n                specialization: !isMobile,\n                degreeName: !isMobile,\n                startDate: !isMobile,\n                endDate: !isMobile,\n                id: false\n              }\n            }\n          }}\n        />\n      </Box>\n\n      <Snackbar\n        open={error?.state}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={5000}\n        onClose={() => setError({ state: false, message: '' })}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            <strong>{error?.message}</strong>\n          </AlertTitle>\n          Dữ liệu của bạn sẽ không được lưu lại\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { AnotherDegree } from 'src/modules/jobProfile/model/index';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = DegreeService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    AnotherDegree\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateDegree;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\nimport { AnotherDegree } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    [id: string, data: AnotherDegree]\n  >(([id, data]) => DegreeService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateDegree;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\nimport { AnotherDegree } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    string\n  >((id) => DegreeService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteDegree;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  LinearProgress,\n  Container,\n  Divider\n} from '@mui/material';\nimport { GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport useMutateDegree from './hooks/useMutateDegree';\nimport useMutateUpdateDegree from './hooks/useMutateUpdateDegree';\nimport useMutateDeleteDegree from './hooks/useMutateDeleteDegree';\nimport EditDataGrid from 'src/components/EditDataGrid';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { useResponsive } from 'src/utils/responsive';\n\nfunction Degree() {\n  const { isMobile } = useResponsive();\n  const { profile } = useOnlineProfile();\n  const { onSaveData } = useMutateDegree();\n  const { onSaveDataById } = useMutateUpdateDegree();\n  const { onDeleteDataById } = useMutateDeleteDegree();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSaveDegreeData = async (data) => {\n    setLoading(true);\n    const newData = { ...data };\n    onSaveData(newData);\n    setLoading(false);\n  };\n\n  const handleUpdateDegreeData = async (id, data) => {\n    setLoading(true);\n    const newData = { ...data };\n    onSaveDataById([id, newData]);\n    setLoading(false);\n  };\n\n  const handleDeleteDegreeData = async (id) => {\n    setLoading(true);\n    onDeleteDataById(id);\n    setLoading(false);\n  };\n\n  const [rows, setRows] = useState<GridRowsProp>([]);\n\n  useEffect(() => {\n    if (profile?.another_degrees && profile.another_degrees.length > 0) {\n      setRows(profile.another_degrees);\n    }\n  }, [profile]);\n\n  const columns: GridColDef[] = [\n    {\n      field: 'degreeName',\n      headerName: 'Chứng chỉ',\n      width: !isMobile ? 420 : 190,\n      editable: true\n    },\n    {\n      field: 'level',\n      headerName: 'Mức độ thành thạo',\n      width: 410,\n      editable: true\n    }\n  ];\n\n  if (loading) {\n    return (\n      <Box sx={{ width: '100%' }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container id=\"other_degree\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Những chứng chỉ khác\n          </Typography>\n        </Box>\n      </Box>\n      <Divider />\n      <Box pt={3} pb={6}>\n        <EditDataGrid\n          rows={rows}\n          columns={columns}\n          title={'Thông tin chứng chỉ'}\n          handleSave={handleSaveDegreeData}\n          handleUpdate={handleUpdateDegreeData}\n          handleDelete={handleDeleteDegreeData}\n          profile={profile}\n          initialState={{\n            pagination: {\n              paginationModel: {\n                pageSize: 5\n              }\n            },\n            columns: {\n              columnVisibilityModel: {\n                level: !isMobile,\n                id: false\n              }\n            }\n          }}\n        />\n      </Box>\n    </Container>\n  );\n}\n\nexport default Degree;\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  Typography,\n  Button,\n  Snackbar,\n  Alert,\n  AlertTitle,\n  Backdrop,\n  useTheme\n} from '@mui/material';\nimport Personal from '../Personal';\nimport General from './components/General';\nimport Experience from './components/Experience';\nimport Education from './components/Education';\nimport Degree from './components/Degree';\nimport TableOfContents from '../TableOfContent';\nimport AccountBoxOutlinedIcon from '@mui/icons-material/AccountBoxOutlined';\nimport WorkOutlineIcon from '@mui/icons-material/WorkOutline';\nimport AssignmentOutlinedIcon from '@mui/icons-material/AssignmentOutlined';\nimport SchoolOutlinedIcon from '@mui/icons-material/SchoolOutlined';\nimport WorkspacePremiumOutlinedIcon from '@mui/icons-material/WorkspacePremiumOutlined';\nimport useQueryOnlineProfile from './hooks/useQueryOnlineProfile';\nimport useOnlineProfile from './hooks/useOnlineProfile';\nimport SuspenseLoader from 'src/components/SuspenseLoader';\nimport SubmitBox from '../SubmitBox';\nimport { useNavigate } from 'react-router';\nimport useMutateUpdateOnlineProfile from './hooks/useMutateUpdateOnlineProfile';\nimport { OnlineProfile as OnlineProfileType } from '../model';\nimport { loadKeywords, preProcessData } from 'src/utils/keywords';\nimport sendChatGPTRequest from 'src/GPT/sendChatGPTRequest';\nimport { cvAnalysist, translate } from 'src/GPT/roles';\nimport { checkIsMobile, useResponsive } from 'src/utils/responsive';\n\nconst MyBox = ({ children }) => (\n  <Box bgcolor=\"#ffff\" sx={{ mb: 4, boxShadow: '2px 2px 6px #aae2f7' }}>\n    {children}\n  </Box>\n);\n\nconst sections = [\n  {\n    icon: <AccountBoxOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin cá nhân',\n    id: 'personal'\n  },\n  {\n    icon: <WorkOutlineIcon sx={{ width: 20 }} />,\n    title: 'Thông tin chung',\n    id: 'general'\n  },\n  {\n    icon: <AssignmentOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin nghề nghiệp',\n    id: 'work_experience'\n  },\n  {\n    icon: <SchoolOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin học vấn',\n    id: 'education'\n  },\n  {\n    icon: <WorkspacePremiumOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Những chứng chỉ khác',\n    id: 'other_degree'\n  }\n];\n\nexport default function OnlineProfile() {\n  const [missingInfo, setMissingInfo] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const { onlineProfile, isLoading } = useQueryOnlineProfile();\n  const { profile, setProfile } = useOnlineProfile();\n  const { onUpdateData } = useMutateUpdateOnlineProfile();\n  const navigate = useNavigate();\n\n  const { isMobile } = useResponsive();\n\n  const handleSubmit = async () => {\n    setIsAnalyzing(true);\n    if (profile?.userId) {\n      const dataToAnalyze = preProcessData(profile, 'online');\n      const analysisResults = await sendChatGPTRequest(\n        cvAnalysist,\n        [dataToAnalyze],\n        null,\n        {\n          '58': 5,\n          '60': 5\n        }\n      );\n      const translatedResults = await sendChatGPTRequest(\n        translate,\n        analysisResults\n      );\n      const keywords = loadKeywords(translatedResults);\n      onUpdateData({\n        ...profile,\n        keywords: profile?.skills + ', ' + keywords\n      } as OnlineProfileType);\n      setFinished(true);\n      setIsAnalyzing(false);\n    } else {\n      setMissingInfo(true);\n      setIsAnalyzing(false);\n    }\n  };\n\n  const goBack = async () => {\n    setFinished(true);\n  };\n\n  useEffect(() => {\n    if (finished) {\n      navigate('/employee/recruitment-profile');\n    }\n  }, [finished]);\n\n  useEffect(() => {\n    setProfile(onlineProfile);\n  }, [onlineProfile]);\n\n  if (isLoading) return <SuspenseLoader />;\n  return (\n    <>\n      <Container key=\"online\">\n        <Typography mt={3} fontSize={22} fontWeight={700}>\n          Tạo hồ sơ trực tuyến\n        </Typography>\n        <Grid container columnSpacing={2} mt={2}>\n          <Grid item xs={!isMobile ? 10 : 12}>\n            {sections.map((section) => (\n              <MyBox key={section.id}>\n                {section.id === 'personal' && <Personal />}\n                {section.id === 'general' && <General />}\n                {section.id === 'work_experience' && <Experience />}\n                {section.id === 'education' && <Education />}\n                {section.id === 'other_degree' && <Degree />}\n              </MyBox>\n            ))}\n          </Grid>\n          <Grid\n            item\n            xs={!isMobile ? 2 : 0}\n            sx={{ display: { xs: 'none', sm: 'inline' } }}\n          >\n            <Box\n              bgcolor=\"#ffff\"\n              sx={{ boxShadow: '2px 2px 6px #aae2f7' }}\n              width={200}\n              position=\"sticky\"\n              top={60}\n            >\n              <TableOfContents sections={sections} />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n      <SubmitBox>\n        <Button\n          onClick={goBack}\n          variant=\"outlined\"\n          color=\"secondary\"\n          sx={{ width: 200 }}\n        >\n          Quay lại\n        </Button>\n        <Button variant=\"contained\" sx={{ width: 200 }} onClick={handleSubmit}>\n          Lưu hồ sơ\n        </Button>\n      </SubmitBox>\n      <Snackbar\n        open={missingInfo}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={3000}\n        onClose={() => setMissingInfo(false)}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            {missingInfo && 'Vui lòng cung cấp thông tin chung'}\n          </AlertTitle>\n        </Alert>\n      </Snackbar>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={isAnalyzing}\n      >\n        <SuspenseLoader />\n      </Backdrop>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { UploadAvatar } from '../userService';\nimport { User } from '../model';\n\nconst useMutateAvatar = () => {\n  const { toast, setUserApp } = useApp();\n  const mutationFunction = UploadAvatar.create;\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<Partial<User>>,\n    AxiosError<ResponseData<Partial<User>>>,\n    string\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        setUserApp({ avatar: res.data.avatar });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateAvatar;\n"],"names":["React","props","ref","onChange","other","_jsx","NumericFormat","getInputRef","onValueChange","values","target","name","value","thousandSeparator","valueIsNumericString","generateErrorText","object","acceptTypes","acceptSize","fileType","typeRegex","RegExp","concat","_jsxs","Typography","color","my","fontWeight","fontSize","children","join","replace","avatarErrorText","avatarFormat","coverErrorText","coverImgFormat","applicationErrorText","CVFormat","overTokenErrorText","failedOCRErrorText","_ref","_data$skills","data","options","onSubmit","control","reset","handleSubmit","formState","errors","useForm","defaultValues","jobTitle","profession","currentPosition","desiredPosition","desiredSalary","degree","experience","workAddress","employmentType","careerGoal","skills","isReadOnly","setIsReadOnly","useState","employeeSkills","setSetEmployeeSkills","processDataPayload","convertObjectListToString","Array","isArray","map","item","useEffect","convertToObjectsForSkill","Container","id","Box","display","justifyContent","alignItems","lineHeight","EditButton","onClick","onEdit","Divider","GeneralViewUI","user","Degree","Grid","sx","mt","py","container","mb","spacing","xs","FormControl","element","TextField","fullWidth","label","required","disabled","Autocomplete","defaultValue","sm","SelectInput","positionLevel","pattern","InputProps","inputComponent","NumericFormatCustom","endAdornment","InputAdornment","position","workingForm","freeSolo","limitTags","SKILLS","split","fontStyle","ButtonGroup","newData","handleCancel","Input","styled","Personal","_GENDER$find2","avatarState","setAvatarState","avatar","avatarError","storageAvatar","uploadFile","setUserApp","useApp","onSaveData","onSavaAvatar","useMutateAvatar","useMutateUserData","loading","setLoading","defaultUserValues","handleGetAvatar","async","avatarUrl","getFileByUrl","catch","handleUploadAvatar","e","image","files","includes","type","size","imageUrl","URL","createObjectURL","dob","toInputDateString","sex","GENDER","find","isMarried","theme","useTheme","isTablet","checkIsMobile","checkIsTablet","handleEdit","pr","flexDirection","rowGap","Avatar","alt","src","borderRadius","width","maxWidth","height","objectFit","htmlFor","Button","component","startIcon","AddPhotoAlternateOutlinedIcon","variant","accept","handleDeleteAvatar","DoNotDisturbOnOutlinedIcon","PersonalViewUI","DatePicker","maxDate","dayjs","ISMARRIED_OPTION","gap","CircularProgress","_GENDER$find","removeFileByUrl","toOutputDateString","background","boxShadow","left","right","bottom","zIndex","sections","List","px","ListItem","section","p","sectionId","document","getElementById","scrollIntoView","behavior","handleScrollToSection","icon","title","useMutateUpdateOnlineProfile","queryClient","useQueryClient","toast","mutate","onUpdateData","isLoading","isSuccess","useMutation","OnlineProfileService","updateWithoutId","onSuccess","res","status","invalidateQueries","success","massage","message","error","onError","response","useMutateOnlineProfile","mutationFunction","create","OnlineGeneral","profile","setProfile","useOnlineProfile","useUpdateOnlineProfile","setNewData","PROFESSION","WORK_AT","POSITION_LEVEL","DEGREE","EXPERIENCE","WORKING_FORM","convertStringToObjectList","GeneralForm","findObjectKey","userId","useMutateExperience","WorkExperienceService","useMutateUpdateExperience","onSaveDataById","ExperienceService","update","useWorkExperience","work_experiences","useAppSelector","selectWorkExperience","dispatch","useAppDispatch","setWorkExperience","setWorkExperienceAction","EditExperience","onClose","workId","setError","state","watch","companyName","startDate","endDate","isDoing","jobDescription","isAfter","_profile$work_experie","foundExperience","formattedInputData","_Fragment","columnSpacing","Checkbox","checked","mr","InputLabel","alignContent","TrendingFlatIcon","Alert","severity","AlertTitle","minRows","multiline","formattedOutputData","processOutputData","useMutateDeleteExperience","onDeleteDataById","remove","ExperienceView","listOfWork","setListOfWork","selectedWorkId","setSelectedWorkId","isEditWorkVisible","setIsEditWorkVisible","isNoProfile","setIsNoProfile","handleConfirmDelete","work","columnGap","defaultImage","companyAvatar","bgcolor","BusinessIcon","flex","IconButton","handleEditWork","ModeEditOutlineIcon","handleDeleteWork","alertDialog","selectedId","handleConfirm","DeleteOutlineIcon","onlineProfile","length","handleAddWork","AutoFixHighOutlinedIcon","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","Experience","useMutateEducation","EducationService","useMutateUpdateEducation","useMutateDeleteEducation","dateType","EditGridInfo","row","columns","close","handleClose","handleSave","handleUpdate","isMobile","useResponsive","console","log","reduce","acc","column","field","defaultData","useMemo","Dialog","fullScreen","DialogTitle","textAlign","md","DialogContent","col","index","headerName","key","hasOwnProperty","dateString","rows","handleDelete","rest","currentRows","setCurrentRows","initialRows","setInitialRows","rowModesModel","setRowModesModel","errorField","openEditOnMobile","setOpenEditOnMobile","filter","actionColumns","cellClassName","getActions","_rowModesModel$id","mode","GridRowModes","Edit","GridActionsCellItem","SaveIcon","View","handleSaveClick","CancelIcon","className","ignoreModifications","isNew","handleCancelClick","EditIcon","handleEditOnMobile","handleEditClick","DeleteIcon","handleDeleteClick","fullCols","DataGrid","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","handleRowEditStop","params","event","reason","GridRowEditStopReasons","rowFocusOut","defaultMuiPrevented","processRowUpdate","newRow","updatedRow","existingRow","invalidFields","isValid","missingFields","format","rowList","disableColumnMenu","hideFooterSelectedRowCount","initialState","pagination","paginationModel","pageSize","slots","toolbar","GridToolbarContainer","AddIcon","handleAddClick","_currentRows$","Math","floor","random","toString","substring","emptyRow","oldRows","oldModel","fieldToFocus","slotProps","getRowHeight","minHeight","DatePickerStyle","paddingX","marginRight","marginX","paddingRight","paddingLeft","Education","setRows","_profile$education_in","education_informations","JSON","parse","stringify","processData","validation","handleDateChange","date","api","setEditCellValue","editable","valueGetter","toDate","valueFormatter","renderEditCell","pt","pb","EditDataGrid","handleUpdateEducationData","columnVisibilityModel","specialization","degreeName","useMutateDegree","DegreeService","useMutateUpdateDegree","useMutateDeleteDegree","another_degrees","LinearProgress","level","MyBox","AccountBoxOutlinedIcon","WorkOutlineIcon","AssignmentOutlinedIcon","SchoolOutlinedIcon","WorkspacePremiumOutlinedIcon","OnlineProfile","missingInfo","setMissingInfo","finished","setFinished","isAnalyzing","setIsAnalyzing","useQueryOnlineProfile","navigate","useNavigate","SuspenseLoader","General","top","TableOfContents","SubmitBox","dataToAnalyze","preProcessData","analysisResults","sendChatGPTRequest","cvAnalysist","translatedResults","translate","keywords","loadKeywords","Backdrop","drawer","UploadAvatar"],"sourceRoot":""}