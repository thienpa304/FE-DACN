{"version":3,"file":"static/js/192.e2b28586.chunk.js","mappings":"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","sources":["modules/admin/hooks/useQueryPostingsReportByQuery.ts","modules/admin/hooks/useQueryCandidateStatisticsByQuery.ts","pages/admin/StatisticsAndReports.tsx"],"sourcesContent":["import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { AdminJobPostingsReportByQueryService } from '../adminService';\nimport dayjs from 'dayjs';\n\nconst useQueryJobPostingsReportByQuery = (params) => {\n  const { data, isLoading } = useQuery<\n    ResponseData<any[]>,\n    AxiosError<ResponseData<any[]>>\n  >(\n    ['get-job-postings-report-by-query', params],\n    () => AdminJobPostingsReportByQueryService.get({ params }),\n    {\n      keepPreviousData: true,\n      retry: 1,\n      refetchOnWindowFocus: false\n    }\n  );\n\n  return {\n    jobPostingData:\n      data?.data?.map((item) => ({\n        time: item?.time,\n        'Tin đăng': item?.value\n      })) || [],\n    isLoading\n  };\n};\n\nexport default useQueryJobPostingsReportByQuery;\n","import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { AdminCandidateStatisticsByQueryService } from '../adminService';\n\nconst useQueryCandidateStatisticsByQuery = (params) => {\n  const { data, isLoading } = useQuery<\n    ResponseData<any[]>,\n    AxiosError<ResponseData<any[]>>\n  >(\n    ['get-candidate-statistics-by-query', params],\n    () => AdminCandidateStatisticsByQueryService.get({ params }),\n    {\n      keepPreviousData: true,\n      retry: 1,\n      refetchOnWindowFocus: false\n    }\n  );\n\n  return {\n    candidateStatistics: data?.data?.map((item) => ({ ...item })) || [],\n    isLoading\n  };\n};\n\nexport default useQueryCandidateStatisticsByQuery;\n","import React, { useMemo, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  Container,\n  Divider,\n  Grid,\n  Typography,\n  styled\n} from '@mui/material';\nimport {\n  BarChart,\n  Bar,\n  PieChart, // Corrected component name\n  Pie, // Corrected component name\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Cell,\n  ResponsiveContainer\n} from 'recharts';\nimport SuspenseLoader from 'src/components/SuspenseLoader';\nimport useQueryJobPostingsReportByQuery from 'src/modules/admin/hooks/useQueryPostingsReportByQuery';\nimport useQueryCandidateStatisticsByQuery from 'src/modules/admin/hooks/useQueryCandidateStatisticsByQuery';\nimport { MonthCalendar, YearCalendar } from '@mui/x-date-pickers';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { useResponsive } from 'src/utils/responsive';\n\nconst ChartWrapper = styled(Grid)({\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\nconst CalendarStyles = {\n  maxWidth: '100%',\n  maxHeight: 210,\n  border: '1px solid #ccc',\n  borderRadius: 2,\n  p: 0,\n  overflowY: 'auto'\n};\n\nconst StatisticsAndReports = () => {\n  const COLORS = [\n    '#0088FE',\n    '#00C49F',\n    '#FFBB28',\n    '#FF8042',\n    '#814289',\n    '#344C64'\n  ];\n  const [selectedYear, setSelectedYear] = useState<Dayjs | null>(dayjs());\n  const [selectedMonth, setSelectedMonth] = useState<Dayjs | null>(dayjs());\n\n  const { isMobile, isTablet } = useResponsive();\n\n  const { jobPostingData, isLoading: isLoadingJobData } =\n    useQueryJobPostingsReportByQuery({\n      year: selectedYear?.year(),\n      month: selectedMonth && selectedMonth?.month() + 1\n    });\n  const { candidateStatistics, isLoading: isLoadingCandidate } =\n    useQueryCandidateStatisticsByQuery({\n      year: selectedYear?.year(),\n      month: selectedMonth && selectedMonth?.month() + 1\n    });\n\n  const handleSatisticByMonth = (e) => {\n    const isChecked = e.target.checked;\n    if (!isChecked) setSelectedMonth(null);\n    else setSelectedMonth(dayjs());\n  };\n\n  const formattedJobPostingData = jobPostingData?.map((item) => {\n    let data = item['Tin đăng'];\n    if (selectedMonth) {\n      const month = selectedMonth?.month() + 1;\n      const year = selectedYear?.year();\n      const today = dayjs();\n      const itemTimeString = `${year}-${month < 10 ? '0' + month : month}-${\n        item.time < 10 ? '0' + item.time : item.time\n      }`;\n      const itemTime = dayjs(itemTimeString, 'YYYY-MM-DD');\n      if (itemTime.isValid()) {\n        if (itemTime.isAfter(today)) {\n          data = null;\n        }\n      }\n    }\n\n    return {\n      ...item,\n      time:\n        (dayjs(item?.time, 'MMM').isValid() &&\n          dayjs(item?.time, 'MMM').format('MM')) ||\n        item.time,\n      'Tin đăng': data\n    };\n  });\n\n  const XAxisInterval = useMemo(() => {\n    if (!selectedMonth) return 0;\n    return isMobile ? 3 : isTablet ? 2 : 1;\n  }, [selectedMonth]);\n\n  const handleDownloadExcel = () => {\n    const statisticsData = [\n      { data: jobPostingData, sheetName: 'Job_Posting' },\n      { data: candidateStatistics, sheetName: 'Candidate' }\n    ];\n\n    const wb = XLSX.utils.book_new();\n\n    statisticsData.forEach(({ data, sheetName }) => {\n      const ws = XLSX.utils.json_to_sheet(data);\n      XLSX.utils.book_append_sheet(wb, ws, sheetName);\n    });\n\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const data = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    saveAs(data, 'devices_data.xlsx');\n  };\n\n  if (isLoadingJobData || isLoadingCandidate) return <SuspenseLoader />;\n  return (\n    <Container maxWidth=\"xl\">\n      <Card>\n        <CardHeader title=\"Thống kê và Báo cáo\" />\n        <Divider />\n        <CardContent\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            my: 2,\n            padding: 2\n          }}\n        >\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"stretch\"\n            marginTop={0}\n          >\n            <Grid item sm={3} xs={12} mb={3}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                onClick={handleDownloadExcel}\n              >\n                Tải Excel\n              </Button>\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  my: 2\n                }}\n              >\n                <Typography variant=\"h4\" textAlign={'center'}>\n                  Thống kê theo năm\n                </Typography>\n              </Box>\n              <YearCalendar\n                value={selectedYear?.isValid() && dayjs(selectedYear)}\n                onChange={(newValue) => setSelectedYear(newValue)}\n                disableFuture\n                maxDate={dayjs()}\n                sx={{\n                  ...CalendarStyles\n                }}\n              />\n\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  mt: 2\n                }}\n              >\n                <Typography variant=\"h4\" textAlign={'center'}>\n                  Thống kê theo tháng\n                </Typography>\n                <Checkbox defaultChecked onChange={handleSatisticByMonth} />\n              </Box>\n              <MonthCalendar\n                value={selectedMonth?.isValid() && dayjs(selectedMonth)}\n                onChange={(newValue) => setSelectedMonth(newValue)}\n                disableFuture={selectedYear?.year() === dayjs().year()}\n                sx={{\n                  ...CalendarStyles,\n                  display: !selectedMonth && 'none'\n                }}\n              />\n            </Grid>\n            <Grid item sm={9} xs={12}>\n              <Grid container rowGap={3}>\n                <ChartWrapper item xs={12}>\n                  <Typography variant=\"h4\">Số lượng tin đăng tuyển</Typography>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    {formattedJobPostingData.length <= 0 ? (\n                      <Typography\n                        color=\"text.disabled\"\n                        textAlign=\"center\"\n                        sx={{ marginTop: 10 }}\n                      >\n                        Không có dữ liệu\n                      </Typography>\n                    ) : (\n                      <LineChart\n                        data={formattedJobPostingData}\n                        margin={{ top: 30, right: 30, left: 0, bottom: 20 }}\n                      >\n                        <XAxis\n                          dataKey=\"time\"\n                          label={{\n                            value: selectedMonth ? 'Ngày' : 'Tháng',\n                            position: 'insideBottom',\n                            offset: -10\n                          }}\n                          tickSize={10}\n                          interval={XAxisInterval}\n                        />\n                        <YAxis\n                          type=\"number\"\n                          domain={[0, 'dataMax + 5']}\n                          label={{\n                            value: 'Tin đăng',\n                            position: 'insideLeft',\n                            angle: -90,\n                            offset: 20\n                          }}\n                        />\n                        <Tooltip />\n                        <Line\n                          type=\"monotone\"\n                          dataKey=\"Tin đăng\"\n                          stroke=\"#8884d8\"\n                        />\n                      </LineChart>\n                    )}\n                  </ResponsiveContainer>\n                </ChartWrapper>\n                <ChartWrapper item xs={12}>\n                  <Typography variant=\"h4\">Thống Kê Ứng Viên</Typography>\n                  <ResponsiveContainer\n                    width=\"80%\"\n                    height={isMobile ? 400 : 300}\n                  >\n                    {candidateStatistics.length <= 0 ? (\n                      <Typography\n                        color=\"text.disabled\"\n                        textAlign=\"center\"\n                        sx={{ marginTop: 10 }}\n                      >\n                        Không có dữ liệu\n                      </Typography>\n                    ) : (\n                      <PieChart>\n                        <Tooltip />\n                        <Legend />\n                        <Pie\n                          data={candidateStatistics}\n                          dataKey=\"value\"\n                          nameKey=\"name\"\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          startAngle={90}\n                          endAngle={-270}\n                        >\n                          {candidateStatistics?.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index]} />\n                          ))}\n                        </Pie>\n                      </PieChart>\n                    )}\n                  </ResponsiveContainer>\n                </ChartWrapper>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default StatisticsAndReports;\n"],"names":["params","_data$data","data","isLoading","useQuery","AdminJobPostingsReportByQueryService","get","keepPreviousData","retry","refetchOnWindowFocus","jobPostingData","map","item","time","value","AdminCandidateStatisticsByQueryService","candidateStatistics","ChartWrapper","styled","Grid","display","flexDirection","justifyContent","alignItems","CalendarStyles","maxWidth","maxHeight","border","borderRadius","p","overflowY","StatisticsAndReports","COLORS","selectedYear","setSelectedYear","useState","dayjs","selectedMonth","setSelectedMonth","isMobile","isTablet","useResponsive","isLoadingJobData","useQueryJobPostingsReportByQuery","year","month","isLoadingCandidate","useQueryCandidateStatisticsByQuery","formattedJobPostingData","today","itemTimeString","concat","itemTime","isValid","isAfter","format","XAxisInterval","useMemo","_jsx","SuspenseLoader","Container","children","_jsxs","Card","CardHeader","title","Divider","CardContent","sx","my","padding","container","direction","marginTop","sm","xs","mb","Button","fullWidth","variant","onClick","handleDownloadExcel","statisticsData","sheetName","wb","XLSX","book_new","forEach","_ref","ws","json_to_sheet","book_append_sheet","excelBuffer","bookType","type","Blob","saveAs","Box","Typography","textAlign","YearCalendar","onChange","newValue","disableFuture","maxDate","mt","Checkbox","defaultChecked","e","isChecked","target","checked","MonthCalendar","rowGap","ResponsiveContainer","width","height","length","color","LineChart","margin","top","right","left","bottom","XAxis","dataKey","label","position","offset","tickSize","interval","YAxis","domain","angle","Tooltip","Line","stroke","PieChart","Legend","Pie","nameKey","outerRadius","fill","startAngle","endAngle","entry","index","Cell"],"sourceRoot":""}