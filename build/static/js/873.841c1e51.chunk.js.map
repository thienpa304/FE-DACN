{"version":3,"file":"static/js/873.841c1e51.chunk.js","mappings":"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","sources":["modules/jobProfile/onlineProfile/hooks/useMutateUpdateOnlineProfile.ts","modules/jobProfile/onlineProfile/hooks/useQueryOnlineProfile.ts","modules/jobProfile/onlineProfile/hooks/useMutateOnlineProfile.ts","modules/jobProfile/onlineProfile/components/General/index.tsx","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateExperience.ts","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateUpdateExperience.ts","modules/jobProfile/onlineProfile/hooks/useWorkExperience.ts","modules/jobProfile/onlineProfile/components/Experience/EditWork.tsx","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateDeleteExperience.ts","modules/jobProfile/onlineProfile/components/Experience/ViewWork.tsx","modules/jobProfile/onlineProfile/components/Experience/index.tsx","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateEducation.ts","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateUpdateEducation.ts","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateDeleteEducation.ts","components/EditDataGrid/EditGridInfo.tsx","components/EditDataGrid/index.tsx","modules/jobProfile/onlineProfile/components/Education/index.tsx","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateDegree.ts","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateUpdateDegree.ts","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateDeleteDegree.ts","modules/jobProfile/onlineProfile/components/Degree/index.tsx","modules/jobProfile/onlineProfile/index.tsx"],"sourcesContent":["import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateUpdateOnlineProfile = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const useMutateFunction = (data) =>\n    OnlineProfileService.updateWithoutId(data);\n\n  const {\n    mutate: onUpdateData,\n    isLoading,\n    isSuccess\n  } = useMutation<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>,\n    OnlineProfile\n  >(useMutateFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-OnlineProfile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onUpdateData,\n    isSuccess\n  };\n};\n\nexport default useMutateUpdateOnlineProfile;\n","import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\nimport { useEffect, useState } from 'react';\nimport { getAccessToken } from 'src/utils/localStorage';\nimport { useApp } from 'src/modules/app/hooks';\nimport useOnlineProfile from './useOnlineProfile';\n\nconst useQueryOnlineProfile = () => {\n  const { isEmployee } = useApp();\n  const { setProfile } = useOnlineProfile();\n  const isLoggedIn = Boolean(getAccessToken());\n\n  const { data, isLoading, isSuccess, refetch } = useQuery<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>\n  >(['get-OnlineProfile'], OnlineProfileService.get, {\n    retry: (failureCount, error) =>\n      error.response.status === 404 ? false : failureCount < 2,\n    refetchOnWindowFocus: false,\n    enabled: isLoggedIn && isEmployee\n  });\n\n  useEffect(() => {\n    // Handle the data or error here\n    if (data && isSuccess) {\n      setProfile(data?.data);\n    }\n  }, [isSuccess]);\n\n  return {\n    onlineProfile: data?.data,\n    isLoading,\n    refetch\n  };\n};\n\nexport default useQueryOnlineProfile;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateOnlineProfile = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const mutationFunction = OnlineProfileService.create;\n\n  const { mutate: onSaveData, isSuccess } = useMutation<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>,\n    OnlineProfile\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-OnlineProfile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isSuccess\n  };\n};\n\nexport default useMutateOnlineProfile;\n","import { useState, useEffect } from 'react';\r\nimport GeneralForm from '../../../GeneralForm';\r\nimport { OnlineProfile } from '../../../model';\r\nimport useMutateOnlineProfile from '../../hooks/useMutateOnlineProfile';\r\nimport useUpdateOnlineProfile from '../../hooks/useMutateUpdateOnlineProfile';\r\nimport {\r\n  EXPERIENCE,\r\n  POSITION_LEVEL,\r\n  WORKING_FORM,\r\n  DEGREE,\r\n  PROFESSION,\r\n  WORK_AT\r\n} from 'src/constants/option';\r\nimport { convertStringToObjectList, findObjectKey } from 'src/utils/formatData';\r\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\r\nimport { Degree } from 'src/constants/enum';\r\n\r\nexport default function OnlineGeneral() {\r\n  const { profile, setProfile } = useOnlineProfile();\r\n  const { onSaveData } = useMutateOnlineProfile();\r\n  const { onUpdateData } = useUpdateOnlineProfile();\r\n  const [newData, setNewData] = useState(null);\r\n\r\n  const options = {\r\n    profession: PROFESSION,\r\n    workAddress: WORK_AT,\r\n    positionLevel: POSITION_LEVEL,\r\n    degree: DEGREE,\r\n    experience: EXPERIENCE,\r\n    workingForm: WORKING_FORM\r\n  };\r\n\r\n  const handleSaveProfile = (data: OnlineProfile) => {\r\n    const degree = findObjectKey(data.degree, Degree);\r\n\r\n    const newData = data;\r\n    // setProfile(newData);\r\n    if (profile?.userId) onUpdateData(newData);\r\n    else onSaveData(newData);\r\n  };\r\n\r\n  const formatInputData = (data: OnlineProfile) => ({\r\n    ...data,\r\n    profession: convertStringToObjectList(data?.profession, options.profession),\r\n    workAddress: convertStringToObjectList(\r\n      data?.workAddress,\r\n      options.workAddress\r\n    )\r\n  });\r\n\r\n  useEffect(() => {\r\n    setNewData(formatInputData(profile as OnlineProfile));\r\n  }, [profile]);\r\n\r\n  return (\r\n    <GeneralForm\r\n      data={newData}\r\n      options={options}\r\n      onSubmit={handleSaveProfile}\r\n    />\r\n  );\r\n}\r\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { WorkExperience } from 'src/modules/jobProfile/model/index';\nimport { WorkExperienceService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = WorkExperienceService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    WorkExperience\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateExperience;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { ExperienceService } from 'src/modules/jobProfile/employeeProfileService';\nimport { WorkExperience } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    [id: string, data: WorkExperience]\n  >(([id, data]) => ExperienceService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateExperience;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from 'src/redux/hooks';\nimport { WorkExperience } from '../../model';\nimport {\n  selectWorkExperience,\n  setWorkExperience as setWorkExperienceAction\n} from '../workExperienceSlice';\n\nconst useWorkExperience = () => {\n  const { work_experiences } = useAppSelector(selectWorkExperience);\n  const dispatch = useAppDispatch();\n\n  const setWorkExperience = (data) => {\n    dispatch(setWorkExperienceAction(data));\n  };\n\n  return {\n    work_experiences,\n    setWorkExperience\n  };\n};\n\nexport default useWorkExperience;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  Typography,\n  Divider,\n  Checkbox,\n  InputLabel,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport FormControl from 'src/components/FormControl';\nimport TextField from 'src/components/TextField';\nimport { useForm } from 'react-hook-form';\nimport { WorkExperience } from '../../../model';\nimport useMutateExperience from './hooks/useMutateExperience';\nimport useMutateUpdateExperience from './hooks/useMutateUpdateExperience';\nimport DatePicker from 'src/components/DatePicker';\nimport dayjs from 'dayjs';\nimport { toInputDateString, toOutputDateString } from 'src/utils/formatData';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport useWorkExperience from '../../hooks/useWorkExperience';\nimport { v4 } from 'uuid';\n\nexport default function EditExperience(props) {\n  const { onSaveData } = useMutateExperience();\n  const { onSaveDataById } = useMutateUpdateExperience();\n  const { onClose, workId } = props;\n  const { profile, setProfile } = useOnlineProfile();\n  const { work_experiences, setWorkExperience } = useWorkExperience();\n  const [error, setError] = useState({ state: false, message: '' });\n\n  const defaultUserValues = {\n    jobTitle: '',\n    companyName: '',\n    startDate: null,\n    endDate: null,\n    isDoing: false,\n    jobDescription: ''\n  };\n\n  const {\n    control,\n    watch,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<WorkExperience>({\n    defaultValues: defaultUserValues\n  });\n\n  const isDoing = watch('isDoing', false);\n  const startDate = watch('startDate');\n  const endDate = watch('endDate');\n\n  const validateDates = () => {\n    if (startDate && endDate) {\n      if (dayjs(startDate).isAfter(endDate)) {\n        setError({\n          state: true,\n          message: 'Ngày kết thúc phải sau ngày bắt đầu'\n        });\n      } else {\n        setError({ state: false, message: '' });\n      }\n    }\n    if (isDoing) setError({ state: false, message: '' });\n  };\n\n  useEffect(() => {\n    validateDates();\n  }, [startDate, endDate, isDoing]);\n\n  const processInputData = (data) => {\n    if (!data.isDoing)\n      return {\n        ...data,\n        startDate: toInputDateString(data.startDate),\n        endDate: toInputDateString(data.endDate)\n      };\n    return {\n      ...data,\n      startDate: toInputDateString(data.startDate),\n      endDate: null\n    };\n  };\n\n  const processOutputData = (data) => {\n    if (!data.isDoing)\n      return {\n        ...data,\n        startDate: toOutputDateString(data.startDate),\n        endDate: toOutputDateString(data.endDate)\n      };\n    return {\n      ...data,\n      startDate: toOutputDateString(data.startDate),\n      endDate: null\n    };\n  };\n\n  const handleSaveExperienceData = async (data) => {\n    if (error.state) return;\n    const formattedOutputData = processOutputData(data);\n    // if (!profile.userId) {\n    //   if (data.id) {\n    //     const index = work_experiences.findIndex((item) => item.id === data.id);\n    //     if (index !== -1) {\n    //       const expList = [...work_experiences];\n    //       expList[index] = { ...formattedOutputData, id: data.id };\n    //       setWorkExperience(expList);\n    //     }\n    //   } else {\n    //     const expList = [\n    //       ...work_experiences,\n    //       { id: v4(), ...formattedOutputData }\n    //     ];\n    //     setWorkExperience(expList);\n    //     setProfile({ work_experiences: expList });\n    //   }\n    // } else {\n    // }\n    if (data.id) onSaveDataById([data.id, formattedOutputData]);\n    else onSaveData(formattedOutputData);\n    onClose();\n  };\n\n  useEffect(() => {\n    const foundExperience =\n      profile?.work_experiences?.find(\n        (experience) => experience.id === workId\n      ) || work_experiences?.find((experience) => experience.id === workId);\n    if (foundExperience) {\n      const formattedInputData = processInputData(foundExperience);\n      reset(formattedInputData);\n    }\n  }, [workId, profile]);\n\n  return (\n    <>\n      <Divider />\n      <Box py={3}>\n        <Grid container mb={4} spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"jobTitle\"\n              label=\"Chức danh\"\n              name=\"jobTitle\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"companyName\"\n              label=\"Công ty\"\n              name=\"companyName\"\n              required\n            />\n          </Grid>\n          <Grid item container xs={12} columnSpacing={3}>\n            <Grid item xs={12} display=\"flex\" height={30}>\n              <FormControl\n                element={<Checkbox checked={isDoing} />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"isDoing\"\n                label=\"Tôi đang làm ở đây\"\n                name=\"isDoing\"\n                sx={{ width: 10, height: 10, mr: 1 }}\n              />\n              <InputLabel htmlFor=\"isDoing\">Tôi đang làm ở đây</InputLabel>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<DatePicker />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"startDate\"\n                label=\"Thời gian bắt đầu\"\n                name=\"startDate\"\n                maxDate={dayjs()}\n              />\n            </Grid>\n            {!isDoing && (\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<DatePicker />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"endDate\"\n                  label=\"Thời gian kết thúc\"\n                  name=\"endDate\"\n                  maxDate={dayjs()}\n                />\n              </Grid>\n            )}\n            {isDoing && (\n              <Grid\n                item\n                xs={12}\n                sm={6}\n                display=\"flex\"\n                alignContent=\"center\"\n                alignItems=\"center\"\n              >\n                <TrendingFlatIcon />\n                <Typography fontSize={20}>Hiện tại</Typography>\n              </Grid>\n            )}\n          </Grid>\n          {error.state && (\n            <Grid item xs={12}>\n              <Alert severity=\"error\">\n                <AlertTitle>{error.message}</AlertTitle>\n              </Alert>\n            </Grid>\n          )}\n          <Grid item xs={12}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"jobDescription\"\n              label=\"Mô tả công việc\"\n              name=\"jobDescription\"\n              minRows={3}\n              required\n              multiline\n            />\n          </Grid>\n        </Grid>\n        <ButtonGroup\n          handleSubmit={handleSubmit(handleSaveExperienceData)}\n          handleCancel={onClose}\n        />\n      </Box>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { ExperienceService } from 'src/modules/jobProfile/employeeProfileService';\nimport { WorkExperience } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    string\n  >((id) => ExperienceService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteExperience;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  Divider,\n  Avatar,\n  IconButton,\n  Snackbar,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport AutoFixHighOutlinedIcon from '@mui/icons-material/AutoFixHighOutlined';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport ModeEditOutlineIcon from '@mui/icons-material/ModeEditOutline';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport { defaultImage } from 'src/constants/uploadFileRule';\nimport EditExperience from './EditWork';\nimport useMutateDeleteExperience from './hooks/useMutateDeleteExperience';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport useWorkExperience from '../../hooks/useWorkExperience';\nimport { toOutputDateString } from 'src/utils/formatData';\nimport alertDialog from 'src/utils/alertDialog';\n\nexport default function ExperienceView(props) {\n  const { onDeleteDataById } = useMutateDeleteExperience();\n  const { profile } = useOnlineProfile();\n  const { work_experiences, setWorkExperience } = useWorkExperience();\n  const [listOfWork, setListOfWork] = useState([]);\n  const [selectedWorkId, setSelectedWorkId] = useState(null);\n  const [isEditWorkVisible, setIsEditWorkVisible] = useState(false);\n  const [isNoProfile, setIsNoProfile] = useState(false);\n\n  const handleEditWork = (workId) => {\n    if (workId) setSelectedWorkId(workId);\n    setIsEditWorkVisible(true);\n  };\n\n  const handleAddWork = () => {\n    if (!profile?.work_experiences) {\n      setIsNoProfile(true);\n      return;\n    }\n    setSelectedWorkId(null);\n    setIsEditWorkVisible(true);\n  };\n\n  const handleDeleteWork = (id) => {\n    alertDialog({\n      selectedId: id,\n      handleConfirm: handleConfirmDelete\n    });\n  };\n\n  const handleConfirmDelete = (id) => {\n    onDeleteDataById(id);\n  };\n\n  useEffect(() => {\n    profile?.work_experiences ? setListOfWork(profile?.work_experiences) : [];\n    //   : setListOfWork(work_experiences);\n  }, [profile, work_experiences]);\n\n  return (\n    <>\n      {listOfWork?.map((work) => (\n        <Box key={work.id} display=\"flex\" columnGap={2} my={2}>\n          <Box>\n            <Avatar\n              src={defaultImage.companyAvatar}\n              variant=\"rounded\"\n              sx={{\n                bgcolor: '#a0b9cfc2',\n                height: 80,\n                width: 80\n              }}\n            >\n              <BusinessIcon />\n            </Avatar>\n          </Box>\n          <Box display=\"flex\" flexDirection=\"column\" rowGap=\"3px\" flex={1}>\n            <Typography fontWeight={700}>{work.jobTitle}</Typography>\n            <Typography fontSize={12}>{work.companyName}</Typography>\n            <Typography fontSize={12}>\n              {toOutputDateString(work.startDate)} -{' '}\n              {work.endDate && work.endDate !== '1899-11-30'\n                ? toOutputDateString(work.endDate)\n                : 'Hiện tại'}\n            </Typography>\n            <Box display=\"flex\">\n              <Typography fontSize={12}>Mô tả công việc:&nbsp;</Typography>\n              <Box>\n                <Typography fontSize={12}>{work.jobDescription}</Typography>\n              </Box>\n            </Box>\n          </Box>\n          <Box>\n            <IconButton onClick={() => handleEditWork(work.id)}>\n              <ModeEditOutlineIcon />\n            </IconButton>\n            <IconButton onClick={() => handleDeleteWork(work.id)}>\n              <DeleteOutlineIcon />\n            </IconButton>\n          </Box>\n        </Box>\n      ))}\n      {isEditWorkVisible && (\n        <EditExperience\n          workId={selectedWorkId}\n          onClose={() => setIsEditWorkVisible(false)}\n          onlineProfile={profile}\n        />\n      )}\n      {(!isEditWorkVisible || listOfWork?.length === 0) && (\n        <>\n          <Typography fontSize={12} color={'grey.600'}>\n            <em>\n              Mô tả kinh nghiệm làm việc của bạn càng chi tiết càng tốt, điều đó\n              giúp bạn có cơ hội được tuyển dụng cao hơn{' '}\n            </em>\n          </Typography>\n          <Divider />\n          <Button\n            variant=\"text\"\n            color=\"secondary\"\n            onClick={handleAddWork}\n            startIcon={<AutoFixHighOutlinedIcon fontSize=\"large\" />}\n            sx={{ my: 1 }}\n          >\n            <Typography>Thêm kinh nghiệm làm việc</Typography>\n          </Button>\n          <Snackbar\n            open={isNoProfile}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            autoHideDuration={5000}\n            onClose={() => setIsNoProfile(false)}\n          >\n            <Alert severity=\"error\">\n              <AlertTitle>\n                <strong>\n                  {isNoProfile &&\n                    'Vui lòng hoàn thành trước phần Thông tin chung!'}\n                </strong>\n              </AlertTitle>\n            </Alert>\n          </Snackbar>\n        </>\n      )}\n    </>\n  );\n}\n","import { Box, Typography, Container, Divider } from '@mui/material';\nimport ExperienceView from './ViewWork';\n\nexport default function Experience() {\n  return (\n    <>\n      <Container id=\"work_experience\">\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Box display=\"flex\">\n            <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n              Kinh nghiệm nghề nghiệp\n            </Typography>\n          </Box>\n        </Box>\n        <Divider />\n        <ExperienceView />\n      </Container>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationInformation } from 'src/modules/jobProfile/model/index';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = EducationService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    EducationInformation\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateEducation;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\nimport { EducationInformation } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    [id: string, data: EducationInformation]\n  >(([id, data]) => EducationService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateEducation;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\nimport { EducationInformation } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    string\n  >((id) => EducationService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteEducation;\n","import {\r\n  Box,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid\r\n} from '@mui/material';\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport FormControl from '../FormControl';\r\nimport TextField from '../TextField';\r\nimport ButtonGroup from '../ButtonGroup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useResponsive } from 'src/utils/responsive';\r\nimport DatePicker from '../DatePicker';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n  isIsoDate,\r\n  toInputDateString,\r\n  toOutputDateString\r\n} from 'src/utils/formatData';\r\nimport { log10 } from 'mathjs';\r\n\r\nconst dateType = ['startDate', 'endDate'];\r\n\r\nexport default function EditGridInfo(props) {\r\n  const {\r\n    row,\r\n    open,\r\n    close,\r\n    handleClose,\r\n    title,\r\n    columns,\r\n    handleSave,\r\n    handleUpdate\r\n  } = props;\r\n  const { isMobile } = useResponsive();\r\n\r\n  const defaultValues = columns.reduce((acc, column) => {\r\n    acc[column.field] = '';\r\n    return acc;\r\n  }, {});\r\n\r\n  const defaultData = useMemo(() => {\r\n    const data = { ...row };\r\n    if (row?.startDate) {\r\n      data.startDate = toInputDateString(row?.startDate, 'DD/MM/YYYY');\r\n    }\r\n    if (row?.endDate)\r\n      data.endDate = toInputDateString(row?.endDate, 'DD/MM/YYYY');\r\n    return data;\r\n  }, [row]);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm({\r\n    defaultValues: defaultValues\r\n  });\r\n\r\n  const handleSaveInfo = (data) => {\r\n    for (let key in data) {\r\n      if (!data.hasOwnProperty(key)) continue;\r\n\r\n      if (dateType.includes(key)) {\r\n        debugger;\r\n        const dateString = toOutputDateString(data[key]);\r\n        data[key] = dateString;\r\n      }\r\n    }\r\n\r\n    if (row?.id) handleUpdate(row?.id, data);\r\n    else handleSave(data);\r\n    reset(defaultValues);\r\n    close();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!row) reset(defaultValues);\r\n\r\n    reset(defaultData);\r\n  }, [row]);\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      fullWidth\r\n      maxWidth={'md'}\r\n      fullScreen={isMobile}\r\n    >\r\n      <DialogTitle\r\n        sx={{\r\n          textAlign: 'center',\r\n          fontWeight: 700,\r\n          fontSize: { md: '1.3rem', xs: '1rem' }\r\n        }}\r\n      >\r\n        {title}\r\n      </DialogTitle>\r\n      <Divider />\r\n      <DialogContent>\r\n        <Box sx={{ p: 3 }}>\r\n          <Grid container spacing={3} mb={4}>\r\n            {columns?.map(\r\n              (col, index) =>\r\n                col?.field !== 'id' && (\r\n                  <Grid key={index} item xs={12}>\r\n                    <FormControl\r\n                      element={\r\n                        dateType.includes(col?.field) ? (\r\n                          <DatePicker />\r\n                        ) : (\r\n                          <TextField />\r\n                        )\r\n                      }\r\n                      control={control}\r\n                      errors={errors}\r\n                      fullWidth\r\n                      label={col?.headerName}\r\n                      name={col?.field}\r\n                      multiline\r\n                      required\r\n                    />\r\n                  </Grid>\r\n                )\r\n            )}\r\n          </Grid>\r\n          <ButtonGroup\r\n            handleSubmit={handleSubmit(handleSaveInfo)}\r\n            handleCancel={() => close()}\r\n          />\r\n        </Box>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  Snackbar,\r\n  Alert,\r\n  AlertTitle,\r\n  Typography,\r\n  Dialog,\r\n  DialogTitle,\r\n  Divider,\r\n  DialogContent\r\n} from '@mui/material';\r\nimport {\r\n  GridRowsProp,\r\n  GridRowModesModel,\r\n  GridRowModes,\r\n  DataGrid,\r\n  GridColDef,\r\n  GridToolbarContainer,\r\n  GridActionsCellItem,\r\n  GridEventListener,\r\n  GridRowId,\r\n  GridRowModel,\r\n  GridRowEditStopReasons\r\n} from '@mui/x-data-grid';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CancelIcon from '@mui/icons-material/Close';\r\nimport dayjs from 'dayjs';\r\nimport alertDialog from 'src/utils/alertDialog';\r\nimport EditGridInfo from './EditGridInfo';\r\nimport { useResponsive } from 'src/utils/responsive';\r\n\r\nconst randomId = () =>\r\n  `${Math.floor(Math.random() * 10000)}${Math.random()\r\n    .toString(36)\r\n    .substring(2, 7)}`;\r\n\r\ninterface EditToolbarProps {\r\n  setCurrentRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\r\n  setRowModesModel: (\r\n    newModel: (oldModel: GridRowModesModel) => GridRowModesModel\r\n  ) => void;\r\n}\r\n\r\nconst EditDataGrid = (props) => {\r\n  const {\r\n    columns,\r\n    rows,\r\n    handleSave,\r\n    handleUpdate,\r\n    handleDelete,\r\n    profile,\r\n    title,\r\n    ...rest\r\n  } = props;\r\n  const [currentRows, setCurrentRows] = useState<GridRowsProp>([]);\r\n  const [initialRows, setInitialRows] = useState<GridRowsProp>([]);\r\n  const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\r\n  const [error, setError] = useState({ type: null, errorField: null });\r\n  const [openEditOnMobile, setOpenEditOnMobile] = useState({\r\n    open: false,\r\n    row: null\r\n  });\r\n  const { isMobile } = useResponsive();\r\n\r\n  useEffect(() => {\r\n    setCurrentRows(rows?.length > 0 ? rows : []);\r\n    setInitialRows(rows?.length > 0 ? rows : []);\r\n  }, [rows]);\r\n\r\n  function EditToolbar(props: EditToolbarProps) {\r\n    const { setCurrentRows, setRowModesModel } = props;\r\n\r\n    const handleAddClick = () => {\r\n      if (isMobile) {\r\n        setOpenEditOnMobile(() => ({ open: true, row: null }));\r\n        return;\r\n      }\r\n      if (!profile?.userId) {\r\n        setError({ type: 'noProfile', errorField: null });\r\n        return;\r\n      }\r\n      if (currentRows[0]?.isNew) return;\r\n      const id = randomId();\r\n      const newRow = { id, isNew: true };\r\n      const emptyRow = columns.reduce((acc, column) => {\r\n        return { ...acc, [column.field]: '' };\r\n      }, newRow);\r\n\r\n      setCurrentRows((oldRows) => [emptyRow, ...oldRows]);\r\n      setRowModesModel((oldModel) => ({\r\n        ...oldModel,\r\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: columns[0].field }\r\n      }));\r\n    };\r\n\r\n    return (\r\n      <GridToolbarContainer>\r\n        <Button\r\n          color=\"secondary\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleAddClick}\r\n        >\r\n          <Typography sx={{ fontWeight: 700, fontSize: 16 }}>\r\n            Thêm mới\r\n          </Typography>\r\n        </Button>\r\n      </GridToolbarContainer>\r\n    );\r\n  }\r\n\r\n  const handleRowEditStop: GridEventListener<'rowEditStop'> = (\r\n    params,\r\n    event\r\n  ) => {\r\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\r\n      event.defaultMuiPrevented = true;\r\n    }\r\n  };\r\n\r\n  const handleEditOnMobile = (row) => {\r\n    setOpenEditOnMobile({ open: true, row: row });\r\n  };\r\n\r\n  const handleEditClick = (id: GridRowId) => {\r\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n  };\r\n\r\n  const handleSaveClick = (id: GridRowId) => {\r\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n  };\r\n\r\n  const handleDeleteClick = (id: GridRowId) => {\r\n    alertDialog({\r\n      selectedId: id,\r\n      handleConfirm: handleConfirmDelete\r\n    });\r\n  };\r\n\r\n  const handleConfirmDelete = (id: GridRowId) => {\r\n    setCurrentRows(currentRows.filter((row) => row.id !== id));\r\n    handleDelete(id);\r\n  };\r\n\r\n  const handleCancelClick = (id: GridRowId) => {\r\n    setRowModesModel({\r\n      ...rowModesModel,\r\n      [id]: { mode: GridRowModes.View, ignoreModifications: true }\r\n    });\r\n\r\n    const editedRow = currentRows.find((row) => row.id === id);\r\n    if (editedRow!.isNew) {\r\n      setCurrentRows(currentRows.filter((row) => row.id !== id));\r\n    }\r\n  };\r\n\r\n  const processRowUpdate = (newRow: GridRowModel) => {\r\n    let updatedRow;\r\n    const existingRow = initialRows.find((row) => row.id === newRow.id);\r\n\r\n    const invalidFields = columns\r\n      .filter(\r\n        (col) =>\r\n          col.type === 'date' &&\r\n          (!dayjs(newRow[col.field]).isValid() || newRow[col.field] === null)\r\n      )\r\n      .map((col) => col.headerName);\r\n\r\n    const missingFields = columns\r\n      .filter((col) => newRow[col.field] === '')\r\n      .map((col) => col.headerName);\r\n\r\n    for (const col of columns) {\r\n      if (col.type === 'date') {\r\n        newRow[col.field] = dayjs(newRow[col.field]).format('DD/MM/YYYY');\r\n      }\r\n    }\r\n\r\n    if (missingFields.length > 0) {\r\n      setError({ type: 'missing', errorField: `${missingFields.join(', ')}` });\r\n      return;\r\n    }\r\n    if (invalidFields.length > 0) {\r\n      setError({ type: 'invalid', errorField: `${invalidFields.join(', ')}` });\r\n      return;\r\n    }\r\n\r\n    if (!existingRow) {\r\n      updatedRow = { ...newRow, isNew: false };\r\n      handleSave({ ...newRow });\r\n    } else {\r\n      updatedRow = { ...newRow, isNew: false };\r\n      handleUpdate(newRow.id, updatedRow);\r\n    }\r\n    const rowList = currentRows.map((row) =>\r\n      row.id === newRow.id ? updatedRow : row\r\n    );\r\n    setCurrentRows(rowList);\r\n    return updatedRow;\r\n  };\r\n\r\n  const handleRowModesModelChange = (newRowModesModel: GridRowModesModel) => {\r\n    setRowModesModel(newRowModesModel);\r\n  };\r\n\r\n  const actionColumns: GridColDef[] = [\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: 'Chỉnh sửa',\r\n      width: 100,\r\n      cellClassName: 'actions',\r\n      getActions: ({ id, row }) => {\r\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n\r\n        if (isInEditMode) {\r\n          return [\r\n            <GridActionsCellItem\r\n              icon={<SaveIcon />}\r\n              label=\"Save\"\r\n              sx={{\r\n                color: 'primary.main'\r\n              }}\r\n              onClick={() => handleSaveClick(id)}\r\n              key=\"save\"\r\n            />,\r\n            <GridActionsCellItem\r\n              icon={<CancelIcon />}\r\n              label=\"Cancel\"\r\n              className=\"textPrimary\"\r\n              onClick={() => handleCancelClick(id)}\r\n              color=\"inherit\"\r\n              key=\"cancel\"\r\n            />\r\n          ];\r\n        }\r\n        return [\r\n          <GridActionsCellItem\r\n            icon={<EditIcon />}\r\n            label=\"Edit\"\r\n            className=\"textPrimary\"\r\n            onClick={() =>\r\n              isMobile ? handleEditOnMobile(row) : handleEditClick(id)\r\n            }\r\n            color=\"inherit\"\r\n            key=\"edit\"\r\n          />,\r\n          <GridActionsCellItem\r\n            icon={<DeleteIcon />}\r\n            label=\"Delete\"\r\n            onClick={() => handleDeleteClick(id)}\r\n            color=\"inherit\"\r\n            key=\"delete\"\r\n          />\r\n        ];\r\n      }\r\n    }\r\n  ];\r\n\r\n  const fullCols: GridColDef[] = [...columns, ...actionColumns];\r\n\r\n  return (\r\n    <>\r\n      <DataGrid\r\n        rows={currentRows}\r\n        columns={fullCols}\r\n        editMode=\"row\"\r\n        rowModesModel={rowModesModel}\r\n        onRowModesModelChange={handleRowModesModelChange}\r\n        onRowEditStop={handleRowEditStop}\r\n        processRowUpdate={processRowUpdate}\r\n        disableColumnMenu\r\n        hideFooterSelectedRowCount\r\n        initialState={{\r\n          pagination: {\r\n            paginationModel: {\r\n              pageSize: 5\r\n            }\r\n          }\r\n        }}\r\n        slots={{\r\n          toolbar: EditToolbar\r\n        }}\r\n        slotProps={{\r\n          toolbar: {\r\n            setCurrentRows,\r\n            setRowModesModel\r\n          }\r\n        }}\r\n        getRowHeight={() => 'auto'}\r\n        sx={{\r\n          minHeight: 208,\r\n          '&.MuiDataGrid-root--densityCompact .MuiDataGrid-cell': { py: '8px' },\r\n          '&.MuiDataGrid-root--densityStandard .MuiDataGrid-cell': {\r\n            py: '15px'\r\n          },\r\n          '&.MuiDataGrid-root--densityComfortable .MuiDataGrid-cell': {\r\n            py: '22px'\r\n          },\r\n          '.MuiDataGrid-columnHeaderTitle': { fontWeight: 700 }\r\n        }}\r\n        {...rest}\r\n      />\r\n      <Snackbar\r\n        open={error?.type}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n        autoHideDuration={5000}\r\n        onClose={() => setError({ type: null, errorField: null })}\r\n      >\r\n        <Alert severity=\"error\">\r\n          <AlertTitle>\r\n            {error?.type === 'missing' && 'Chưa nhập đầy đủ thông tin'}\r\n            {error?.type === 'invalid' && 'Thời gian không hợp lệ'}\r\n            <strong>\r\n              {error?.type === 'noProfile' &&\r\n                'Vui lòng hoàn thành trước phần Thông tin chung!'}\r\n            </strong>\r\n          </AlertTitle>\r\n          <strong>{error?.errorField}</strong>\r\n        </Alert>\r\n      </Snackbar>\r\n      <EditGridInfo\r\n        row={openEditOnMobile.row}\r\n        open={openEditOnMobile.open}\r\n        close={() => setOpenEditOnMobile(() => ({ open: false, row: null }))}\r\n        title={title}\r\n        handleSave={handleSave}\r\n        handleUpdate={handleUpdate}\r\n        columns={columns}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditDataGrid;\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Divider,\n  Alert,\n  AlertTitle,\n  Snackbar,\n  styled\n} from '@mui/material';\nimport { GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport useQueryOnlineProfile from '../../hooks/useQueryOnlineProfile';\nimport useMutateEducation from './hooks/useMutateEducation';\nimport useMutateUpdateEducation from './hooks/useMutateUpdateEducation';\nimport useMutateDeleteEducation from './hooks/useMutateDeleteEducation';\nimport dayjs from 'dayjs';\nimport EditDataGrid from 'src/components/EditDataGrid';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { toOutputDateString } from 'src/utils/formatData';\nimport DatePicker from 'src/components/DatePicker';\nimport { useResponsive } from 'src/utils/responsive';\n\nconst DatePickerStyle = {\n  '.css-i4bv87-MuiSvgIcon-root': {\n    height: '14px',\n    width: '14px'\n  },\n  '.css-1qrfzum-MuiButtonBase-root-MuiIconButton-root': {\n    paddingX: '0px',\n    marginRight: '-5px'\n  },\n  '.css-yykmq0-MuiInputBase-input-MuiOutlinedInput-input': {\n    paddingX: 0,\n    marginX: 0\n  },\n  '.css-33lv7h-MuiInputBase-root-MuiOutlinedInput-root': {\n    fontSize: '12px',\n    paddingRight: 0,\n    paddingLeft: '-100px'\n  }\n};\n\nexport default function Education() {\n  const { isMobile } = useResponsive();\n  const { profile, setProfile } = useOnlineProfile();\n  const { onSaveData } = useMutateEducation();\n  const { onSaveDataById } = useMutateUpdateEducation();\n  const { onDeleteDataById } = useMutateDeleteEducation();\n\n  const [rows, setRows] = useState<GridRowsProp>([]);\n  const [error, setError] = useState({ state: false, message: '' });\n\n  const processData = (rows: GridRowsProp) => {\n    rows.map((row) => {\n      row.startDate = toOutputDateString(row.startDate);\n      row.endDate = toOutputDateString(row.endDate);\n    });\n  };\n\n  useEffect(() => {\n    const rows = profile?.education_informations;\n    const initialRows = rows ? JSON.parse(JSON.stringify(rows)) : [];\n    if (initialRows) processData(initialRows);\n    setRows(profile?.education_informations?.length > 0 ? initialRows : []);\n  }, [profile]);\n\n  const validation = (data) => {\n    if (\n      dayjs(data.startDate, 'DD/MM/YYYY').isAfter(\n        dayjs(data.endDate, 'DD/MM/YYYY')\n      )\n    ) {\n      setError({ state: true, message: 'Ngày kết thúc phải sau ngày bắt đầu' });\n      return false;\n    }\n    return true;\n  };\n\n  const handleSaveEducationData = (data) => {\n    if (validation(data)) {\n      onSaveData(data);\n      // console.log(data);\n      // const prevList = profile?.education_informations || [];\n      // const eduList = [...prevList, { ...data }];\n      // setProfile({ education_informations: eduList });\n    }\n  };\n  const handleUpdateEducationData = (id, data) => {\n    if (validation(data)) {\n      onSaveDataById([id, data]);\n      // const index = profile?.education_informations?.findIndex(\n      //   (item) => item.id === data.id\n      // );\n\n      // if (index !== -1) {\n      //   const eduList = [...profile?.education_informations] || [];\n      //   eduList[index] = data;\n      //   setProfile({ education_informations: eduList });\n      // }\n    }\n  };\n  const handleDeleteEducationData = (id) => {\n    onDeleteDataById(id);\n    // const eduList = profile?.education_informations?.filter(\n    //   (edu) => edu.id !== id\n    // );\n    // setProfile({ education_informations: eduList });\n  };\n\n  const handleDateChange = (params, date) => {\n    params.api.setEditCellValue({\n      ...params,\n      value: date // Cập nhật giá trị đã chọn từ DatePicker vào row\n    });\n  };\n\n  const columns: GridColDef[] = [\n    {\n      field: 'id',\n      headerName: 'ID'\n    },\n    {\n      field: 'schoolName',\n      headerName: 'Trường/ Trung tâm đào tạo',\n      width: !isMobile ? 240 : 190,\n      editable: true\n    },\n    {\n      field: 'specialization',\n      headerName: 'Chuyên ngành',\n      width: 220,\n      editable: true\n    },\n    {\n      field: 'degreeName',\n      headerName: 'Tên chứng chỉ',\n      width: 150,\n      editable: true\n    },\n    {\n      field: 'startDate',\n      headerName: 'Bắt đầu',\n      type: 'date',\n      width: 110,\n      editable: true,\n      valueGetter: (params) => {\n        return dayjs(params.value, 'DD/MM/YYYY').toDate();\n      },\n      valueFormatter(params) {\n        return toOutputDateString(params.value);\n      },\n      renderEditCell: (params) => {\n        return (\n          <DatePicker\n            sx={DatePickerStyle}\n            onChange={(e) => handleDateChange(params, e)}\n            value={params.value}\n          />\n        );\n      }\n    },\n    {\n      field: 'endDate',\n      headerName: 'Kết thúc',\n      type: 'date',\n      width: 110,\n      editable: true,\n      valueGetter: (params) => {\n        return dayjs(params.value, 'DD-MM-YYYY').toDate();\n      },\n      valueFormatter(params) {\n        return toOutputDateString(params.value);\n      },\n      renderEditCell: (params) => {\n        return (\n          <DatePicker\n            sx={DatePickerStyle}\n            onChange={(e) => handleDateChange(params, e)}\n            value={params.value}\n          />\n        );\n      }\n    }\n  ];\n\n  return (\n    <Container id=\"education\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin học vấn\n          </Typography>\n        </Box>\n      </Box>\n      <Divider />\n      <Box pt={3} pb={6}>\n        <EditDataGrid\n          profile={profile}\n          rows={rows}\n          columns={columns}\n          title={'Thông tin học vấn'}\n          handleSave={handleSaveEducationData}\n          handleUpdate={handleUpdateEducationData}\n          handleDelete={handleDeleteEducationData}\n          initialState={{\n            pagination: {\n              paginationModel: {\n                pageSize: 5\n              }\n            },\n            columns: {\n              columnVisibilityModel: {\n                specialization: !isMobile,\n                degreeName: !isMobile,\n                startDate: !isMobile,\n                endDate: !isMobile,\n                id: false\n              }\n            }\n          }}\n        />\n      </Box>\n\n      <Snackbar\n        open={error?.state}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={5000}\n        onClose={() => setError({ state: false, message: '' })}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            <strong>{error?.message}</strong>\n          </AlertTitle>\n          Dữ liệu của bạn sẽ không được lưu lại\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { AnotherDegree } from 'src/modules/jobProfile/model/index';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = DegreeService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    AnotherDegree\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateDegree;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\nimport { AnotherDegree } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    [id: string, data: AnotherDegree]\n  >(([id, data]) => DegreeService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateDegree;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\nimport { AnotherDegree } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    string\n  >((id) => DegreeService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteDegree;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  LinearProgress,\n  Container,\n  Divider\n} from '@mui/material';\nimport { GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport useMutateDegree from './hooks/useMutateDegree';\nimport useMutateUpdateDegree from './hooks/useMutateUpdateDegree';\nimport useMutateDeleteDegree from './hooks/useMutateDeleteDegree';\nimport EditDataGrid from 'src/components/EditDataGrid';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { useResponsive } from 'src/utils/responsive';\n\nfunction Degree() {\n  const { isMobile } = useResponsive();\n  const { profile } = useOnlineProfile();\n  const { onSaveData } = useMutateDegree();\n  const { onSaveDataById } = useMutateUpdateDegree();\n  const { onDeleteDataById } = useMutateDeleteDegree();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSaveDegreeData = async (data) => {\n    setLoading(true);\n    const newData = { ...data };\n    onSaveData(newData);\n    setLoading(false);\n  };\n\n  const handleUpdateDegreeData = async (id, data) => {\n    setLoading(true);\n    const newData = { ...data };\n    onSaveDataById([id, newData]);\n    setLoading(false);\n  };\n\n  const handleDeleteDegreeData = async (id) => {\n    setLoading(true);\n    onDeleteDataById(id);\n    setLoading(false);\n  };\n\n  const [rows, setRows] = useState<GridRowsProp>([]);\n\n  useEffect(() => {\n    if (profile?.another_degrees && profile.another_degrees.length > 0) {\n      setRows(profile.another_degrees);\n    }\n  }, [profile]);\n\n  const columns: GridColDef[] = [\n    {\n      field: 'id',\n      headerName: 'ID'\n    },\n    {\n      field: 'degreeName',\n      headerName: 'Chứng chỉ',\n      width: !isMobile ? 420 : 190,\n      editable: true\n    },\n    {\n      field: 'level',\n      headerName: 'Mức độ thành thạo',\n      width: 410,\n      editable: true\n    }\n  ];\n\n  if (loading) {\n    return (\n      <Box sx={{ width: '100%' }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container id=\"other_degree\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Những chứng chỉ khác\n          </Typography>\n        </Box>\n      </Box>\n      <Divider />\n      <Box pt={3} pb={6}>\n        <EditDataGrid\n          rows={rows}\n          columns={columns}\n          title={'Thông tin chứng chỉ'}\n          handleSave={handleSaveDegreeData}\n          handleUpdate={handleUpdateDegreeData}\n          handleDelete={handleDeleteDegreeData}\n          profile={profile}\n          initialState={{\n            pagination: {\n              paginationModel: {\n                pageSize: 5\n              }\n            },\n            columns: {\n              columnVisibilityModel: {\n                level: !isMobile,\n                id: false\n              }\n            }\n          }}\n        />\n      </Box>\n    </Container>\n  );\n}\n\nexport default Degree;\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  Typography,\n  Button,\n  Snackbar,\n  Alert,\n  AlertTitle,\n  Backdrop,\n  useTheme\n} from '@mui/material';\nimport Personal from '../Personal';\nimport General from './components/General';\nimport Experience from './components/Experience';\nimport Education from './components/Education';\nimport Degree from './components/Degree';\nimport TableOfContents from '../TableOfContent';\nimport AccountBoxOutlinedIcon from '@mui/icons-material/AccountBoxOutlined';\nimport WorkOutlineIcon from '@mui/icons-material/WorkOutline';\nimport AssignmentOutlinedIcon from '@mui/icons-material/AssignmentOutlined';\nimport SchoolOutlinedIcon from '@mui/icons-material/SchoolOutlined';\nimport WorkspacePremiumOutlinedIcon from '@mui/icons-material/WorkspacePremiumOutlined';\nimport useQueryOnlineProfile from './hooks/useQueryOnlineProfile';\nimport useOnlineProfile from './hooks/useOnlineProfile';\nimport SuspenseLoader from 'src/components/SuspenseLoader';\nimport SubmitBox from '../SubmitBox';\nimport { useNavigate } from 'react-router';\nimport useMutateUpdateOnlineProfile from './hooks/useMutateUpdateOnlineProfile';\nimport { OnlineProfile as OnlineProfileType } from '../model';\nimport { loadKeywords, preProcessData } from 'src/utils/keywords';\nimport sendChatGPTRequest from 'src/GPT/sendChatGPTRequest';\nimport { cvAnalysist, translate } from 'src/GPT/roles';\nimport { checkIsMobile } from 'src/utils/responsive';\n\nconst MyBox = ({ children }) => (\n  <Box bgcolor=\"#ffff\" sx={{ mb: 4, boxShadow: '2px 2px 6px #aae2f7' }}>\n    {children}\n  </Box>\n);\n\nconst sections = [\n  {\n    icon: <AccountBoxOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin cá nhân',\n    id: 'personal'\n  },\n  {\n    icon: <WorkOutlineIcon sx={{ width: 20 }} />,\n    title: 'Thông tin chung',\n    id: 'general'\n  },\n  {\n    icon: <AssignmentOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin nghề nghiệp',\n    id: 'work_experience'\n  },\n  {\n    icon: <SchoolOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin học vấn',\n    id: 'education'\n  },\n  {\n    icon: <WorkspacePremiumOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Những chứng chỉ khác',\n    id: 'other_degree'\n  }\n];\n\nexport default function OnlineProfile() {\n  const [missingInfo, setMissingInfo] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const { onlineProfile, isLoading } = useQueryOnlineProfile();\n  const { profile, setProfile } = useOnlineProfile();\n  const { onUpdateData } = useMutateUpdateOnlineProfile();\n  const navigate = useNavigate();\n\n  const theme = useTheme();\n  const isMobile = checkIsMobile(theme);\n\n  const handleSubmit = async () => {\n    setIsAnalyzing(true);\n    if (profile?.userId) {\n      const dataToAnalyze = preProcessData(profile, 'online');\n      const analysisResults = await sendChatGPTRequest(\n        cvAnalysist,\n        [dataToAnalyze],\n        null,\n        {\n          '58': 5,\n          '60': 5\n        }\n      );\n      const translatedResults = await sendChatGPTRequest(\n        translate,\n        analysisResults\n      );\n      const keywords = loadKeywords(translatedResults);\n      onUpdateData({\n        ...profile,\n        keywords: profile?.skills + ', ' + keywords\n      } as OnlineProfileType);\n      setFinished(true);\n      setIsAnalyzing(false);\n    } else {\n      setMissingInfo(true);\n      setIsAnalyzing(false);\n    }\n  };\n\n  const goBack = async () => {\n    setFinished(true);\n  };\n\n  useEffect(() => {\n    if (finished) {\n      navigate('/employee/recruitment-profile');\n    }\n  }, [finished]);\n\n  useEffect(() => {\n    setProfile(onlineProfile);\n  }, [onlineProfile]);\n\n  if (isLoading) return <SuspenseLoader />;\n  return (\n    <>\n      <Container key=\"online\">\n        <Typography mt={3} fontSize={22} fontWeight={700}>\n          Tạo hồ sơ trực tuyến\n        </Typography>\n        <Grid container columnSpacing={2} mt={2}>\n          <Grid item xs={!isMobile ? 10 : 12}>\n            {sections.map((section) => (\n              <MyBox key={section.id}>\n                {section.id === 'personal' && <Personal />}\n                {section.id === 'general' && <General />}\n                {section.id === 'work_experience' && <Experience />}\n                {section.id === 'education' && <Education />}\n                {section.id === 'other_degree' && <Degree />}\n              </MyBox>\n            ))}\n          </Grid>\n          <Grid\n            item\n            xs={!isMobile ? 2 : 0}\n            sx={{ display: { xs: 'none', sm: 'inline' } }}\n          >\n            <Box\n              bgcolor=\"#ffff\"\n              sx={{ boxShadow: '2px 2px 6px #aae2f7' }}\n              width={200}\n              position=\"sticky\"\n              top={60}\n            >\n              <TableOfContents sections={sections} />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n      <SubmitBox>\n        <Button\n          onClick={goBack}\n          variant=\"outlined\"\n          color=\"secondary\"\n          sx={{ width: 200 }}\n        >\n          Quay lại\n        </Button>\n        <Button variant=\"contained\" sx={{ width: 200 }} onClick={handleSubmit}>\n          Lưu hồ sơ\n        </Button>\n      </SubmitBox>\n      <Snackbar\n        open={missingInfo}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={3000}\n        onClose={() => setMissingInfo(false)}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            {missingInfo && 'Vui lòng cung cấp thông tin chung'}\n          </AlertTitle>\n        </Alert>\n      </Snackbar>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={isAnalyzing}\n      >\n        <SuspenseLoader />\n      </Backdrop>\n    </>\n  );\n}\n"],"names":["useMutateUpdateOnlineProfile","queryClient","useQueryClient","toast","useApp","mutate","onUpdateData","isLoading","isSuccess","useMutation","data","OnlineProfileService","updateWithoutId","onSuccess","res","status","invalidateQueries","success","massage","message","error","onError","response","useQueryOnlineProfile","isEmployee","setProfile","useOnlineProfile","isLoggedIn","Boolean","getAccessToken","refetch","useQuery","get","retry","failureCount","refetchOnWindowFocus","enabled","useEffect","onlineProfile","useMutateOnlineProfile","mutationFunction","create","onSaveData","OnlineGeneral","profile","useUpdateOnlineProfile","newData","setNewData","useState","options","profession","PROFESSION","workAddress","WORK_AT","positionLevel","POSITION_LEVEL","degree","DEGREE","experience","EXPERIENCE","workingForm","WORKING_FORM","convertStringToObjectList","_jsx","GeneralForm","onSubmit","findObjectKey","Degree","userId","useMutateExperience","WorkExperienceService","useMutateUpdateExperience","onSaveDataById","_ref","id","ExperienceService","update","useWorkExperience","work_experiences","useAppSelector","selectWorkExperience","dispatch","useAppDispatch","setWorkExperience","setWorkExperienceAction","EditExperience","props","onClose","workId","setError","state","control","watch","reset","handleSubmit","formState","errors","useForm","defaultValues","jobTitle","companyName","startDate","endDate","isDoing","jobDescription","dayjs","isAfter","_profile$work_experie","foundExperience","find","formattedInputData","toInputDateString","_jsxs","_Fragment","children","Divider","Box","py","Grid","container","mb","spacing","item","xs","sm","FormControl","element","TextField","fullWidth","label","name","required","columnSpacing","display","height","Checkbox","checked","sx","width","mr","InputLabel","htmlFor","DatePicker","maxDate","alignContent","alignItems","TrendingFlatIcon","Typography","fontSize","Alert","severity","AlertTitle","minRows","multiline","ButtonGroup","async","formattedOutputData","toOutputDateString","processOutputData","handleCancel","useMutateDeleteExperience","onDeleteDataById","remove","ExperienceView","listOfWork","setListOfWork","selectedWorkId","setSelectedWorkId","isEditWorkVisible","setIsEditWorkVisible","isNoProfile","setIsNoProfile","handleConfirmDelete","map","work","columnGap","my","Avatar","src","defaultImage","companyAvatar","variant","bgcolor","BusinessIcon","flexDirection","rowGap","flex","fontWeight","IconButton","onClick","handleEditWork","ModeEditOutlineIcon","handleDeleteWork","alertDialog","selectedId","handleConfirm","DeleteOutlineIcon","length","color","Button","handleAddWork","startIcon","AutoFixHighOutlinedIcon","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","Experience","Container","justifyContent","lineHeight","useMutateEducation","EducationService","useMutateUpdateEducation","useMutateDeleteEducation","dateType","EditGridInfo","row","close","handleClose","title","columns","handleSave","handleUpdate","isMobile","useResponsive","reduce","acc","column","field","defaultData","useMemo","Dialog","maxWidth","fullScreen","DialogTitle","textAlign","md","DialogContent","p","col","index","includes","headerName","key","hasOwnProperty","dateString","rows","handleDelete","rest","currentRows","setCurrentRows","initialRows","setInitialRows","rowModesModel","setRowModesModel","type","errorField","openEditOnMobile","setOpenEditOnMobile","filter","actionColumns","cellClassName","getActions","_rowModesModel$id","mode","GridRowModes","Edit","GridActionsCellItem","icon","SaveIcon","View","handleSaveClick","CancelIcon","className","ignoreModifications","isNew","handleCancelClick","EditIcon","handleEditOnMobile","handleEditClick","DeleteIcon","handleDeleteClick","fullCols","DataGrid","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","handleRowEditStop","params","event","reason","GridRowEditStopReasons","rowFocusOut","defaultMuiPrevented","processRowUpdate","newRow","updatedRow","existingRow","invalidFields","isValid","missingFields","format","concat","join","rowList","disableColumnMenu","hideFooterSelectedRowCount","initialState","pagination","paginationModel","pageSize","slots","toolbar","GridToolbarContainer","AddIcon","handleAddClick","_currentRows$","Math","floor","random","toString","substring","emptyRow","oldRows","oldModel","fieldToFocus","slotProps","getRowHeight","minHeight","DatePickerStyle","paddingX","marginRight","marginX","paddingRight","paddingLeft","Education","setRows","_profile$education_in","education_informations","JSON","parse","stringify","processData","validation","handleDateChange","date","api","setEditCellValue","value","editable","valueGetter","toDate","valueFormatter","renderEditCell","onChange","e","pt","pb","EditDataGrid","handleUpdateEducationData","columnVisibilityModel","specialization","degreeName","useMutateDegree","DegreeService","useMutateUpdateDegree","useMutateDeleteDegree","loading","setLoading","another_degrees","LinearProgress","level","MyBox","boxShadow","sections","AccountBoxOutlinedIcon","WorkOutlineIcon","AssignmentOutlinedIcon","SchoolOutlinedIcon","WorkspacePremiumOutlinedIcon","OnlineProfile","missingInfo","setMissingInfo","finished","setFinished","isAnalyzing","setIsAnalyzing","navigate","useNavigate","theme","useTheme","checkIsMobile","SuspenseLoader","mt","section","Personal","General","position","top","TableOfContents","SubmitBox","dataToAnalyze","preProcessData","analysisResults","sendChatGPTRequest","cvAnalysist","translatedResults","translate","keywords","loadKeywords","skills","Backdrop","zIndex","drawer"],"sourceRoot":""}