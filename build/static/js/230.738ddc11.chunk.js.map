{"version":3,"file":"static/js/230.738ddc11.chunk.js","mappings":"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","sources":["components/DatePicker/index.tsx","components/Footer/index.tsx","components/NumberFormatCustom/index.tsx","components/SelectInput/index.tsx","components/TextField/index.tsx","modules/jobs/hooks/useMutateJob.ts","modules/jobs/hooks/useMutateJobById.ts","modules/jobs/components/FormCreate.tsx","modules/jobs/hooks/useQueryJobById.ts","utils/keywords.ts","../node_modules/@mui/material/CardActions/cardActionsClasses.js","../node_modules/@mui/material/CardActions/CardActions.js"],"sourcesContent":["import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker as DatePickerMui } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport dayjs from 'dayjs';\n\nexport default function DatePicker(props) {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DatePickerMui\n        format=\"DD/MM/YYYY\"\n        {...props}\n        value={props.value ? dayjs(props.value) : null}\n        slotProps={{ textField: { size: 'small', fullWidth: true } }}\n      />\n    </LocalizationProvider>\n  );\n}\n","import { Box, Container, Link, Typography, styled } from '@mui/material';\n\nconst FooterWrapper = styled(Container)(\n  ({ theme }) => `\n        margin-top: ${theme.spacing(4)};\n`\n);\n\nfunction Footer() {\n  return (\n    <FooterWrapper className=\"footer-wrapper\">\n      <Box\n        pb={2}\n        display={{ xs: 'block', md: 'flex' }}\n        alignItems=\"center\"\n        textAlign={{ xs: 'center', md: 'left' }}\n        justifyContent=\"space-between\"\n      ></Box>\n    </FooterWrapper>\n  );\n}\n\nexport default Footer;\n","import * as React from 'react';\r\nimport { NumericFormat, NumericFormatProps } from 'react-number-format';\r\n\r\ninterface CustomProps {\r\n  onChange: (event: { target: { name: string; value: string } }) => void;\r\n  name: string;\r\n}\r\n\r\nconst NumericFormatCustom = React.forwardRef<NumericFormatProps, CustomProps>(\r\n  function NumericFormatCustom(props, ref) {\r\n    const { onChange, ...other } = props;\r\n\r\n    return (\r\n      <NumericFormat\r\n        {...other}\r\n        getInputRef={ref}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value\r\n            }\r\n          });\r\n        }}\r\n        thousandSeparator\r\n        valueIsNumericString\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nexport default NumericFormatCustom;\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent, SelectProps } from '@mui/material/Select';\r\n\r\nexport type Option = {\r\n  value: number | string;\r\n  label: string | React.ReactElement;\r\n};\r\nexport type PropsSelectInput = SelectProps & {\r\n  options?: Option[];\r\n  labelmargintop?: string;\r\n};\r\nexport default function SelectInput(props: PropsSelectInput) {\r\n  const { options = [], label, labelmargintop = 0 } = props;\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel size=\"small\" sx={{ mt: labelmargintop }}>\r\n        {label}\r\n      </InputLabel>\r\n      <Select size=\"small\" {...props}>\r\n        {options.map((item, idx) => (\r\n          <MenuItem key={idx} value={item.value}>\r\n            {item.label}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import { TextFieldProps, TextField as TextInput } from '@mui/material';\n\nconst TextField = (props: TextFieldProps) => {\n  return <TextInput size=\"small\" fullWidth {...props} />;\n};\n\nexport default TextField;\n","import { AxiosError } from 'axios';\nimport { useMutation } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { JobService } from '../jobService';\nimport { Job } from '../model';\nimport { useNavigate } from 'react-router';\n\nconst useMutateJob = () => {\n  const { toast } = useApp();\n  const navigate = useNavigate();\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<Job>,\n    AxiosError<ResponseData<Job>>,\n    Job\n  >(JobService.create, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        navigate('/employer/recruitment/list');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateJob;\n","import { AxiosError } from 'axios';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { ResponseData } from 'src/common/http-request';\r\nimport { useApp } from 'src/modules/app/hooks';\r\nimport { JobService } from '../jobService';\r\nimport { Job } from '../model';\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst useMutateJobById = () => {\r\n  const queryClient = useQueryClient();\r\n  const { toast } = useApp();\r\n  const navigate = useNavigate();\r\n  const { mutate: onSaveDataById, isLoading } = useMutation<\r\n    ResponseData<Job>,\r\n    AxiosError<ResponseData<Job>>,\r\n    [id: string, data: Job]\r\n  >(([id, data]) => JobService.update(id, data), {\r\n    onSuccess: (res) => {\r\n      if (res.status === 200) {\r\n        queryClient.invalidateQueries(['job-getById']);\r\n        toast.success({ massage: res.message });\r\n        navigate('/employer/recruitment/list');\r\n      } else {\r\n        toast.error({ massage: res.message });\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      toast.error({ massage: error.response.data.message });\r\n    }\r\n  });\r\n\r\n  return {\r\n    onSaveDataById,\r\n    isLoading\r\n  };\r\n};\r\n\r\nexport default useMutateJobById;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  CircularProgress,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  InputAdornment,\r\n  Typography\r\n} from '@mui/material';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\nimport dayjs from 'dayjs';\r\nimport SuspenseLoader from 'src/components/SuspenseLoader';\r\nimport {\r\n  PROFESSION,\r\n  WORKING_FORM,\r\n  DEGREE,\r\n  EXPERIENCE,\r\n  POSITION_LEVEL,\r\n  GENDER_OPTION,\r\n  SKILLS\r\n} from 'src/constants/option';\r\nimport { jobAnalysist } from 'src/modules/ai/roles';\r\nimport FormControl from 'src/components/FormControl';\r\nimport SelectInput, { Option } from 'src/components/SelectInput';\r\nimport TextEditor from 'src/components/TextEditor';\r\nimport TextField from 'src/components/TextField';\r\nimport NumericFormatCustom from 'src/components/NumberFormatCustom';\r\nimport Footer from 'src/components/Footer';\r\nimport useMutateJob from '../hooks/useMutateJob';\r\nimport useQueryJobById from '../hooks/useQueryJobById';\r\nimport useMutateJobById from '../hooks/useMutateJobById';\r\nimport DatePicker from 'src/components/DatePicker';\r\nimport _ from 'lodash';\r\nimport { preProcessText, removeHTMLTag } from 'src/utils/inputOutputFormat';\r\nimport { loadKeywords } from 'src/utils/keywords';\r\nimport useProfileHook from 'src/modules/users/hooks/useUserHook';\r\nimport sendChatGPTRequest from 'src/modules/ai/sendChatGPTRequest';\r\nimport Autocomplete from 'src/components/Autocomplete';\r\n\r\nconst defaultValues = {\r\n  sex: '',\r\n  positionLevel: '',\r\n  degree: '',\r\n  employmentType: '',\r\n  experience: '',\r\n  jobDescription: '',\r\n  jobRequirements: '',\r\n  benefits: '',\r\n  profession: '',\r\n  email: '',\r\n  name: '',\r\n  address: '',\r\n  phone: '',\r\n  contactAddress: '',\r\n  requiredSkills: ''\r\n};\r\ntype Props = {\r\n  title?: string;\r\n  selectedId?: string;\r\n};\r\n\r\nconst FormCreate: React.FC<Props> = ({ title, selectedId }) => {\r\n  const { onSaveData } = useMutateJob();\r\n  const { onSaveDataById } = useMutateJobById();\r\n  const { data, isLoading, isFetching } = useQueryJobById(selectedId);\r\n  const [analysisResults, setAnalysisResults] = useState([]);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [documentText, setDocumentText] = useState('');\r\n  const [onSaveNewData, setOnSaveNewData] = useState(null);\r\n  const [requiredSkills, setRequiredSkills] = useState(null);\r\n  const [isEmpty, setIsEmpty] = useState([]);\r\n  const { profile } = useProfileHook();\r\n\r\n  const ref = React.useRef(null);\r\n\r\n  const methods = useForm({ defaultValues });\r\n  const {\r\n    control,\r\n    reset,\r\n    formState: { errors },\r\n    handleSubmit\r\n  } = methods;\r\n\r\n  const handleSave = (newData) => {\r\n    console.log(newData);\r\n    const fieldsToCheck = {\r\n      jobDescription: 'jobDescription',\r\n      jobRequirements: 'jobRequirements',\r\n      benefits: 'benefits'\r\n    };\r\n\r\n    const emptyList = [];\r\n    for (const [field, fieldName] of Object.entries(fieldsToCheck)) {\r\n      if (!removeHTMLTag(newData?.[field])) {\r\n        setIsEmpty((prev) => [...prev, fieldName]);\r\n        emptyList.push(fieldName);\r\n      }\r\n    }\r\n\r\n    if (emptyList.length) {\r\n      // Báo lỗi nếu có bất kỳ trường nào bị thiếu\r\n      return;\r\n    }\r\n\r\n    setOnSaveNewData({\r\n      ...newData,\r\n      requiredSkills: Array.isArray(newData.requiredSkills)\r\n        ? newData.requiredSkills.map((item) => item.value || item).join(', ')\r\n        : newData.requiredSkills,\r\n      sex: newData.sex === 'Tất cả' ? null : newData.sex,\r\n      profession: Array.isArray(newData.profession)\r\n        ? newData.profession.map((item) => item.value || item).join(', ')\r\n        : newData.profession\r\n    });\r\n    handleAnalysis(newData);\r\n  };\r\n\r\n  const handleAnalysis = async (newData) => {\r\n    const jobDescription = preProcessText(\r\n      JSON.stringify(newData.jobDescription)\r\n    );\r\n    const jobRequirements = preProcessText(\r\n      JSON.stringify(newData.jobRequirements)\r\n    );\r\n    const processedText = {\r\n      jobDescription: jobDescription,\r\n      jobRequirements: jobRequirements\r\n    };\r\n    setDocumentText(JSON.stringify(processedText));\r\n    setIsAnalyzing(true);\r\n    const result = await sendChatGPTRequest(\r\n      jobAnalysist,\r\n      [processedText],\r\n      null,\r\n      {\r\n        '58': 5,\r\n        '60': 5\r\n      }\r\n    );\r\n    setAnalysisResults(result);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      reset(data);\r\n    } else if (!selectedId) {\r\n      reset({\r\n        name: profile?.name,\r\n        email: profile?.email,\r\n        phone: profile?.phone,\r\n        contactAddress: profile?.address\r\n      });\r\n    }\r\n  }, [JSON.stringify(data), JSON.stringify(profile)]);\r\n\r\n  useEffect(() => {\r\n    if (analysisResults.length > 0 && analysisResults[0]) {\r\n      const keywords = loadKeywords(analysisResults);\r\n\r\n      const keywordToStore = onSaveNewData.requiredSkills + ', ' + keywords;\r\n\r\n      if (selectedId)\r\n        onSaveDataById([\r\n          selectedId,\r\n          { ...onSaveNewData, keywords: keywordToStore }\r\n        ]);\r\n      else onSaveData({ ...onSaveNewData, keywords: keywordToStore });\r\n    }\r\n    setIsAnalyzing(false);\r\n  }, [analysisResults]);\r\n\r\n  if (isFetching) return <SuspenseLoader />;\r\n\r\n  return (\r\n    <Box id={'form-create'}>\r\n      <FormProvider {...methods}>\r\n        <Container maxWidth=\"xl\">\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"stretch\"\r\n            spacing={3}\r\n            marginTop={0}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Card>\r\n                <CardHeader title={title || 'Tạo Tin Tuyển Dụng'} />\r\n                <Divider />\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" marginBottom={2}>\r\n                    Thông tin cơ bản\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        required\r\n                        id=\"jobTitle\"\r\n                        label=\"Chức danh\"\r\n                        placeholder=\"Vị trí hiển thị đăng tuyển\"\r\n                        name=\"jobTitle\"\r\n                        inputProps={{ maxLength: 300 }}\r\n                        multiline\r\n                        minRows={1}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <FormControl\r\n                        element={\r\n                          <Autocomplete\r\n                            limitTags={7}\r\n                            options={PROFESSION.map((item) => item.value)}\r\n                          />\r\n                        }\r\n                        defaultValue={data?.profession?.split(', ')}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"profession\"\r\n                        label=\"Nghề nghiệp\"\r\n                        name=\"profession\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<SelectInput />}\r\n                        options={WORKING_FORM}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"employmentType\"\r\n                        label=\"Hình thức làm việc\"\r\n                        name=\"employmentType\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        options={DEGREE}\r\n                        element={<SelectInput />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"degree\"\r\n                        label=\"Bằng cấp\"\r\n                        name=\"degree\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        options={EXPERIENCE}\r\n                        element={<SelectInput />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"experience\"\r\n                        label=\"Kinh nghiệm\"\r\n                        name=\"experience\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        options={POSITION_LEVEL}\r\n                        element={<SelectInput />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"positionLevel\"\r\n                        label=\"Cấp bậc\"\r\n                        name=\"positionLevel\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={2}>\r\n                      <FormControl\r\n                        element={\r\n                          <TextField InputProps={{ inputProps: { min: 0 } }} />\r\n                        }\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"minAge\"\r\n                        label=\"Độ tuổi tối thiểu\"\r\n                        name=\"minAge\"\r\n                        type=\"number\"\r\n                        pattern=\"integer\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={2}>\r\n                      <FormControl\r\n                        element={\r\n                          <TextField InputProps={{ inputProps: { min: 0 } }} />\r\n                        }\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"maxAge\"\r\n                        label=\"Độ tuổi tối đa\"\r\n                        type=\"number\"\r\n                        name=\"maxAge\"\r\n                        pattern=\"integer\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        options={GENDER_OPTION}\r\n                        element={<SelectInput />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"sex\"\r\n                        label=\"Yêu cầu giới tính\"\r\n                        name=\"sex\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"numberOfVacancies\"\r\n                        label=\"Số lượng tuyển\"\r\n                        name=\"numberOfVacancies\"\r\n                        required\r\n                        type=\"number\"\r\n                        pattern=\"integer\"\r\n                        InputProps={{ inputProps: { min: 1 } }}\r\n                      />{' '}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"trialPeriod\"\r\n                        label=\"Thời giai thử việc\"\r\n                        name=\"trialPeriod\"\r\n                        required\r\n                        type=\"number\"\r\n                        pattern=\"integer\"\r\n                        InputProps={{\r\n                          inputProps: { min: 1 },\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              tháng\r\n                            </InputAdornment>\r\n                          )\r\n                        }}\r\n                      />{' '}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<DatePicker minDate={dayjs()} />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"applicationDeadline\"\r\n                        label=\"Hạn nộp hồ sơ\"\r\n                        name=\"applicationDeadline\"\r\n                        required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"minSalary\"\r\n                        label=\"Mức lương tối thiểu\"\r\n                        name=\"minSalary\"\r\n                        type=\"number\"\r\n                        pattern=\"integer\"\r\n                        required\r\n                        InputProps={{\r\n                          inputProps: { min: 1 },\r\n                          inputComponent: NumericFormatCustom as any,\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              triệu VNĐ\r\n                            </InputAdornment>\r\n                          )\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"maxSalary\"\r\n                        label=\"Mức lương tối đa\"\r\n                        name=\"maxSalary\"\r\n                        type=\"number\"\r\n                        pattern=\"integer\"\r\n                        required\r\n                        InputProps={{\r\n                          inputProps: { min: 1 },\r\n                          inputComponent: NumericFormatCustom as any,\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              triệu VNĐ\r\n                            </InputAdornment>\r\n                          )\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"workAddress\"\r\n                        label=\"Địa chỉ làm việc\"\r\n                        name=\"workAddress\"\r\n                        required\r\n                        multiline\r\n                        minRows={2}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Box display=\"flex\" marginBottom={1}>\r\n                        {isEmpty.find((item) => item === 'requiredSkills') && (\r\n                          <Typography\r\n                            color=\"error\"\r\n                            fontWeight={700}\r\n                            fontStyle=\"italic\"\r\n                            textAlign=\"center\"\r\n                            flex={1}\r\n                          >\r\n                            * Vui lòng nhập yêu cầu kĩ năng\r\n                          </Typography>\r\n                        )}\r\n                      </Box>\r\n                      <FormControl\r\n                        element={\r\n                          <Autocomplete\r\n                            freeSolo={true}\r\n                            limitTags={7}\r\n                            options={SKILLS.map((item) => item.value)}\r\n                          />\r\n                        }\r\n                        defaultValue={data?.requiredSkills?.split(', ')}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"requiredSkills\"\r\n                        label=\"Kĩ năng bắt buộc\"\r\n                        name=\"requiredSkills\"\r\n                        required\r\n                      />\r\n                      <Typography\r\n                        fontSize={12}\r\n                        color=\"secondary\"\r\n                        fontStyle={'italic'}\r\n                        sx={{ display: 'flex', justifyContent: 'center' }}\r\n                      >\r\n                        Hãy liệt kê tối đa 10 từ khóa. Ví dụ: Python, ReactJS,\r\n                        HTML, Go... Sẽ giúp hệ thống tìm kiếm được hồ sơ phù hợp\r\n                        với doanh nghiệp bạn nhất\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Box display=\"flex\" marginBottom={1} marginTop={4}>\r\n                    <Typography variant=\"h6\">Mô tả công việc</Typography>\r\n                    {isEmpty.find((item) => item === 'jobDescription') && (\r\n                      <Typography\r\n                        color=\"error\"\r\n                        fontWeight={700}\r\n                        fontStyle=\"italic\"\r\n                        textAlign=\"center\"\r\n                        flex={1}\r\n                      >\r\n                        * Vui lòng nhập mô tả công việc\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                  <FormControl\r\n                    element={<TextEditor />}\r\n                    control={control}\r\n                    errors={errors}\r\n                    id=\"jobDescription\"\r\n                    name=\"jobDescription\"\r\n                    required\r\n                  />\r\n\r\n                  <Box display=\"flex\" marginBottom={1} marginTop={4}>\r\n                    <Typography variant=\"h6\">Yêu cầu công việc</Typography>\r\n                    {isEmpty.find((item) => item === 'jobRequirements') && (\r\n                      <Typography\r\n                        color=\"error\"\r\n                        fontWeight={700}\r\n                        fontStyle=\"italic\"\r\n                        textAlign=\"center\"\r\n                        flex={1}\r\n                      >\r\n                        * Vui lòng nhập yêu cầu công việc\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                  <FormControl\r\n                    element={<TextEditor />}\r\n                    control={control}\r\n                    errors={errors}\r\n                    id=\"jobRequirements\"\r\n                    name=\"jobRequirements\"\r\n                    required\r\n                  />\r\n                  <Box display=\"flex\" marginBottom={1} marginTop={4}>\r\n                    <Typography variant=\"h6\">Quyền lợi</Typography>\r\n                    {isEmpty.find((item) => item === 'benefits') && (\r\n                      <Typography\r\n                        color=\"error\"\r\n                        fontWeight={700}\r\n                        fontStyle=\"italic\"\r\n                        textAlign=\"center\"\r\n                        flex={1}\r\n                      >\r\n                        * Vui lòng nhập quyền lợi công việc\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                  <FormControl\r\n                    element={<TextEditor />}\r\n                    control={control}\r\n                    errors={errors}\r\n                    id=\"benefits\"\r\n                    name=\"benefits\"\r\n                    required\r\n                  />\r\n                  <Typography variant=\"h6\" marginBottom={1} marginTop={4}>\r\n                    Thông tin người liên hệ\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"name\"\r\n                        label=\"Họ và tên\"\r\n                        name=\"name\"\r\n                        required\r\n                      />\r\n                    </Grid>{' '}\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        id=\"email\"\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        required\r\n                        pattern=\"email\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        required\r\n                        id=\"phone\"\r\n                        label=\"Điện thoại\"\r\n                        name=\"phone\"\r\n                        pattern=\"phone\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={8}>\r\n                      <FormControl\r\n                        element={<TextField />}\r\n                        control={control}\r\n                        errors={errors}\r\n                        required\r\n                        id=\"contactAddress\"\r\n                        label=\"Địa chỉ liên hệ\"\r\n                        name=\"contactAddress\"\r\n                        multiline\r\n                        minRows={1}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Grid\r\n                    container\r\n                    justifyContent=\"end\"\r\n                    marginBottom={1}\r\n                    marginRight={1}\r\n                  >\r\n                    <Button\r\n                      onClick={handleSubmit(handleSave)}\r\n                      color=\"success\"\r\n                      variant=\"contained\"\r\n                      sx={{ minWidth: 100 }}\r\n                    >\r\n                      {selectedId ? 'Lưu' : 'Tạo'}\r\n                    </Button>\r\n                  </Grid>\r\n                </CardActions>\r\n                {isAnalyzing && <CircularProgress sx={{ mx: '50%' }} />}\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </FormProvider>\r\n      <Footer />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FormCreate;\r\n","import { AxiosError } from 'axios';\r\nimport { useQuery } from 'react-query';\r\nimport { ResponseData } from 'src/common/http-request';\r\nimport { Job } from '../model';\r\nimport { JobViewService } from '../jobService';\r\nimport { useApp } from 'src/modules/app/hooks';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function useQueryJobById(id) {\r\n  if (!id) return {};\r\n  const { data, isLoading, isFetching } = useQuery<\r\n    ResponseData<Job>,\r\n    AxiosError<ResponseData<Job>>\r\n  >(['job-getById', id], async () => JobViewService.getById(id), {\r\n    retry: 1,\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  const [job, setJob] = useState<Job>();\r\n\r\n  useEffect(() => {\r\n    if (data?.data) {\r\n      const saveJob = {\r\n        ...data?.data,\r\n        sex: data?.data?.sex === null ? 'Tất cả' : data?.data?.sex\r\n      };\r\n      setJob(saveJob);\r\n    }\r\n  }, [JSON.stringify(data)]);\r\n\r\n  return {\r\n    data: job,\r\n    isLoading,\r\n    isFetching\r\n  };\r\n}\r\n\r\nexport function useQueryJobByIdList(idList: number[]) {\r\n  const { isEmployer } = useApp();\r\n  const [dataList, setDataList] = useState<ResponseData<Job>[]>([]);\r\n  const { data, isLoading } = useQuery<\r\n    ResponseData<Job>[],\r\n    AxiosError<ResponseData<Job>[]>\r\n  >(\r\n    ['jobs-getByIdList', JSON.stringify(idList)],\r\n    async () => {\r\n      if (!idList.length) return [];\r\n      Promise.allSettled(idList.map((id) => JobViewService.getById(id)))\r\n        .then((results) => {\r\n          // Lọc ra các kết quả thành công và chỉ lưu dữ liệu của các promise đã được giải quyết vào dataList\r\n          const fulfilledResults = results.filter(\r\n            (result): result is PromiseFulfilledResult<any> =>\r\n              result.status === 'fulfilled'\r\n          );\r\n          const dataList = fulfilledResults.map((result) => result.value);\r\n\r\n          // Cập nhật dataList\r\n          setDataList(dataList);\r\n        })\r\n        .catch((e) => console.log(e));\r\n    },\r\n    {\r\n      retry: 1,\r\n      refetchOnWindowFocus: false,\r\n      keepPreviousData: true,\r\n      enabled: isEmployer\r\n    }\r\n  );\r\n  return {\r\n    jobs:\r\n      dataList?.map((item) => ({\r\n        ...item?.data,\r\n        id: item?.data?.postId,\r\n        sex: item?.data?.sex === null ? 'Tất cả' : item?.data?.sex\r\n      })) || [],\r\n    isLoading\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport { AttachedDocument, OnlineProfile } from 'src/modules/jobProfile/model';\r\n\r\n// export function tfidfReview(keywordArray: string[], documentText: string) {\r\n//   const termFreq = keywordArray.reduce((result, keywordArray) => {\r\n//     const regex = new RegExp(`\\\\b${keywordArray}\\\\b`, 'gi');\r\n//     const matches = documentText.match(regex) || [];\r\n//     result[keywordArray] = matches.length;\r\n//     return result;\r\n//   }, {});\r\n\r\n//   const totalWords = documentText.split(/\\s+/).length;\r\n\r\n//   const tfidf = {};\r\n\r\n//   Object.entries(termFreq).forEach(([word, termCount]) => {\r\n//     if (typeof termCount === 'number') {\r\n//       // Check if termCount is a number\r\n//       const tf = termCount / totalWords;\r\n//       const idf = Math.log(keywordArray.length / (termCount || 1));\r\n//       tfidf[word] = tf * idf;\r\n//     } else {\r\n//       // Handle the case where termCount is not a number\r\n//       console.error(`Term count for \"${word}\" is not a number.`);\r\n//     }\r\n//   });\r\n\r\n//   return _.entries(tfidf)\r\n//     .sort((a, b) => b[1] - a[1])\r\n//     .map((entry) => entry[0]);\r\n// }\r\n\r\nexport const loadKeywords = (analysisResults: any[], document?: any) => {\r\n  if (analysisResults.length <= 0 && !Boolean(analysisResults[0])) return;\r\n\r\n  const result = analysisResults[0];\r\n\r\n  const startIndex = result.indexOf('[');\r\n  if (startIndex === -1) {\r\n    console.log(\"Không tìm thấy ký tự '['\");\r\n    return;\r\n  }\r\n\r\n  // Tìm vị trí kết thúc của ']'\r\n  const endIndex = result.lastIndexOf(']');\r\n  if (endIndex === -1) {\r\n    console.log(\"Không tìm thấy ký tự ']'\");\r\n    return;\r\n  }\r\n\r\n  // Trích xuất chuỗi con từ vị trí startIndex đến endIndex\r\n  const extractedString = result\r\n    .substring(startIndex + 1, endIndex)\r\n    .replace(/[\"]/g, '');\r\n  console.log('extractedString: ', extractedString);\r\n\r\n  // B1: Thay thế dấu \"'\" thành dấu '\"' để đảm bảo JSON hợp lệ\r\n  const jsonString = extractedString.replace(/[_!@#$%^&*;|<>'\"\\n\\t\\r]/g, '');\r\n  console.log('jsonString: ', jsonString);\r\n\r\n  // B2: Parse string sang array\r\n  const keywordArray = jsonString.split(',');\r\n  console.log('keywordArray', keywordArray);\r\n\r\n  const keywordList = keywordArray.slice(0, 20);\r\n  console.log('keywordList?.join(', ')', keywordList?.join(', '));\r\n  return keywordList?.join(', ');\r\n};\r\n\r\nfunction removeDateAttributes(data) {\r\n  return data.map((item) => {\r\n    const { startDate, endDate, id, isDoing, ...rest } = item;\r\n    return rest;\r\n  });\r\n}\r\n\r\nconst removeAttributes = (\r\n  profile: Partial<OnlineProfile | AttachedDocument>,\r\n  profileType: string,\r\n  cvText?: string\r\n) => {\r\n  // if profile type is OnlineProfile then return\r\n  if (profileType === 'online') {\r\n    const profileData = profile as Partial<OnlineProfile>;\r\n    return {\r\n      jobTitle: profileData?.jobTitle,\r\n      profession: profileData?.profession,\r\n      work_experiences: profileData?.work_experiences.map((experience) => {\r\n        return {\r\n          jobTitle: experience.jobTitle,\r\n          jobDescription: experience.jobDescription\r\n        };\r\n      }),\r\n      education_informations: profileData?.education_informations.map(\r\n        (education) => education.specialization\r\n      ),\r\n      another_degrees: profileData?.another_degrees?.map(\r\n        (degree) => degree.degreeName\r\n      )\r\n    };\r\n  } else {\r\n    return {\r\n      jobTitle: profile?.jobTitle,\r\n      profession: profile?.profession,\r\n      cvContent: cvText\r\n    };\r\n  }\r\n};\r\n\r\ntype profileType = 'online' | 'document';\r\nexport function preProcessData(\r\n  object,\r\n  profileType: profileType,\r\n  cvText?: string\r\n) {\r\n  const dataToAnalyze = removeAttributes(object, profileType, cvText);\r\n  return dataToAnalyze;\r\n}\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !ownerState.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n  const {\n      disableSpacing = false,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActions;"],"names":["DatePicker","props","_jsx","LocalizationProvider","dateAdapter","AdapterDayjs","children","DatePickerMui","format","value","dayjs","slotProps","textField","size","fullWidth","FooterWrapper","styled","Container","_ref","theme","concat","spacing","className","Box","pb","display","xs","md","alignItems","textAlign","justifyContent","React","ref","onChange","other","NumericFormat","getInputRef","onValueChange","values","target","name","thousandSeparator","valueIsNumericString","SelectInput","options","label","labelmargintop","_jsxs","FormControl","InputLabel","sx","mt","Select","map","item","idx","MenuItem","TextInput","useMutateJob","toast","useApp","navigate","useNavigate","mutate","onSaveData","isLoading","useMutation","JobService","create","onSuccess","res","status","success","massage","message","error","onError","response","data","useMutateJobById","queryClient","useQueryClient","onSaveDataById","id","update","invalidateQueries","defaultValues","sex","positionLevel","degree","employmentType","experience","jobDescription","jobRequirements","benefits","profession","email","address","phone","contactAddress","requiredSkills","_data$profession","_data$requiredSkills","title","selectedId","isFetching","useQueryJobById","analysisResults","setAnalysisResults","useState","isAnalyzing","setIsAnalyzing","documentText","setDocumentText","onSaveNewData","setOnSaveNewData","setRequiredSkills","isEmpty","setIsEmpty","profile","useProfileHook","methods","useForm","control","reset","formState","errors","handleSubmit","handleAnalysis","async","processedText","preProcessText","JSON","stringify","newData","result","sendChatGPTRequest","jobAnalysist","useEffect","length","keywords","loadKeywords","keywordToStore","SuspenseLoader","FormProvider","maxWidth","Grid","container","direction","marginTop","Card","CardHeader","Divider","CardContent","Typography","variant","marginBottom","element","TextField","required","placeholder","inputProps","maxLength","multiline","minRows","Autocomplete","limitTags","PROFESSION","defaultValue","split","WORKING_FORM","DEGREE","EXPERIENCE","POSITION_LEVEL","InputProps","min","type","pattern","GENDER_OPTION","endAdornment","InputAdornment","position","minDate","inputComponent","NumericFormatCustom","find","color","fontWeight","fontStyle","flex","freeSolo","SKILLS","fontSize","TextEditor","CardActions","marginRight","Button","onClick","console","log","fieldsToCheck","emptyList","field","fieldName","Object","entries","removeHTMLTag","prev","push","Array","isArray","join","minWidth","CircularProgress","mx","Footer","useQuery","JobViewService","getById","retry","refetchOnWindowFocus","job","setJob","_data$data","_data$data2","saveJob","useQueryJobByIdList","idList","isEmployer","dataList","setDataList","Promise","allSettled","then","results","filter","catch","e","keepPreviousData","enabled","jobs","_item$data","_item$data2","_item$data3","postId","document","Boolean","startIndex","indexOf","endIndex","lastIndexOf","extractedString","substring","replace","jsonString","keywordArray","keywordList","slice","removeAttributes","profileType","cvText","_profileData$another_","profileData","jobTitle","work_experiences","education_informations","education","specialization","another_degrees","degreeName","cvContent","preProcessData","object","getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionsRoot","overridesResolver","styles","ownerState","root","disableSpacing","_extends","padding","marginLeft","inProps","useThemeProps","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","clsx"],"sourceRoot":""}