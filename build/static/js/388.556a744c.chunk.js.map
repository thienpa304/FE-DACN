{"version":3,"file":"static/js/388.556a744c.chunk.js","mappings":"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","sources":["GPT/roles.ts","GPT/sendChatGPTRequest.ts","components/DatePicker/index.tsx","components/Footer/index.tsx","components/NumberFormatCustom/index.tsx","components/TextField/index.tsx","../node_modules/@mui/material/CardActions/cardActionsClasses.js","../node_modules/@mui/material/CardActions/CardActions.js","modules/jobs/hooks/useMutateJob.ts","modules/jobs/hooks/useMutateJobById.ts","modules/jobs/components/FormCreate.tsx","modules/jobs/hooks/useJob.ts","modules/jobs/hooks/useQueryJobByIdByOwner.ts","utils/keywords.ts"],"sourcesContent":["export const cvAnalysist = `Bây giờ, bạn là một chuyên gia lâu năm trong lĩnh vực Nhân sự. Bạn có khả năng phân tích từ khóa quan trọng trong hồ sơ xin việc. Tôi cần xác định những yếu tố quan trọng trong hồ sơ xin việc sau. Hãy liệt kê 10 từ khóa quan trọng liên quan đến công việc của trong nội dung hồ sơ tôi cung cấp. Các từ khóa này bao gồm cả kỹ năng cứng và mềm, cũng như kinh nghiệm và trình độ chuyên môn. Sắp xếp chúng theo mức độ quan trọng dựa trên tần số xuất hiện trong phần mô tả công việc và yêu cầu công việc. Hãy chú ý những kỹ năng chuyên môn thường theo sau các cụm từ như 'có hiểu biết', 'thành thạo', 'có kinh nghiệm', 'có kiến thức về' để xác định từ khóa kĩ năng cứng (kĩ năng chuyên môn). Đồng thời, cũng phải chú ý tới tên các chứng chỉ, chuyên ngành để xác định từ khóa về trình độ chuyên môn. Ngoài ra, tìm các mô tả về tính cách, cách hành xử, thái độ và sức khỏe của con người để xác định từ khóa về kỹ năng mềm. Kết quả trả về dưới dạng mảng các chuỗi từ khóa (nếu không tìm được từ khóa nào thì trả về danh sách rỗng []). Lưu ý rằng: Mỗi từ khóa tìm được không được quá 20 kí tự.\n***Quan trọng: Câu trả lời của bạn (ChatGPT) chứa 10 từ khóa và câu trả lời là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ về câu trả lời minh họa là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]\nNội dung hồ sơ xin việc cung cấp như sau:\n`;\n\nexport const jobAnalysist = `Bây giờ, bạn là một chuyên gia lâu năm trong lĩnh vực Nhân sự. Bạn có khả năng phân tích từ khóa quan trọng trong tin tuyển dụng. Tôi cần xác định những yếu tố mà nhà tuyển dụng quan tâm trong tin tuyển dụng sau. Hãy liệt kê 10 từ khóa quan trọng liên quan đến công việc của trong nội dung tin tuyển dụng tôi cung cấp. Các từ khóa này bao gồm cả kỹ năng cứng và mềm, cũng như kinh nghiệm chuyên môn. Sắp xếp chúng theo mức độ quan trọng dựa trên tần số xuất hiện trong phần mô tả công việc và yêu cầu công việc. Hãy chú ý những kỹ năng chuyên môn thường theo sau các cụm từ như 'có hiểu biết', 'thành thạo', 'có kinh nghiệm', 'có kiến thức về' để tìm ra từ khóa kĩ năng cứng (kĩ năng chuyên môn). Ngoài ra, tìm các mô tả về tính cách, cách hành xử, thái độ và sức khỏe của con người để tìm ra từ khóa về kỹ năng mềm. Kết quả trả về dưới dạng mảng các chuỗi từ khóa, viết hoa chữ cái đầu tiên của mỗi cụm từ khóa (nếu không tìm được từ khóa nào thì trả về danh sách rỗng []). Lưu ý rằng: Mỗi từ khóa tìm được không được quá 20 kí tự.\n***Quan trọng: Câu trả lời của bạn (ChatGPT) là có duy nhất 1 danh sách các từ khóa sau khi dịch sang tiếng Việt và câu trả lời là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ về câu trả lời minh họa là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]\nNội dung tin tuyển dụng cung cấp như sau:\n`;\n\nexport const RoundOneCheck = `Bây giờ, bạn là một chuyên gia phân tích hồ sơ xin việc.\nHãy đọc hồ sơ xin việc và yêu cầu tuyển dụng sau đó so sánh và đánh giá xem thông tin emplyee_Profile có phù hợp với thông tin tuyển dụng hay không. Hãy đánh giá xem hồ sơ xin việc theo các tiêu chí sau.\n- 1. Ngành nghề trong hồ sơ xin việc phải có ít nhất 1 ngành nghề liên quan tới ngành nghề trong danh sách các ngành nghề trong yêu cầu tuyển dụng thì mới đạt yêu cầu. (Ví dụ Kỹ sư phần mềm, Công nghệ thông tin, Khoa học Máy tính, Web, Frontend, Backend... là mức độ liên quan cao; Quảng cáo, sale, bán sỉ, bán lẻ, Marketing, Bán hàng, Kinh doanh... là mức độ liên quan cao).\n- 2. Trình độ trong hồ sơ xin việc phải cao hơn hoặc bằng với trình độ trong yêu cầu tuyển dụng thì mới đạt yêu cầu.\n- 3. kinh nghiệm trong hồ sơ xin việc phải cao hơn kinh nghiệm trong yêu cầu tuyển dụng thì mới đạt yêu cầu.\n* result chỉ có thể là 1 trong 2 con số -10 hoặc 30.\n* Nếu đạt hết TẤT CẢ 3 tiêu chí trên thì result là con số 30. Ví dụ result là: 30\n* Nếu có bất kì 1 tiêu chí nào không đạt yêu cầu thì dừng phân tích ngay, đồng thời trả ra result là con số -10. Ví dụ result là: -10\n***Lưu ý quan trọng: câu trả lời của bạn (ChatGPT) không quá 25 kí tự, câu trả lời là ở dạng Object bao gồm 2 thuộc tính là id (tương ứng với application_id) và result (là con số result sau khi phân tích, là 1 trong 2 con số 30 hoặc -10). Ngoài ra không kèm theo lời giải thích nào cả. Ví dụ nếu application.id = 1, hồ sơ xin việc đạt hết tất cả tiêu chí thì trả về:\n{\n    \"id\": 1,\n    \"result\": 30\n}`;\n\nexport const checkContent = `Bây giờ bạn là 1 chuyên gia kiểm duyệt văn bản. Hãy kiểm tra xem trong văn bản có chứa những từ ngữ nhạy cảm, thô tục, vi phạm pháp luật hay không. Kết quả lưu trong thuộc tính result. Nếu có vi phạm thì result = true, nếu không vi phạm thì result = false. \n***Lưu ý quan trọng: câu trả lời của bạn (ChatGPT) không quá 25 kí tự, câu trả lời là ở dạng Object như ví dụ bên dưới bao gồm 2 thuộc tính là id (tương ứng với postId) và result (là true nếu vi phạm, false nếu không vi phạm). Ví dụ nếu văn bản có chứa từ ngữ nhạy cảm, thô tục, vi phạm pháp luật thì trả về:\n{\n    \"id\": 1,\n    \"result\": true\n}\n`;\n\nexport const extractSkill = `Trích ra danh sách các kĩ năng (bao gồm kĩ năng cứng và kĩ năng mềm, kinh nghiệm chuyên môn) trong hồ sơ xin việc sau. \n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ câu trả lời là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]. Hãy dịch các kĩ năng sang tiếng Việt, và viết lại từng kĩ năng đã dịch ở dạng từ khóa, viết hoa chữ cái đầu.`;\n\nexport const translate = `Hãy dịch các từ khóa sau sang tiếng Việt, và viết hoa chữ cái đầu. \n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ câu trả lời là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]. `;\n\nexport const extractCommonInfo = `Trích ra thông tin về ngành nghề (profession), trình độ học vấn (degree), số năm kinh nghiệm làm việc trong ngành (experience) trong hồ sơ xin việc. Kết quả các thông tin có định dạng sau:\n- profession: tên ngành nghề,\n- degree: (Tiến sĩ, Thạc sĩ, cử nhân, cao đẳng, trung cấp, phổ thông, ...),\n- experience: (số) năm. (nếu không có kinh nghiệp làm việc thì trả về 0 năm)\n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Object, không chứa bất kì lời nào khác. Ví dụ câu trả lời là:\n{ \n    \"profession\": \"Công nghệ thông tin\",\n    \"degree\": \"Thạc sĩ\",\n    \"experience\": \"3 năm\", \n}\n`;\n","import alertDialog from 'src/utils/alertDialog';\n\nconst FREE_GPT_API_KEY =\n  'Bearer sk-idLv1WJ8H0Xec0FjTujkzGClFhuOLvUcVw7FJBA0ERBhN8Y2'; // free\nconst GPT_API_KEY =\n  'Bearer sk-ASMcBs6iBFaFfCxCizltjPPGTLCkB9tyESkmxxsQb9Tie4Fx';\n\nconst MODEL_35_TURBO = 'gpt-3.5-turbo';\nconst MODEL_4_O = 'gpt-4o-ca';\n\nconst API_KEY = GPT_API_KEY || FREE_GPT_API_KEY;\n\n// Common function to handle API requests\nconst sendRequest = async (url, headers, body) => {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(body)\n    });\n\n    const data = await response.json();\n    if (data?.error) {\n      throw new Error(data.error.message);\n    }\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\n\n// Common function to process messages\nconst processMessages = async (content, sendMessage) => {\n  const responses = [];\n  let hasShownAlert = false;\n\n  const results = await Promise.allSettled(\n    content.map((inputText) => sendMessage(JSON.stringify(inputText)))\n  );\n\n  for (const result of results) {\n    if (result.status === 'fulfilled') {\n      responses.push(result.value);\n    } else if (result.status === 'rejected') {\n      if (!hasShownAlert) {\n        console.error('Error in sendMessage:', result.reason);\n        // alertDialog({\n        //   message: result.reason.message,\n        //   hideCancelButton: true\n        // });\n        hasShownAlert = true;\n      }\n      break;\n    }\n  }\n\n  return responses;\n};\n\nconst sendChatGPTRequest = async (\n  request,\n  content,\n  max_tokens = null,\n  logit_bias = null\n) => {\n  if (!content || content.length === 0) return [];\n\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: API_KEY\n  };\n\n  const sendMessage = async (inputText) => {\n    if (!inputText.trim()) return;\n\n    const body = {\n      model: MODEL_4_O,\n      messages: [\n        { role: 'system', content: request },\n        { role: 'user', content: inputText }\n      ],\n      temperature: 0,\n      presence_penalty: 0.7,\n      frequency_penalty: 0.7,\n      max_tokens: max_tokens,\n      logit_bias: logit_bias\n    };\n\n    const data = await sendRequest(\n      'https://api.chatanywhere.cn/v1/chat/completions',\n      headers,\n      body\n    );\n    return data?.choices?.[0]?.message?.content;\n  };\n\n  return await processMessages(content, sendMessage);\n};\n\nexport const getEmbedding = async (content) => {\n  if (!content || content.length === 0) return [];\n\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: API_KEY\n  };\n\n  const sendMessage = async (inputText) => {\n    if (!inputText) return;\n\n    const body = {\n      model: 'text-embedding-3-large',\n      input: inputText\n    };\n\n    const data = await sendRequest(\n      'https://api.chatanywhere.cn/v1/embeddings',\n      headers,\n      body\n    );\n    return data?.data?.map((item) => item.embedding);\n  };\n\n  const processEmbeddings = async (content) => {\n    const responses = [];\n    let hasShownAlert = false;\n\n    const results = await Promise.allSettled(\n      content.map(async (inputText) => {\n        let i = 0;\n        const employer_Requirement = (\n          await sendMessage(inputText?.employer_Requirement)\n        )?.map((res) => ({\n          word: inputText?.employer_Requirement[i++],\n          result: res\n        }));\n\n        i = 0;\n        const employee_Profile = (\n          await sendMessage(inputText?.employee_Profile)\n        )?.map((res) => ({\n          word: inputText?.employee_Profile[i++],\n          result: res\n        }));\n\n        return {\n          id: inputText?.id,\n          employer_Requirement: employer_Requirement,\n          employee_Profile: employee_Profile\n        };\n      })\n    );\n\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        responses.push(result.value);\n      } else if (result.status === 'rejected') {\n        if (!hasShownAlert) {\n          console.error('Error in sendMessage:', result.reason);\n          // alertDialog({\n          //   message: result.reason.message,\n          //   hideCancelButton: true\n          // });\n          hasShownAlert = true;\n        }\n        break;\n      }\n    }\n\n    return responses;\n  };\n\n  return await processEmbeddings(content);\n};\n\nexport default sendChatGPTRequest;\n","import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker as DatePickerMui } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport dayjs from 'dayjs';\n\nexport default function DatePicker(props) {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DatePickerMui\n        format=\"DD/MM/YYYY\"\n        {...props}\n        value={props.value ? dayjs(props.value) : null}\n        slotProps={{ textField: { size: 'small', fullWidth: true } }}\n      />\n    </LocalizationProvider>\n  );\n}\n","import { Box, Container, Link, Typography, styled } from '@mui/material';\n\nconst FooterWrapper = styled(Container)(\n  ({ theme }) => `\n        margin-top: ${theme.spacing(4)};\n`\n);\n\nfunction Footer() {\n  return (\n    <FooterWrapper className=\"footer-wrapper\">\n      <Box\n        pb={2}\n        display={{ xs: 'block', md: 'flex' }}\n        alignItems=\"center\"\n        textAlign={{ xs: 'center', md: 'left' }}\n        justifyContent=\"space-between\"\n      ></Box>\n    </FooterWrapper>\n  );\n}\n\nexport default Footer;\n","import * as React from 'react';\nimport { NumericFormat, NumericFormatProps } from 'react-number-format';\n\ninterface CustomProps {\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\nconst NumericFormatCustom = React.forwardRef<NumericFormatProps, CustomProps>(\n  function NumericFormatCustom(props, ref) {\n    const { onChange, ...other } = props;\n\n    return (\n      <NumericFormat\n        {...other}\n        getInputRef={ref}\n        onValueChange={(values) => {\n          onChange({\n            target: {\n              name: props.name,\n              value: values.value\n            }\n          });\n        }}\n        thousandSeparator\n        valueIsNumericString\n      />\n    );\n  }\n);\n\nexport default NumericFormatCustom;\n","import { TextFieldProps, TextField as TextInput } from '@mui/material';\n\nconst TextField = (props: TextFieldProps) => {\n  return <TextInput size=\"small\" fullWidth {...props} />;\n};\n\nexport default TextField;\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !ownerState.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n  const {\n      disableSpacing = false,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActions;","import { AxiosError } from 'axios';\nimport { useMutation } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { JobService } from '../jobService';\nimport { Job } from '../model';\nimport { useNavigate } from 'react-router';\n\nconst useMutateJob = () => {\n  const { toast } = useApp();\n  const navigate = useNavigate();\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<Job>,\n    AxiosError<ResponseData<Job>>,\n    Job\n  >(JobService.create, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        navigate('/employer/recruitment/list');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateJob;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { JobService } from '../jobService';\nimport { Job } from '../model';\nimport { useNavigate } from 'react-router';\n\nconst useMutateJobById = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const navigate = useNavigate();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<Job>,\n    AxiosError<ResponseData<Job>>,\n    [id: string, data: Job]\n  >(([id, data]) => JobService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries(['job-getById']);\n        toast.success({ massage: res.message });\n        navigate('/employer/recruitment/list');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateJobById;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Backdrop,\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  Container,\n  Divider,\n  Grid,\n  InputAdornment,\n  Typography\n} from '@mui/material';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport SuspenseLoader from 'src/components/SuspenseLoader';\nimport {\n  PROFESSION,\n  WORKING_FORM,\n  DEGREE,\n  EXPERIENCE,\n  POSITION_LEVEL,\n  GENDER_OPTION,\n  SKILLS,\n  WORK_AT\n} from 'src/constants/option';\nimport { jobAnalysist, translate } from 'src/GPT/roles';\nimport FormControl from 'src/components/FormControl';\nimport SelectInput, { Option } from 'src/components/SelectInput';\nimport TextEditor from 'src/components/TextEditor';\nimport TextField from 'src/components/TextField';\nimport NumericFormatCustom from 'src/components/NumberFormatCustom';\nimport Footer from 'src/components/Footer';\nimport useMutateJob from '../hooks/useMutateJob';\nimport useMutateJobById from '../hooks/useMutateJobById';\nimport DatePicker from 'src/components/DatePicker';\nimport _ from 'lodash';\nimport {\n  preProcessText,\n  removeHTMLTag,\n  toInputDateString,\n  toOutputDateString\n} from 'src/utils/formatData';\nimport { loadKeywords } from 'src/utils/keywords';\nimport useProfileHook from 'src/modules/users/hooks/useUserHook';\nimport sendChatGPTRequest from 'src/GPT/sendChatGPTRequest';\nimport Autocomplete from 'src/components/Autocomplete';\nimport { Job } from '../model';\nimport useQueryJobByIdByOwner from '../hooks/useQueryJobByIdByOwner';\n\nconst defaultValues = {\n  sex: '',\n  positionLevel: '',\n  degree: '',\n  employmentType: '',\n  experience: '',\n  jobDescription: '',\n  jobRequirements: '',\n  benefits: '',\n  profession: '',\n  email: '',\n  name: '',\n  address: '',\n  phone: '',\n  contactAddress: '',\n  requiredSkills: '',\n  applicationDeadline: ''\n};\ntype Props = {\n  title?: string;\n  selectedId?: string;\n};\n\nconst FormCreate: React.FC<Props> = ({ title, selectedId }) => {\n  const { onSaveData } = useMutateJob();\n  const { onSaveDataById } = useMutateJobById();\n  const { data, isLoading, isFetching } = useQueryJobByIdByOwner(selectedId);\n  const [analysisResults, setAnalysisResults] = useState([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [documentText, setDocumentText] = useState('');\n  const [onSaveNewData, setOnSaveNewData] = useState(null);\n  const [requiredSkills, setRequiredSkills] = useState(null);\n  const [isEmpty, setIsEmpty] = useState([]);\n  const { profile } = useProfileHook();\n\n  const ref = React.useRef(null);\n\n  const methods = useForm({ defaultValues });\n  const {\n    control,\n    reset,\n    formState: { errors },\n    handleSubmit\n  } = methods;\n\n  const handleSave = (newData) => {\n    const fieldsToCheck = {\n      jobDescription: 'jobDescription',\n      jobRequirements: 'jobRequirements',\n      benefits: 'benefits'\n    };\n\n    const emptyList = [];\n    for (const [field, fieldName] of Object.entries(fieldsToCheck)) {\n      if (!removeHTMLTag(newData?.[field])) {\n        setIsEmpty((prev) => [...prev, fieldName]);\n        emptyList.push(fieldName);\n      }\n    }\n\n    if (emptyList.length) {\n      // Báo lỗi nếu có bất kỳ trường nào bị thiếu\n      return;\n    }\n\n    setOnSaveNewData({\n      ...newData,\n      requiredSkills: Array.isArray(newData.requiredSkills)\n        ? newData.requiredSkills.map((item) => item.value || item).join(',')\n        : newData.requiredSkills,\n      sex: newData.sex === 'Tất cả' ? null : newData.sex,\n      profession: Array.isArray(newData.profession)\n        ? newData.profession.map((item) => item.value || item).join(',')\n        : newData.profession,\n      // applicationDeadline: toOutputDateString(\n      //   newData?.applicationDeadline,\n      //   null,\n      //   'DD-MM-YYYY'\n      // )\n      applicationDeadline: newData?.applicationDeadline\n    });\n    handleAnalysis(newData);\n  };\n\n  const handleAnalysis = async (newData: Job) => {\n    const jobDescription = preProcessText(\n      JSON.stringify(newData.jobDescription)\n    );\n    const jobRequirements = preProcessText(\n      JSON.stringify(newData.jobRequirements)\n    );\n    const processedText = {\n      jobTitle: newData.jobTitle,\n      jobDescription: jobDescription,\n      jobRequirements: jobRequirements\n    };\n    setDocumentText(JSON.stringify(processedText));\n    setIsAnalyzing(true);\n    const result = await sendChatGPTRequest(\n      jobAnalysist,\n      [processedText],\n      null,\n      {\n        '58': 5,\n        '60': 5\n      }\n    );\n    const translatedKeywords = await sendChatGPTRequest(translate, result);\n    setAnalysisResults(translatedKeywords);\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        ...data,\n        applicationDeadline: toInputDateString(data?.applicationDeadline)\n      });\n    } else if (!selectedId) {\n      reset({\n        name: profile?.name,\n        email: profile?.email,\n        phone: profile?.phone\n        // contactAddress: profile?.address\n      });\n    }\n  }, [JSON.stringify(data), JSON.stringify(profile)]);\n\n  useEffect(() => {\n    if (analysisResults.length > 0 && analysisResults[0]) {\n      const keywords = loadKeywords(analysisResults) || '';\n\n      const keywordToStore = onSaveNewData.requiredSkills + ', ' + keywords;\n\n      if (selectedId)\n        onSaveDataById([\n          selectedId,\n          {\n            ...onSaveNewData,\n            keywords: keywordToStore\n          }\n        ]);\n      else\n        onSaveData({\n          ...onSaveNewData,\n          keywords: keywordToStore,\n          applicationDeadline: toOutputDateString(\n            onSaveNewData?.applicationDeadline,\n            null,\n            'DD-MM-YYYY'\n          )\n        });\n    }\n    setIsAnalyzing(false);\n  }, [analysisResults]);\n\n  if (isFetching) return <SuspenseLoader />;\n\n  return (\n    <Box id={'form-create'}>\n      <FormProvider {...methods}>\n        <Container maxWidth=\"xl\">\n          <Grid\n            container\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"stretch\"\n            spacing={3}\n            marginTop={0}\n          >\n            <Grid item xs={12}>\n              <Card>\n                <CardHeader title={title || 'Tạo Tin Tuyển Dụng'} />\n                <Divider />\n                <CardContent>\n                  <Typography variant=\"h6\" marginBottom={2}>\n                    Thông tin cơ bản\n                  </Typography>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        required\n                        id=\"jobTitle\"\n                        label=\"Chức danh\"\n                        placeholder=\"Vị trí hiển thị đăng tuyển\"\n                        name=\"jobTitle\"\n                        inputProps={{ maxLength: 300 }}\n                        multiline\n                        minRows={1}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <FormControl\n                        element={\n                          <Autocomplete\n                            limitTags={7}\n                            options={PROFESSION.map((item) => item.value)}\n                          />\n                        }\n                        defaultValue={data?.profession?.split(',')}\n                        control={control}\n                        errors={errors}\n                        id=\"profession\"\n                        label=\"Nghề nghiệp\"\n                        name=\"profession\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<SelectInput />}\n                        options={WORKING_FORM}\n                        control={control}\n                        errors={errors}\n                        id=\"employmentType\"\n                        label=\"Hình thức làm việc\"\n                        name=\"employmentType\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        options={DEGREE}\n                        element={<SelectInput />}\n                        control={control}\n                        errors={errors}\n                        id=\"degree\"\n                        label=\"Bằng cấp\"\n                        name=\"degree\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        options={EXPERIENCE}\n                        element={<SelectInput />}\n                        control={control}\n                        errors={errors}\n                        id=\"experience\"\n                        label=\"Kinh nghiệm\"\n                        name=\"experience\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        options={POSITION_LEVEL}\n                        element={<SelectInput />}\n                        control={control}\n                        errors={errors}\n                        id=\"positionLevel\"\n                        label=\"Cấp bậc\"\n                        name=\"positionLevel\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={2}>\n                      <FormControl\n                        element={\n                          <TextField InputProps={{ inputProps: { min: 0 } }} />\n                        }\n                        control={control}\n                        errors={errors}\n                        id=\"minAge\"\n                        label=\"Độ tuổi tối thiểu\"\n                        name=\"minAge\"\n                        type=\"number\"\n                        pattern=\"integer\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={2}>\n                      <FormControl\n                        element={\n                          <TextField InputProps={{ inputProps: { min: 0 } }} />\n                        }\n                        control={control}\n                        errors={errors}\n                        id=\"maxAge\"\n                        label=\"Độ tuổi tối đa\"\n                        type=\"number\"\n                        name=\"maxAge\"\n                        pattern=\"integer\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        options={GENDER_OPTION}\n                        element={<SelectInput />}\n                        control={control}\n                        errors={errors}\n                        id=\"sex\"\n                        label=\"Yêu cầu giới tính\"\n                        name=\"sex\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"numberOfVacancies\"\n                        label=\"Số lượng tuyển\"\n                        name=\"numberOfVacancies\"\n                        required\n                        type=\"number\"\n                        pattern=\"integer\"\n                        InputProps={{ inputProps: { min: 1 } }}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"trialPeriod\"\n                        label=\"Thời giai thử việc\"\n                        name=\"trialPeriod\"\n                        required\n                        type=\"number\"\n                        pattern=\"integer\"\n                        InputProps={{\n                          inputProps: { min: 1 },\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              tháng\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<DatePicker minDate={dayjs()} />}\n                        control={control}\n                        errors={errors}\n                        id=\"applicationDeadline\"\n                        label=\"Hạn nộp hồ sơ\"\n                        name=\"applicationDeadline\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"minSalary\"\n                        label=\"Mức lương tối thiểu\"\n                        name=\"minSalary\"\n                        type=\"number\"\n                        pattern=\"integer\"\n                        required\n                        InputProps={{\n                          inputProps: { min: 1 },\n                          inputComponent: NumericFormatCustom as any,\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              triệu VNĐ\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"maxSalary\"\n                        label=\"Mức lương tối đa\"\n                        name=\"maxSalary\"\n                        type=\"number\"\n                        pattern=\"integer\"\n                        required\n                        InputProps={{\n                          inputProps: { min: 1 },\n                          inputComponent: NumericFormatCustom as any,\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              triệu VNĐ\n                            </InputAdornment>\n                          )\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        options={WORK_AT}\n                        element={<SelectInput />}\n                        control={control}\n                        errors={errors}\n                        id=\"workAddress\"\n                        label=\"Khu vực tuyển dụng\"\n                        name=\"workAddress\"\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"contactAddress\"\n                        label=\"Địa chỉ làm việc\"\n                        name=\"contactAddress\"\n                        required\n                        multiline\n                        minRows={2}\n                      />\n                    </Grid>\n                    {/* <Grid item container xs={12}>\n                      <Grid item xs={3}>\n                        <FormControl\n                          options={WORK_AT}\n                          element={<SelectInput />}\n                          control={control}\n                          errors={errors}\n                          id=\"province\"\n                          label=\"Tỉnh thành\"\n                          name=\"province\"\n                          required\n                        />\n                      </Grid>\n                      <Grid item xs={9}>\n                        <FormControl\n                          element={<TextField />}\n                          control={control}\n                          errors={errors}\n                          id=\"workAddress\"\n                          label=\"Địa chỉ làm việc\"\n                          name=\"workAddress\"\n                          required\n                          multiline\n                          minRows={1}\n                        />\n                      </Grid>\n                    </Grid> */}\n\n                    <Grid item xs={12}>\n                      <Box display=\"flex\" marginBottom={1}>\n                        {isEmpty.find((item) => item === 'requiredSkills') && (\n                          <Typography\n                            color=\"error\"\n                            fontWeight={700}\n                            fontStyle=\"italic\"\n                            textAlign=\"center\"\n                            flex={1}\n                          >\n                            * Vui lòng nhập yêu cầu kĩ năng\n                          </Typography>\n                        )}\n                      </Box>\n                      <FormControl\n                        element={\n                          <Autocomplete\n                            freeSolo={true}\n                            limitTags={7}\n                            options={SKILLS.map((item) => item.value)}\n                          />\n                        }\n                        defaultValue={data?.requiredSkills?.split(',')}\n                        control={control}\n                        errors={errors}\n                        id=\"requiredSkills\"\n                        label=\"Kĩ năng bắt buộc\"\n                        name=\"requiredSkills\"\n                        required\n                      />\n                      <Typography\n                        fontSize={12}\n                        color=\"secondary\"\n                        fontStyle={'italic'}\n                        sx={{ display: 'flex', justifyContent: 'center' }}\n                      >\n                        Hãy liệt kê tối đa 10 từ khóa. Ví dụ: Python, ReactJS,\n                        HTML, Go... Sẽ giúp hệ thống tìm kiếm được hồ sơ phù hợp\n                        với doanh nghiệp bạn nhất\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                  <Box display=\"flex\" marginBottom={1} marginTop={4}>\n                    <Typography variant=\"h6\">Mô tả công việc</Typography>\n                    {isEmpty.find((item) => item === 'jobDescription') && (\n                      <Typography\n                        color=\"error\"\n                        fontWeight={700}\n                        fontStyle=\"italic\"\n                        textAlign=\"center\"\n                        flex={1}\n                      >\n                        * Vui lòng nhập mô tả công việc\n                      </Typography>\n                    )}\n                  </Box>\n                  <FormControl\n                    element={<TextEditor />}\n                    control={control}\n                    errors={errors}\n                    id=\"jobDescription\"\n                    name=\"jobDescription\"\n                    required\n                  />\n\n                  <Box display=\"flex\" marginBottom={1} marginTop={4}>\n                    <Typography variant=\"h6\">Yêu cầu công việc</Typography>\n                    {isEmpty.find((item) => item === 'jobRequirements') && (\n                      <Typography\n                        color=\"error\"\n                        fontWeight={700}\n                        fontStyle=\"italic\"\n                        textAlign=\"center\"\n                        flex={1}\n                      >\n                        * Vui lòng nhập yêu cầu công việc\n                      </Typography>\n                    )}\n                  </Box>\n                  <FormControl\n                    element={<TextEditor />}\n                    control={control}\n                    errors={errors}\n                    id=\"jobRequirements\"\n                    name=\"jobRequirements\"\n                    required\n                  />\n                  <Box display=\"flex\" marginBottom={1} marginTop={4}>\n                    <Typography variant=\"h6\">Quyền lợi</Typography>\n                    {isEmpty.find((item) => item === 'benefits') && (\n                      <Typography\n                        color=\"error\"\n                        fontWeight={700}\n                        fontStyle=\"italic\"\n                        textAlign=\"center\"\n                        flex={1}\n                      >\n                        * Vui lòng nhập quyền lợi công việc\n                      </Typography>\n                    )}\n                  </Box>\n                  <FormControl\n                    element={<TextEditor />}\n                    control={control}\n                    errors={errors}\n                    id=\"benefits\"\n                    name=\"benefits\"\n                    required\n                  />\n                  <Typography variant=\"h6\" marginBottom={1} marginTop={4}>\n                    Thông tin người liên hệ\n                  </Typography>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"name\"\n                        label=\"Họ và tên\"\n                        name=\"name\"\n                        required\n                      />\n                    </Grid>{' '}\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        id=\"email\"\n                        label=\"Email\"\n                        name=\"email\"\n                        required\n                        pattern=\"email\"\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        required\n                        id=\"phone\"\n                        label=\"Điện thoại\"\n                        name=\"phone\"\n                        pattern=\"phone\"\n                      />\n                    </Grid>\n                    {/* <Grid item xs={12} md={8}>\n                      <FormControl\n                        element={<TextField />}\n                        control={control}\n                        errors={errors}\n                        required\n                        id=\"contactAddress\"\n                        label=\"Địa chỉ liên hệ\"\n                        name=\"contactAddress\"\n                        multiline\n                        minRows={1}\n                      />\n                    </Grid> */}\n                  </Grid>\n                </CardContent>\n                <CardActions>\n                  <Grid\n                    container\n                    justifyContent=\"end\"\n                    marginBottom={1}\n                    marginRight={1}\n                  >\n                    <Button\n                      onClick={handleSubmit(handleSave)}\n                      color=\"success\"\n                      variant=\"contained\"\n                      sx={{ minWidth: 100 }}\n                    >\n                      {selectedId ? 'Lưu' : 'Tạo'}\n                    </Button>\n                  </Grid>\n                </CardActions>\n                <Backdrop\n                  sx={{\n                    color: '#fff',\n                    zIndex: (theme) => theme.zIndex.drawer + 1\n                  }}\n                  open={isAnalyzing}\n                >\n                  <CircularProgress />\n                </Backdrop>\n              </Card>\n            </Grid>\n          </Grid>\n        </Container>\n      </FormProvider>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default FormCreate;\n","import { useAppDispatch, useAppSelector } from 'src/redux/hooks';\nimport {\n  selectJob,\n  setItemDetail as setItemDetailAction,\n  resetItemDetail as resetItemDetailAction\n} from '../jobSlice';\nimport { Job } from '../model';\n\nconst useJob = () => {\n  const { itemDetail } = useAppSelector(selectJob);\n  const dispatch = useAppDispatch();\n\n  const setItemDetail = (data: Partial<Job>) => {\n    dispatch(setItemDetailAction(data));\n  };\n\n  const resetItemDetail = () => {\n    dispatch(resetItemDetailAction());\n  };\n\n  return {\n    itemDetail,\n    setItemDetail,\n    resetItemDetail\n  };\n};\n\nexport default useJob;\n","import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { Job } from '../model';\nimport { JobService, JobViewService } from '../jobService';\nimport { useApp } from 'src/modules/app/hooks';\nimport { useEffect, useState } from 'react';\nimport useJob from './useJob';\n\nexport default function useQueryJobByIdByOwner(id) {\n  if (!id) return {};\n  const { isEmployer } = useApp();\n  const { setItemDetail, itemDetail } = useJob();\n  const { data, isLoading, isFetching } = useQuery<\n    ResponseData<Job>,\n    AxiosError<ResponseData<Job>>\n  >(['job-getByIdByEmmployer', id], async () => JobService.getById(id), {\n    retry: 1,\n    refetchOnWindowFocus: false,\n    enabled: isEmployer\n  });\n\n  useEffect(() => {\n    if (data?.data) {\n      const jobData = {\n        ...data?.data,\n        sex: data?.data?.sex === null ? 'Tất cả' : data?.data?.sex\n      };\n      setItemDetail(jobData);\n    }\n  }, [JSON.stringify(data)]);\n\n  return {\n    data: itemDetail,\n    isLoading,\n    isFetching\n  };\n}\n\nexport function useQueryJobByIdListByOwner(idList: number[]) {\n  const { isEmployer } = useApp();\n  const [dataList, setDataList] = useState<ResponseData<Job>[]>([]);\n  const { data, isLoading } = useQuery<\n    ResponseData<Job>[],\n    AxiosError<ResponseData<Job>[]>\n  >(\n    ['jobs-getByIdListByOwner', JSON.stringify(idList)],\n    async () => {\n      if (!idList.length) return [];\n      Promise.allSettled(idList.map((id) => JobService.getById(id)))\n        .then((results) => {\n          // Lọc ra các kết quả thành công và chỉ lưu dữ liệu của các promise đã được giải quyết vào dataList\n          const fulfilledResults = results.filter(\n            (result): result is PromiseFulfilledResult<any> =>\n              result.status === 'fulfilled'\n          );\n          const dataList = fulfilledResults.map((result) => result.value);\n\n          // Cập nhật dataList\n          setDataList(dataList);\n        })\n        .catch((e) => console.error(e));\n    },\n    {\n      retry: 1,\n      refetchOnWindowFocus: false,\n      keepPreviousData: true,\n      enabled: isEmployer\n    }\n  );\n  return {\n    jobs:\n      dataList?.map((item) => ({\n        ...item?.data,\n        id: item?.data?.postId,\n        sex: item?.data?.sex === null ? 'Tất cả' : item?.data?.sex\n      })) || [],\n    isLoading\n  };\n}\n","import { AttachedDocument, OnlineProfile } from 'src/modules/jobProfile/model';\n\nexport const loadKeywords = (analysisResults: any[], document?: any) => {\n  if (analysisResults.length <= 0 && !Boolean(analysisResults[0])) return '';\n\n  const result = analysisResults[0];\n  if (!result) return '';\n\n  const startIndex = result?.indexOf('[');\n  const endIndex = result?.lastIndexOf(']');\n  if (startIndex === undefined || endIndex === undefined) return '';\n\n  if (startIndex === -1) {\n    console.error(\"Không tìm thấy ký tự '['\");\n    return '';\n  }\n\n  if (endIndex === -1) {\n    console.error(\"Không tìm thấy ký tự ']'\");\n    return '';\n  }\n\n  // Trích xuất chuỗi con từ vị trí startIndex đến endIndex\n  const extractedString = result\n    ?.substring(startIndex + 1, endIndex)\n    ?.replace(/[\"]/g, '');\n\n  // B1: Thay thế dấu \"'\" thành dấu '\"' để đảm bảo JSON hợp lệ\n  const jsonString = extractedString?.replace(/[_!@#$%^&*;|<>'\"\\n\\t\\r]/g, '');\n\n  // B2: Parse string sang array\n  const keywordArray = jsonString.split(',');\n\n  const keywordList = keywordArray.slice(0, 20);\n  return keywordList?.join(',');\n};\n\nfunction removeDateAttributes(data) {\n  return data.map((item) => {\n    const { startDate, endDate, id, isDoing, ...rest } = item;\n    return rest;\n  });\n}\n\nconst removeAttributes = (\n  profile: Partial<OnlineProfile | AttachedDocument>,\n  profileType: string,\n  cvText?: string\n) => {\n  // if profile type is OnlineProfile then return\n  if (profileType === 'online') {\n    const profileData = profile as Partial<OnlineProfile>;\n    return {\n      jobTitle: profileData?.jobTitle,\n      profession: profileData?.profession,\n      work_experiences: profileData?.work_experiences.map((experience) => {\n        return {\n          jobTitle: experience.jobTitle,\n          jobDescription: experience.jobDescription\n        };\n      }),\n      education_informations: profileData?.education_informations.map(\n        (education) => education.specialization\n      ),\n      another_degrees: profileData?.another_degrees?.map(\n        (degree) => degree.degreeName\n      )\n    };\n  } else {\n    return {\n      jobTitle: profile?.jobTitle,\n      profession: profile?.profession,\n      cvContent: cvText\n    };\n  }\n};\n\ntype profileType = 'online' | 'document';\nexport function preProcessData(\n  object,\n  profileType: profileType,\n  cvText?: string\n) {\n  const dataToAnalyze = removeAttributes(object, profileType, cvText);\n  return dataToAnalyze;\n}\n"],"names":["cvAnalysist","jobAnalysist","RoundOneCheck","checkContent","extractSkill","translate","extractCommonInfo","API_KEY","sendRequest","async","url","headers","body","response","fetch","method","JSON","stringify","data","json","error","Error","message","console","getEmbedding","content","length","Authorization","sendMessage","_data$data","inputText","model","input","map","item","embedding","responses","hasShownAlert","results","Promise","allSettled","_await$sendMessage","_await$sendMessage2","i","employer_Requirement","res","word","result","employee_Profile","id","status","push","value","reason","processEmbeddings","request","max_tokens","arguments","undefined","logit_bias","processMessages","_data$choices","_data$choices$","_data$choices$$messag","trim","messages","role","temperature","presence_penalty","frequency_penalty","choices","DatePicker","props","_jsx","LocalizationProvider","dateAdapter","AdapterDayjs","children","DatePickerMui","format","dayjs","slotProps","textField","size","fullWidth","FooterWrapper","styled","Container","_ref","theme","concat","spacing","className","Box","pb","display","xs","md","alignItems","textAlign","justifyContent","React","ref","onChange","other","NumericFormat","getInputRef","onValueChange","values","target","name","thousandSeparator","valueIsNumericString","TextInput","getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionsRoot","overridesResolver","styles","ownerState","root","disableSpacing","_extends","padding","marginLeft","inProps","useThemeProps","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","clsx","useMutateJob","toast","useApp","navigate","useNavigate","mutate","onSaveData","isLoading","useMutation","JobService","create","onSuccess","success","massage","onError","useMutateJobById","queryClient","useQueryClient","onSaveDataById","update","invalidateQueries","defaultValues","sex","positionLevel","degree","employmentType","experience","jobDescription","jobRequirements","benefits","profession","email","address","phone","contactAddress","requiredSkills","applicationDeadline","_data$profession","_data$requiredSkills","title","selectedId","isFetching","useQueryJobByIdByOwner","analysisResults","setAnalysisResults","useState","isAnalyzing","setIsAnalyzing","documentText","setDocumentText","onSaveNewData","setOnSaveNewData","setRequiredSkills","isEmpty","setIsEmpty","profile","useProfileHook","methods","useForm","control","reset","formState","errors","handleSubmit","handleAnalysis","preProcessText","newData","processedText","jobTitle","sendChatGPTRequest","translatedKeywords","useEffect","toInputDateString","keywords","loadKeywords","keywordToStore","toOutputDateString","SuspenseLoader","_jsxs","FormProvider","maxWidth","Grid","container","direction","marginTop","Card","CardHeader","Divider","CardContent","Typography","variant","marginBottom","FormControl","element","TextField","required","label","placeholder","inputProps","maxLength","multiline","minRows","Autocomplete","limitTags","options","PROFESSION","defaultValue","split","SelectInput","WORKING_FORM","DEGREE","EXPERIENCE","POSITION_LEVEL","InputProps","min","type","pattern","GENDER_OPTION","endAdornment","InputAdornment","position","minDate","inputComponent","NumericFormatCustom","WORK_AT","find","color","fontWeight","fontStyle","flex","freeSolo","SKILLS","fontSize","sx","TextEditor","CardActions","marginRight","Button","onClick","fieldsToCheck","emptyList","field","fieldName","Object","entries","removeHTMLTag","prev","Array","isArray","join","minWidth","Backdrop","zIndex","drawer","open","CircularProgress","Footer","useJob","itemDetail","useAppSelector","selectJob","dispatch","useAppDispatch","setItemDetail","setItemDetailAction","resetItemDetail","resetItemDetailAction","isEmployer","useQuery","getById","retry","refetchOnWindowFocus","enabled","_data$data2","jobData","useQueryJobByIdListByOwner","idList","dataList","setDataList","then","filter","catch","e","keepPreviousData","jobs","_item$data","_item$data2","_item$data3","postId","document","_result$substring","Boolean","startIndex","indexOf","endIndex","lastIndexOf","extractedString","substring","replace","keywordList","slice","removeAttributes","profileType","cvText","_profileData$another_","profileData","work_experiences","education_informations","education","specialization","another_degrees","degreeName","cvContent","preProcessData","object"],"sourceRoot":""}