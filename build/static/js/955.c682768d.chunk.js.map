{"version":3,"file":"static/js/955.c682768d.chunk.js","mappings":"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","sources":["modules/application/hooks/useQueryCandidateApplications.ts","pages/company-review-profiles/index.tsx"],"sourcesContent":["import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { PaginationType, ResponseData } from 'src/common/http-request';\nimport { Application } from '../model';\nimport { CandidateProfilesService } from '../applicationService';\nimport { useApp } from 'src/modules/app/hooks';\n\nconst useQueryCandidateApplications = (params?) => {\n  const { isEmployer } = useApp();\n  const { data, isLoading, refetch, isFetching } = useQuery<\n    ResponseData<PaginationType<Application[]>>,\n    AxiosError<ResponseData<Application[]>>\n  >(\n    ['application-getList', params],\n    () => CandidateProfilesService.get({ params }),\n    {\n      keepPreviousData: true,\n      retry: 1,\n      refetchOnWindowFocus: false,\n      enabled: isEmployer\n    }\n  );\n\n  return {\n    data:\n      data?.data?.items?.map((item) => ({\n        ...item,\n        id: item.application_id\n      })) || [],\n    totalItems: data?.data?.meta?.totalItems,\n    itemCount: data?.data?.meta?.itemCount,\n    itemPerPage: data?.data?.meta?.itemPerPage,\n    totalPages: data?.data?.meta?.totalPages,\n    currentPage: data?.data?.meta?.currentPage,\n    isLoading,\n    refetch,\n    isFetching\n  };\n};\n\nexport default useQueryCandidateApplications;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  Container,\n  Divider,\n  Grid,\n  Tab\n} from '@mui/material';\nimport useQueryCandidateApplications from 'src/modules/application/hooks/useQueryCandidateApplications';\nimport Table from './Table';\nimport { useMemo, useState } from 'react';\nimport TabsWrapper from 'src/components/TabWrapper';\nimport {\n  ProfileApplicationType,\n  getKeywords,\n  preprocessJobData\n} from 'src/utils/reviewProfile';\nimport { Job } from 'src/modules/jobs/model';\nimport { useQueryJobByIdListByOwner } from 'src/modules/jobs/hooks/useQueryJobByIdByOwner';\n\nconst tabs = [\n  { label: 'Tất cả', value: '' },\n  { label: 'Đã duyệt', value: 'Đã duyệt' },\n  { label: 'Chờ duyệt', value: 'Chờ duyệt' },\n  { label: 'Từ chối', value: 'Từ chối' },\n  { label: 'Hết hạn', value: 'Hết hạn' }\n];\n\nconst matchJobAndProfile = (jobs: Job[], data): ProfileApplicationType[] =>\n  data\n    ?.map((item) => {\n      const job = jobs?.find((job) => job?.postId === item?.postId);\n      if (!job) return null;\n\n      const {\n        application_id,\n        name,\n        email,\n        phone,\n        applicationType,\n        status,\n        matchingScore,\n        employee,\n        CV,\n        id,\n        createAt\n      } = item;\n      const { postId, jobTitle } = job;\n      const keywords = getKeywords(item);\n\n      const applicationInfo = {\n        id: application_id,\n        createAt: createAt,\n        employer_Requirement: preprocessJobData(job),\n        employee_Profile: {\n          online_profile: employee?.online_profile,\n          attached_document: employee?.attached_document,\n          personal_information: {\n            ...employee?.user,\n            name,\n            email,\n            phone\n          },\n          application: {\n            id,\n            application_id,\n            postId,\n            CV,\n            applicationType,\n            jobTitle,\n            keywords,\n            name,\n            status,\n            matchingScore\n          }\n        }\n      };\n      return applicationInfo;\n    })\n    .filter(Boolean);\n\nconst CandidateProfiles = () => {\n  const pageSize = 9;\n  const [currentTab, setCurrentTab] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortModel, setSortModel] = useState({\n    orderBy: '',\n    sort: ''\n  });\n  const {\n    data,\n    isLoading: isLoadingData,\n    totalPages\n  } = useQueryCandidateApplications({\n    page: currentPage,\n    num: pageSize,\n    status: currentTab,\n    orderBy: sortModel.orderBy,\n    sort: sortModel.sort\n  });\n  const jobsIdList: number[] = useMemo(\n    () => [...new Set<number>(data?.map((item) => item?.postId))],\n    [data]\n  );\n\n  const { jobs, isLoading: isLoadingJobs } =\n    useQueryJobByIdListByOwner(jobsIdList);\n\n  const handleTabsChange = (e, value) => {\n    setCurrentPage(1);\n    setCurrentTab(value);\n  };\n\n  // First time render the page\n  const initialJobProfileData = useMemo(() => {\n    return matchJobAndProfile(jobs, data);\n  }, [data, jobs]);\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"stretch\"\n        spacing={3}\n        marginTop={0}\n      >\n        <Grid item xs={12}>\n          <Card>\n            <CardHeader title=\"Danh Sách ứng viên\" />\n            <Divider />\n            <CardContent>\n              <TabsWrapper\n                onChange={handleTabsChange}\n                value={currentTab}\n                variant=\"scrollable\"\n                scrollButtons={false}\n                sx={{\n                  display: { md: 'inline-block' },\n                  borderBottom: 1,\n                  borderColor: 'divider'\n                }}\n              >\n                {tabs.map((tab) => {\n                  return (\n                    <Tab key={tab.value} label={tab.label} value={tab.value} />\n                  );\n                })}\n              </TabsWrapper>\n              <Table\n                data={initialJobProfileData}\n                pageSize={pageSize}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                handlePageChange={setCurrentPage}\n                loading={isLoadingData || isLoadingJobs}\n                setSortModel={setSortModel}\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default CandidateProfiles;\n"],"names":["params","_data$data","_data$data$items","_data$data2","_data$data2$meta","_data$data3","_data$data3$meta","_data$data4","_data$data4$meta","_data$data5","_data$data5$meta","_data$data6","_data$data6$meta","isEmployer","useApp","data","isLoading","refetch","isFetching","useQuery","CandidateProfilesService","get","keepPreviousData","retry","refetchOnWindowFocus","enabled","items","map","item","id","application_id","totalItems","meta","itemCount","itemPerPage","totalPages","currentPage","tabs","label","value","CandidateProfiles","currentTab","setCurrentTab","useState","setCurrentPage","sortModel","setSortModel","orderBy","sort","isLoadingData","useQueryCandidateApplications","page","num","status","jobsIdList","useMemo","Set","postId","jobs","isLoadingJobs","useQueryJobByIdListByOwner","initialJobProfileData","matchJobAndProfile","job","find","name","email","phone","applicationType","matchingScore","employee","CV","createAt","jobTitle","keywords","getKeywords","employer_Requirement","preprocessJobData","employee_Profile","online_profile","attached_document","personal_information","user","application","filter","Boolean","_jsx","Container","maxWidth","children","Grid","container","direction","justifyContent","alignItems","spacing","marginTop","xs","_jsxs","Card","CardHeader","title","Divider","CardContent","TabsWrapper","onChange","handleTabsChange","e","variant","scrollButtons","sx","display","md","borderBottom","borderColor","tab","Tab","Table","pageSize","handlePageChange","loading"],"sourceRoot":""}