{"version":3,"file":"static/js/133.ff0b6dec.chunk.js","mappings":"0KAAO,MAAMA,EAAW,0jFAKXC,EAAY,i/EAKZC,EAAa,yiFAcbC,EAAY,ygCAQZC,EAAY,2xBAGZC,EAAS,8eAGTC,EAAiB,m8B,0CCpC9B,MAKMC,EAFJ,6DAKIC,EAAcC,MAAOC,EAAKC,EAASC,KACvC,IACE,MAAMC,QAAiBC,MAAMJ,EAAK,CAChCK,OAAQ,OACRJ,QAASA,EACTC,KAAMI,KAAKC,UAAUL,KAGjBM,QAAaL,EAASM,OAC5B,GAAQ,OAAJD,QAAI,IAAJA,GAAAA,EAAME,MACR,MAAM,IAAIC,MAAMH,EAAKE,MAAME,SAE7B,OAAOJ,CACT,CAAE,MAAOE,GAEP,MADAG,QAAQH,MAAM,SAAUA,GAClBA,CACR,GAuEWI,EAAef,UAC1B,IAAKgB,GAA8B,IAAnBA,EAAQC,OAAc,MAAO,GAE7C,MAAMf,EAAU,CACd,eAAgB,mBAChBgB,cAAepB,GAGXqB,EAAcnB,UAAsB,IAADoB,EACvC,IAAKC,EAAW,OAEhB,MAAMlB,EAAO,CACXmB,MAAO,yBACPC,MAAOF,GAGHZ,QAAaV,EACjB,4CACAG,EACAC,GAEF,OAAW,OAAJM,QAAI,IAAJA,GAAU,QAANW,EAAJX,EAAMA,YAAI,IAAAW,OAAN,EAAJA,EAAYI,KAAKC,GAASA,EAAKC,WAAU,EAoDlD,YAjD0B1B,WACxB,MAAM2B,EAAY,GAClB,IAAIC,GAAgB,EAEpB,MAAMC,QAAgBC,QAAQC,WAC5Bf,EAAQQ,KAAIxB,UAAsB,IAADgC,EAAAC,EAC/B,IAAIC,EAAI,EACR,MAAMC,EAC8C,QAD1BH,QAClBb,EAAqB,OAATE,QAAS,IAATA,OAAS,EAATA,EAAWc,6BAAqB,IAAAH,OAAA,EADvBA,EAE1BR,KAAKY,IAAG,CACTC,KAAe,OAAThB,QAAS,IAATA,OAAS,EAATA,EAAWc,qBAAqBD,KACtCI,OAAQF,MAGVF,EAAI,EACJ,MAAMK,EAC0C,QAD1BN,QACdd,EAAqB,OAATE,QAAS,IAATA,OAAS,EAATA,EAAWkB,yBAAiB,IAAAN,OAAA,EADvBA,EAEtBT,KAAKY,IAAG,CACTC,KAAe,OAAThB,QAAS,IAATA,OAAS,EAATA,EAAWkB,iBAAiBL,KAClCI,OAAQF,MAGV,MAAO,CACLI,GAAa,OAATnB,QAAS,IAATA,OAAS,EAATA,EAAWmB,GACfL,qBAAsBA,EACtBI,iBAAkBA,EACnB,KAIL,IAAK,MAAMD,KAAUT,EACnB,GAAsB,cAAlBS,EAAOG,OACTd,EAAUe,KAAKJ,EAAOK,YACjB,GAAsB,aAAlBL,EAAOG,OAAuB,CAClCb,IACHd,QAAQH,MAAM,wBAAyB2B,EAAOM,QAK9ChB,GAAgB,GAElB,KACF,CAGF,OAAOD,CAAS,EAGLkB,CAAkB7B,EAAQ,EAGzC,EApH2BhB,eACzB8C,EACA9B,GAGI,IAFJ+B,EAAUC,UAAA/B,OAAA,QAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACbE,EAAUF,UAAA/B,OAAA,QAAAgC,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAEb,IAAKhC,GAA8B,IAAnBA,EAAQC,OAAc,MAAO,GAE7C,MAAMf,EAAU,CACd,eAAgB,mBAChBgB,cAAepB,GA2BjB,YAhEsBE,OAAOgB,EAASG,KACtC,MAAMQ,EAAY,GAClB,IAAIC,GAAgB,EAEpB,MAAMC,QAAgBC,QAAQC,WAC5Bf,EAAQQ,KAAKH,GAAcF,EAAYZ,KAAKC,UAAUa,OAGxD,IAAK,MAAMiB,KAAUT,EACnB,GAAsB,cAAlBS,EAAOG,OACTd,EAAUe,KAAKJ,EAAOK,YACjB,GAAsB,aAAlBL,EAAOG,OAAuB,CAClCb,IACHd,QAAQH,MAAM,wBAAyB2B,EAAOM,QAK9ChB,GAAgB,GAElB,KACF,CAGF,OAAOD,CAAS,EAwCHwB,CAAgBnC,GAxBThB,UAAsB,IAADoD,EAAAC,EAAAC,EACvC,IAAKjC,EAAUkC,OAAQ,OAEvB,MAAMpD,EAAO,CACXmB,MAAO,gBACPkC,SAAU,CACR,CAAEC,KAAM,SAAUzC,QAAS8B,GAC3B,CAAEW,KAAM,OAAQzC,QAASK,IAE3BqC,YAAa,EACbC,iBAAkB,GAClBC,kBAAmB,GACnBb,WAAYA,EACZG,WAAYA,GAGRzC,QAAaV,EACjB,kDACAG,EACAC,GAEF,OAAW,OAAJM,QAAI,IAAJA,GAAa,QAAT2C,EAAJ3C,EAAMoD,eAAO,IAAAT,GAAK,QAALC,EAAbD,EAAgB,UAAE,IAAAC,GAAS,QAATC,EAAlBD,EAAoBxC,eAAO,IAAAyC,OAAvB,EAAJA,EAA6BtC,OAAO,GAI/C,C,uGChFe,SAAS8C,EAAYC,GAClC,MAAM,QAAEC,EAAU,GAAE,MAAEC,EAAK,eAAEC,EAAiB,GAAMH,EACpD,OACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAACC,WAAS,EAAAC,SAAA,EACpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,KAAK,QAAQC,GAAI,CAAEC,GAAIT,GAAiBI,SACjDL,KAEHM,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CAACH,KAAK,WAAYV,EAAKO,SAC3BN,EAAQxC,KAAI,CAACC,EAAMoD,KAClBN,EAAAA,EAAAA,KAACO,EAAAA,EAAQ,CAAWnC,MAAOlB,EAAKkB,MAAM2B,SACnC7C,EAAKwC,OADOY,SAOzB,C,+DC/BO,MAAME,EAAe,CAC1BC,cACE,8FACFC,aACE,+HAGSC,EAAe,CAC1BC,YAAa,CAAC,aAAc,YAAa,aACzCC,WAAY,SAEDC,EAAW,CACtBF,YAAa,CAAC,mBACdC,WAAY,SAEDE,EAAiB,CAC5BH,YAAa,CAAC,aAAc,YAAa,aACzCC,WAAY,Q,wECVd,MAkCA,EAlCqCG,KACnC,MAAMC,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MAKhBC,OAAQC,EAAY,UACpBC,EAAS,UACTC,IACEC,EAAAA,EAAAA,cAPuBvF,GACzBwF,EAAAA,GAAqBC,gBAAgBzF,IAUlB,CACnB0F,UAAY/D,IACS,MAAfA,EAAIK,QACN+C,EAAYY,kBAAkB,qBAC9BV,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,WAE7B6E,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACLgF,eACAE,YACD,C,yGC5BH,MA6BA,EA7B8BS,KAC5B,MAAM,WAAEC,IAAed,EAAAA,EAAAA,MACjB,WAAEe,IAAeC,EAAAA,EAAAA,KACjBC,EAAaC,SAAQC,EAAAA,EAAAA,oBAErB,KAAErG,EAAI,UAAEqF,EAAS,UAAEC,EAAS,QAAEgB,IAAYC,EAAAA,EAAAA,UAG9C,CAAC,qBAAsBf,EAAAA,GAAqBgB,IAAK,CACjDC,MAAOA,CAACC,EAAcxG,IACM,MAA1BA,EAAMP,SAASqC,QAAyB0E,EAAe,EACzDC,sBAAsB,EACtBC,QAAST,GAAcH,IAUzB,OAPAa,EAAAA,EAAAA,YAAU,KAEJ7G,GAAQsF,GACVW,EAAe,OAAJjG,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KACnB,GACC,CAACsF,IAEG,CACLwB,cAAmB,OAAJ9G,QAAI,IAAJA,OAAI,EAAJA,EAAMA,KACrBqF,YACAiB,UACD,C,0NC7BH,MA4BA,EA5B+BS,KAC7B,MAAMhC,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,KACZ8B,EAAmBxB,EAAAA,GAAqByB,QAEtC9B,OAAQ+B,EAAU,UAAE5B,IAAcC,EAAAA,EAAAA,aAIxCyB,EAAkB,CAClBtB,UAAY/D,IACS,MAAfA,EAAIK,QACN+C,EAAYY,kBAAkB,qBAC9BV,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,WAE7B6E,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAGzD,MAAO,CACL8G,aACA5B,YACD,E,sECfY,SAAS6B,IACtB,MAAM,QAAEC,EAAO,WAAEnB,IAAeC,EAAAA,EAAAA,MAC1B,WAAEgB,GAAeH,KACjB,aAAE3B,IAAiBiC,EAAAA,EAAAA,MAClBC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,MAEjCjE,EAAU,CACdkE,WAAYC,EAAAA,GACZC,YAAaC,EAAAA,GACbC,cAAeC,EAAAA,GACfC,OAAQC,EAAAA,GACRC,WAAYC,EAAAA,GACZC,YAAaC,EAAAA,IAyBf,OAJAvB,EAAAA,EAAAA,YAAU,KATe7G,MAUvBuH,GAVuBvH,EAUIoH,EAVe,IACvCpH,EACHyH,YAAYY,EAAAA,EAAAA,IAA8B,OAAJrI,QAAI,IAAJA,OAAI,EAAJA,EAAMyH,WAAYlE,EAAQkE,YAChEE,aAAaU,EAAAA,EAAAA,IACP,OAAJrI,QAAI,IAAJA,OAAI,EAAJA,EAAM2H,YACNpE,EAAQoE,eAK2C,GACpD,CAACP,KAGFtD,EAAAA,EAAAA,KAACwE,EAAAA,EAAW,CACVtI,KAAMsH,EACN/D,QAASA,EACTgF,SA1BuBvI,KACVwI,EAAAA,EAAAA,IAAcxI,EAAK+H,OAAQU,EAAAA,IAA1C,MAEMnB,EAAUtH,EAEL,OAAPoH,QAAO,IAAPA,GAAAA,EAASsB,OAAQtD,EAAakC,GAC7BJ,EAAWI,EAAQ,GAuB5B,C,6JCtDA,MA6BA,EA7B4BqB,KAC1B,MAAM5D,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,KAEZ8B,EAAmB4B,EAAAA,GAAsB3B,QAEvC9B,OAAQ+B,EAAU,UAAE7B,IAAcE,EAAAA,EAAAA,aAIxCyB,EAAkB,CAClBtB,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAGzD,MAAO,CACL8G,aACA7B,YACD,ECCH,EA3BkCwD,KAChC,MAAM9D,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MACVC,OAAQ2D,EAAc,UAAEzD,IAAcE,EAAAA,EAAAA,cAI5CwD,IAAA,IAAEhH,EAAI/B,GAAK+I,EAAA,OAAKC,EAAAA,EAAkBC,OAAOlH,EAAI/B,EAAK,GAAE,CACpD0F,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACL0I,iBACAzD,YACD,E,mECvBH,MAcA,EAd0B6D,KACxB,MAAM,iBAAEC,IAAqBC,EAAAA,EAAAA,GAAeC,EAAAA,IACtCC,GAAWC,EAAAA,EAAAA,KAMjB,MAAO,CACLJ,mBACAK,kBANyBxJ,IACzBsJ,GAASG,EAAAA,EAAAA,IAAwBzJ,GAAM,EAMxC,ECSY,SAAS0J,EAAepG,GACrC,MAAM,WAAE4D,GAAeyB,KACjB,eAAEG,GAAmBD,KACrB,QAAEc,EAAO,OAAEC,GAAWtG,GACtB,QAAE8D,EAAO,WAAEnB,IAAeC,EAAAA,EAAAA,MAC1B,iBAAEiD,EAAgB,kBAAEK,GAAsBN,KACzChJ,EAAO2J,IAAYrC,EAAAA,EAAAA,UAAS,CAAEsC,OAAO,EAAO1J,QAAS,MAWtD,QACJ2J,EAAO,MACPC,EAAK,MACLC,EAAK,aACLC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,IAAwB,CAC1BC,cAhBwB,CACxBC,SAAU,GACVC,YAAa,GACbC,UAAW,KACXC,QAAS,KACTC,SAAS,EACTC,eAAgB,MAaZD,EAAUX,EAAM,WAAW,GAC3BS,EAAYT,EAAM,aAClBU,EAAUV,EAAM,YAgBtBnD,EAAAA,EAAAA,YAAU,KAbJ4D,GAAaC,IACXG,IAAMJ,GAAWK,QAAQJ,GAC3Bb,EAAS,CACPC,OAAO,EACP1J,QAAS,0EAGXyJ,EAAS,CAAEC,OAAO,EAAO1J,QAAS,MAGlCuK,GAASd,EAAS,CAAEC,OAAO,EAAO1J,QAAS,IAIhC,GACd,CAACqK,EAAWC,EAASC,IAmExB,OAXA9D,EAAAA,EAAAA,YAAU,KAAO,IAADkE,EACd,MAAMC,GACG,OAAP5D,QAAO,IAAPA,GAAyB,QAAlB2D,EAAP3D,EAAS+B,wBAAgB,IAAA4B,OAAlB,EAAPA,EAA2BE,MACxBhD,GAAeA,EAAWlG,KAAO6H,OACf,OAAhBT,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB8B,MAAMhD,GAAeA,EAAWlG,KAAO6H,KAChE,GAAIoB,EAAiB,CACnB,MAAME,GA5DgBlL,EA4DsBgL,GA3DpCL,QAMH,IACF3K,EACHyK,WAAWU,EAAAA,EAAAA,IAAkBnL,EAAKyK,WAClCC,QAAS,MARF,IACF1K,EACHyK,WAAWU,EAAAA,EAAAA,IAAkBnL,EAAKyK,WAClCC,SAASS,EAAAA,EAAAA,IAAkBnL,EAAK0K,UAwDlCT,EAAMiB,EACR,CA9DwBlL,KA8DxB,GACC,CAAC4J,EAAQxC,KAGV1D,EAAAA,EAAAA,MAAA0H,EAAAA,SAAA,CAAAvH,SAAA,EACEC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,KACR3H,EAAAA,EAAAA,MAAC4H,EAAAA,EAAG,CAACC,GAAI,EAAE1H,SAAA,EACTH,EAAAA,EAAAA,MAAC8H,EAAAA,GAAI,CAACC,WAAS,EAACC,GAAI,EAAGC,QAAS,EAAE9H,SAAA,EAChCC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAIC,GAAI,EAAEhI,UACvBC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,SAAShI,EAAAA,EAAAA,KAACiI,EAAAA,EAAS,IACnBhC,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACT7B,GAAG,WACHyB,MAAM,iBACNwI,KAAK,WACLC,UAAQ,OAGZnI,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAIC,GAAI,EAAEhI,UACvBC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,SAAShI,EAAAA,EAAAA,KAACiI,EAAAA,EAAS,IACnBhC,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACT7B,GAAG,cACHyB,MAAM,aACNwI,KAAK,cACLC,UAAQ,OAGZvI,EAAAA,EAAAA,MAAC8H,EAAAA,GAAI,CAACxK,MAAI,EAACyK,WAAS,EAACG,GAAI,GAAIM,cAAe,EAAErI,SAAA,EAC5CH,EAAAA,EAAAA,MAAC8H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAIO,QAAQ,OAAOC,OAAQ,GAAGvI,SAAA,EAC3CC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,SAAShI,EAAAA,EAAAA,KAACuI,EAAAA,EAAQ,CAACC,QAAS3B,IAC5BZ,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACT7B,GAAG,UACHyB,MAAM,6CACNwI,KAAK,UACL/H,GAAI,CAAEsI,MAAO,GAAIH,OAAQ,GAAII,GAAI,MAEnC1I,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAC0I,QAAQ,UAAS5I,SAAC,mDAEhCC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAIC,GAAI,EAAEhI,UACvBC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,SAAShI,EAAAA,EAAAA,KAAC4I,EAAAA,EAAU,IACpB3C,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACT7B,GAAG,YACHyB,MAAM,wCACNwI,KAAK,YACLW,QAAS9B,WAGXF,IACA7G,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAIC,GAAI,EAAEhI,UACvBC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,SAAShI,EAAAA,EAAAA,KAAC4I,EAAAA,EAAU,IACpB3C,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACT7B,GAAG,UACHyB,MAAM,kCACNwI,KAAK,UACLW,QAAS9B,UAIdF,IACCjH,EAAAA,EAAAA,MAAC8H,EAAAA,GAAI,CACHxK,MAAI,EACJ4K,GAAI,GACJC,GAAI,EACJM,QAAQ,OACRS,aAAa,SACbC,WAAW,SAAQhJ,SAAA,EAEnBC,EAAAA,EAAAA,KAACgJ,EAAAA,EAAgB,KACjBhJ,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACC,SAAU,GAAGnJ,SAAC,6BAI/B3D,EAAM4J,QACLhG,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAG/H,UAChBC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAK,CAACC,SAAS,QAAOrJ,UACrBC,EAAAA,EAAAA,KAACqJ,EAAAA,EAAU,CAAAtJ,SAAE3D,EAAME,eAIzB0D,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAI,GAAG/H,UAChBC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,SAAShI,EAAAA,EAAAA,KAACiI,EAAAA,EAAS,IACnBhC,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACT7B,GAAG,iBACHyB,MAAM,kCACNwI,KAAK,iBACLoB,QAAS,EACTnB,UAAQ,EACRoB,WAAS,UAIfvJ,EAAAA,EAAAA,KAACwJ,EAAAA,EAAW,CACVpD,aAAcA,GA/IW3K,UAC/B,GAAIW,EAAM4J,MAAO,OACjB,MAAMyD,EAhBmBvN,IACpBA,EAAK2K,QAMH,IACF3K,EACHyK,WAAW+C,EAAAA,EAAAA,IAAmBxN,EAAKyK,WACnCC,QAAS,MARF,IACF1K,EACHyK,WAAW+C,EAAAA,EAAAA,IAAmBxN,EAAKyK,WACnCC,SAAS8C,EAAAA,EAAAA,IAAmBxN,EAAK0K,UAWT+C,CAAkBzN,GAmB1CA,EAAK+B,GAAI+G,EAAe,CAAC9I,EAAK+B,GAAIwL,IACjCrG,EAAWqG,GAChB5D,GAAS,IAyHH+D,aAAc/D,SAKxB,CCvPA,MA2BA,EA3BkCgE,KAChC,MAAM5I,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MACVC,OAAQyI,EAAgB,UAAEvI,IAAcE,EAAAA,EAAAA,cAI7CxD,GAAOiH,EAAAA,EAAkB6E,OAAO9L,IAAK,CACtC2D,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACLwN,mBACAvI,YACD,E,eCPY,SAASyI,EAAexK,GACrC,MAAM,iBAAEsK,GAAqBD,KACvB,QAAEvG,IAAYlB,EAAAA,EAAAA,MACd,iBAAEiD,EAAgB,kBAAEK,GAAsBN,KACzC6E,EAAYC,IAAiBxG,EAAAA,EAAAA,UAAS,KACtCyG,EAAgBC,IAAqB1G,EAAAA,EAAAA,UAAS,OAC9C2G,EAAmBC,IAAwB5G,EAAAA,EAAAA,WAAS,IACpD6G,EAAaC,IAAkB9G,EAAAA,EAAAA,WAAS,GAuBzC+G,EAAuBxM,IAC3B6L,EAAiB7L,EAAG,EAQtB,OALA8E,EAAAA,EAAAA,YAAU,KACD,OAAPO,QAAO,IAAPA,IAAAA,EAAS+B,kBAAmB6E,EAAqB,OAAP5G,QAAO,IAAPA,OAAO,EAAPA,EAAS+B,iBAAsB,GAExE,CAAC/B,EAAS+B,KAGXzF,EAAAA,EAAAA,MAAA0H,EAAAA,SAAA,CAAAvH,SAAA,CACa,OAAVkK,QAAU,IAAVA,OAAU,EAAVA,EAAYhN,KAAKyN,IAChB9K,EAAAA,EAAAA,MAAC4H,EAAAA,EAAG,CAAea,QAAQ,OAAOsC,UAAW,EAAGC,GAAI,EAAE7K,SAAA,EACpDC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAAzH,UACFC,EAAAA,EAAAA,KAAC6K,EAAAA,EAAM,CACLC,IAAKtK,EAAAA,GAAaC,cAClBsK,QAAQ,UACR5K,GAAI,CACF6K,QAAS,YACT1C,OAAQ,GACRG,MAAO,IACP1I,UAEFC,EAAAA,EAAAA,KAACiL,EAAAA,EAAY,SAGjBrL,EAAAA,EAAAA,MAAC4H,EAAAA,EAAG,CAACa,QAAQ,OAAO6C,cAAc,SAASC,OAAO,MAAMC,KAAM,EAAErL,SAAA,EAC9DC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACoC,WAAY,IAAItL,SAAE2K,EAAKjE,YACnCzG,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACC,SAAU,GAAGnJ,SAAE2K,EAAKhE,eAChC9G,EAAAA,EAAAA,MAACqJ,EAAAA,EAAU,CAACC,SAAU,GAAGnJ,SAAA,EACtB2J,EAAAA,EAAAA,IAAmBgB,EAAK/D,WAAW,KAAG,IACtC+D,EAAK9D,SAA4B,eAAjB8D,EAAK9D,SAClB8C,EAAAA,EAAAA,IAAmBgB,EAAK9D,SACxB,yBAENhH,EAAAA,EAAAA,MAAC4H,EAAAA,EAAG,CAACa,QAAQ,OAAMtI,SAAA,EACjBC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACC,SAAU,GAAGnJ,SAAC,0CAC1BC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAAzH,UACFC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACC,SAAU,GAAGnJ,SAAE2K,EAAK5D,0BAItClH,EAAAA,EAAAA,MAAC4H,EAAAA,EAAG,CAAAzH,SAAA,EACFC,EAAAA,EAAAA,KAACsL,EAAAA,EAAU,CAACC,QAASA,KAAMC,OAhEb1F,EAgE4B4E,EAAKzM,KA/D3CmM,EAAkBtE,QAC9BwE,GAAqB,GAFCxE,KAgEqC,EAAA/F,UACjDC,EAAAA,EAAAA,KAACyL,EAAAA,EAAmB,OAEtBzL,EAAAA,EAAAA,KAACsL,EAAAA,EAAU,CAACC,QAASA,KAAMG,OArDXzN,EAqD4ByM,EAAKzM,QApDzD0N,EAAAA,EAAAA,GAAY,CACVC,WAAY3N,EACZ4N,cAAepB,IAHOxM,KAqDqC,EAAA8B,UACnDC,EAAAA,EAAAA,KAAC8L,EAAAA,EAAiB,WAnCdpB,EAAKzM,MAwChBoM,IACCrK,EAAAA,EAAAA,KAAC4F,EAAc,CACbE,OAAQqE,EACRtE,QAASA,IAAMyE,GAAqB,GACpCtH,cAAeM,MAGhB+G,GAA4C,KAAb,OAAVJ,QAAU,IAAVA,OAAU,EAAVA,EAAYvN,WAClCkD,EAAAA,EAAAA,MAAA0H,EAAAA,SAAA,CAAAvH,SAAA,EACEC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACC,SAAU,GAAI6C,MAAO,WAAWhM,UAC1CH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,CAAI,oOAEyC,UAG/CC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,KACRvH,EAAAA,EAAAA,KAACgM,EAAAA,EAAM,CACLjB,QAAQ,OACRgB,MAAM,YACNR,QAvFYU,KACR,OAAP3I,QAAO,IAAPA,GAAAA,EAAS+B,kBAId+E,EAAkB,MAClBE,GAAqB,IAJnBE,GAAe,EAIS,EAkFlB0B,WAAWlM,EAAAA,EAAAA,KAACmM,EAAAA,EAAuB,CAACjD,SAAS,UAC7C/I,GAAI,CAAEyK,GAAI,GAAI7K,UAEdC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAAAlJ,SAAC,iDAEdC,EAAAA,EAAAA,KAACoM,EAAAA,EAAQ,CACPC,KAAM9B,EACN+B,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,iBAAkB,IAClB5G,QAASA,IAAM2E,GAAe,GAAOzK,UAErCC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAK,CAACC,SAAS,QAAOrJ,UACrBC,EAAAA,EAAAA,KAACqJ,EAAAA,EAAU,CAAAtJ,UACTC,EAAAA,EAAAA,KAAA,UAAAD,SACGwK,GACC,0FASpB,CCnJe,SAASmC,IACtB,OACE1M,EAAAA,EAAAA,KAAAsH,EAAAA,SAAA,CAAAvH,UACEH,EAAAA,EAAAA,MAAC+M,EAAAA,EAAS,CAAC1O,GAAG,kBAAiB8B,SAAA,EAC7BC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACa,QAAQ,OAAOuE,eAAe,gBAAgB7D,WAAW,SAAQhJ,UACpEC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACa,QAAQ,OAAMtI,UACjBC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACoC,WAAY,IAAKnC,SAAU,GAAI2D,WAAY,EAAE9M,SAAC,gDAK9DC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,KACRvH,EAAAA,EAAAA,KAACgK,EAAc,QAIvB,CCZA,MA6BA,GA7B2B8C,KACzB,MAAM7L,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,KAEZ8B,EAAmB6J,EAAAA,GAAiB5J,QAElC9B,OAAQ+B,EAAU,UAAE7B,IAAcE,EAAAA,EAAAA,aAIxCyB,EAAkB,CAClBtB,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAGzD,MAAO,CACL8G,aACA7B,YACD,ECCH,GA3BiCyL,KAC/B,MAAM/L,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MACVC,OAAQ2D,EAAc,UAAEzD,IAAcE,EAAAA,EAAAA,cAI5CwD,IAAA,IAAEhH,EAAI/B,GAAK+I,EAAA,OAAK8H,EAAAA,GAAiB5H,OAAOlH,EAAI/B,EAAK,GAAE,CACnD0F,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACL0I,iBACAzD,YACD,ECGH,GA3BiC0L,KAC/B,MAAMhM,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MACVC,OAAQyI,EAAgB,UAAEvI,IAAcE,EAAAA,EAAAA,cAI7CxD,GAAO8O,EAAAA,GAAiBhD,OAAO9L,IAAK,CACrC2D,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACLwN,mBACAvI,YACD,E,2KCRH,MAAM2L,GAAW,CAAC,YAAa,WAEhB,SAASC,GAAa3N,GACnC,MAAM,IACJ4N,EAAG,QACHC,EAAO,KACPhB,EAAI,MACJiB,EAAK,YACLC,EAAW,MACXC,EAAK,WACLC,EAAU,aACVC,GACElO,GACE,SAAEmO,IAAaC,EAAAA,GAAAA,MACrBrR,QAAQsR,IAAI,MAAOT,GACnB7Q,QAAQsR,IAAI,UAAWR,GAEvB,MAAM7G,EAAgB6G,EAAQS,QAAO,CAACC,EAAKC,KACzCD,EAAIC,EAAOC,OAAS,GACbF,IACN,CAAC,GAEEG,GAAcC,EAAAA,EAAAA,UAAQ,KAC1B,MAAMjS,EAAO,IAAKkR,GAMlB,OALO,OAAHA,QAAG,IAAHA,GAAAA,EAAKzG,YACPzK,EAAKyK,WAAYU,EAAAA,EAAAA,IAAqB,OAAH+F,QAAG,IAAHA,OAAG,EAAHA,EAAKzG,UAAW,eAE9C,OAAHyG,QAAG,IAAHA,GAAAA,EAAKxG,UACP1K,EAAK0K,SAAUS,EAAAA,EAAAA,IAAqB,OAAH+F,QAAG,IAAHA,OAAG,EAAHA,EAAKxG,QAAS,eAC1C1K,CAAI,GACV,CAACkR,KAEE,QACJnH,EAAO,aACPG,EAAY,MACZD,EACAE,WAAW,OAAEC,KACXC,EAAAA,EAAAA,IAAQ,CACVC,cAAeA,IA0BjB,OANAzD,EAAAA,EAAAA,YAAU,KACHqK,GAAKjH,EAAMK,GAEhBL,EAAM+H,EAAY,GACjB,CAACd,KAGFxN,EAAAA,EAAAA,MAACwO,GAAAA,EAAM,CACL/B,KAAMA,EACNxG,QAAS0H,EACTzN,WAAS,EACTuO,SAAU,KACVC,WAAYX,EAAS5N,SAAA,EAErBC,EAAAA,EAAAA,KAACuO,GAAAA,EAAW,CACVpO,GAAI,CACFqO,UAAW,SACXnD,WAAY,IACZnC,SAAU,CAAEuF,GAAI,SAAU3G,GAAI,SAC9B/H,SAEDyN,KAEHxN,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,KACRvH,EAAAA,EAAAA,KAAC0O,GAAAA,EAAa,CAAA3O,UACZH,EAAAA,EAAAA,MAAC4H,EAAAA,EAAG,CAACrH,GAAI,CAAEwO,EAAG,GAAI5O,SAAA,EAChBC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACC,WAAS,EAACE,QAAS,EAAGD,GAAI,EAAE7H,SACxB,OAAPsN,QAAO,IAAPA,OAAO,EAAPA,EAASpQ,KACR,CAAC2R,EAAKC,IACW,QAAZ,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKX,SACHjO,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAAaxK,MAAI,EAAC4K,GAAI,GAAG/H,UAC5BC,EAAAA,EAAAA,KAACH,EAAAA,EAAW,CACVmI,QACEkF,GAAS4B,SAAY,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKX,QACrBjO,EAAAA,EAAAA,KAAC4I,EAAAA,EAAU,KAEX5I,EAAAA,EAAAA,KAACiI,EAAAA,EAAS,IAGdhC,QAASA,EACTK,OAAQA,EACRxG,WAAS,EACTJ,MAAU,OAAHkP,QAAG,IAAHA,OAAG,EAAHA,EAAKG,WACZ7G,KAAS,OAAH0G,QAAG,IAAHA,OAAG,EAAHA,EAAKX,MACX1E,WAAS,EACTpB,UAAQ,KAfD0G,QAqBnB7O,EAAAA,EAAAA,KAACwJ,EAAAA,EAAW,CACVpD,aAAcA,GArEAlK,IACtB,IAAK,IAAI8S,KAAO9S,EACd,GAAKA,EAAK+S,eAAeD,IAErB9B,GAAS4B,SAASE,GAAM,CAE1B,MAAME,GAAaxF,EAAAA,EAAAA,IAAmBxN,EAAK8S,IAC3C9S,EAAK8S,GAAOE,CACd,CAGK,OAAH9B,QAAG,IAAHA,GAAAA,EAAKnP,GAAIyP,EAAgB,OAAHN,QAAG,IAAHA,OAAG,EAAHA,EAAKnP,GAAI/B,GAC9BuR,EAAWvR,GAChBiK,EAAMK,GACN8G,GAAO,IAwDC1D,aAAcA,IAAM0D,aAMhC,CCzGA,MAoTA,GAxSsB9N,IACpB,MAAM,QACJ6N,EAAO,KACP8B,EAAI,WACJ1B,EAAU,aACVC,EAAY,aACZ0B,EAAY,QACZ9L,EAAO,MACPkK,KACG6B,GACD7P,GACG8P,EAAaC,IAAkB7L,EAAAA,EAAAA,UAAuB,KACtD8L,EAAaC,IAAkB/L,EAAAA,EAAAA,UAAuB,KACtDgM,EAAeC,IAAoBjM,EAAAA,EAAAA,UAA4B,CAAC,IAChEtH,EAAO2J,IAAYrC,EAAAA,EAAAA,UAAS,CAAEkM,KAAM,KAAMC,WAAY,QACtDC,EAAkBC,IAAuBrM,EAAAA,EAAAA,UAAS,CACvD2I,MAAM,EACNe,IAAK,QAED,SAAEO,IAAaC,EAAAA,GAAAA,OAErB7K,EAAAA,EAAAA,YAAU,KACRwM,GAAmB,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMzS,QAAS,EAAIyS,EAAO,IACzCM,GAAmB,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMzS,QAAS,EAAIyS,EAAO,GAAG,GAC3C,CAACA,IA+CJ,MA4BM1E,EAAuBxM,IAC3BsR,EAAeD,EAAYU,QAAQ5C,GAAQA,EAAInP,KAAOA,KACtDmR,EAAanR,EAAG,EAgEZgS,EAA8B,CAClC,CACEhC,MAAO,UACP2B,KAAM,UACNb,WAAY,sBACZtG,MAAO,IACPyH,cAAe,UACfC,WAAYlL,IAAkB,IAADmL,EAAA,IAAhB,GAAEnS,EAAE,IAAEmP,GAAKnI,EAGtB,OAFsC,QAAjBmL,EAAAV,EAAczR,UAAG,IAAAmS,OAAA,EAAjBA,EAAmBC,QAASC,GAAAA,GAAaC,KAGrD,EACLvQ,EAAAA,EAAAA,KAACwQ,GAAAA,EAAmB,CAClBC,MAAMzQ,EAAAA,EAAAA,KAAC0Q,GAAAA,EAAQ,IACfhR,MAAM,OACNS,GAAI,CACF4L,MAAO,gBAETR,QAASA,IA/FItN,KACvB0R,EAAiB,IAAKD,EAAe,CAACzR,GAAK,CAAEoS,KAAMC,GAAAA,GAAaK,OAAS,EA8FhDC,CAAgB3S,IAC3B,SAEN+B,EAAAA,EAAAA,KAACwQ,GAAAA,EAAmB,CAClBC,MAAMzQ,EAAAA,EAAAA,KAAC6Q,GAAAA,EAAU,IACjBnR,MAAM,SACNoR,UAAU,cACVvF,QAASA,IAtFMtN,KACzB0R,EAAiB,IACZD,EACH,CAACzR,GAAK,CAAEoS,KAAMC,GAAAA,GAAaK,KAAMI,qBAAqB,KAGtCzB,EAAYnI,MAAMiG,GAAQA,EAAInP,KAAOA,IACxC+S,OACbzB,EAAeD,EAAYU,QAAQ5C,GAAQA,EAAInP,KAAOA,IACxD,EA6EyBgT,CAAkBhT,GACjC8N,MAAM,WACF,WAIH,EACL/L,EAAAA,EAAAA,KAACwQ,GAAAA,EAAmB,CAClBC,MAAMzQ,EAAAA,EAAAA,KAACkR,GAAAA,EAAQ,IACfxR,MAAM,OACNoR,UAAU,cACVvF,QAASA,IACPoC,EA1HgBP,KAC1B2C,EAAoB,CAAE1D,MAAM,EAAMe,IAAKA,GAAM,EAyHxB+D,CAAmB/D,GAtHjBnP,KACvB0R,EAAiB,IAAKD,EAAe,CAACzR,GAAK,CAAEoS,KAAMC,GAAAA,GAAaC,OAAS,EAqH1Ba,CAAgBnT,GAEvD8N,MAAM,WACF,SAEN/L,EAAAA,EAAAA,KAACwQ,GAAAA,EAAmB,CAClBC,MAAMzQ,EAAAA,EAAAA,KAACqR,GAAAA,EAAU,IACjB3R,MAAM,SACN6L,QAASA,IAtHQtN,MACzB0N,EAAAA,EAAAA,GAAY,CACVC,WAAY3N,EACZ4N,cAAepB,GACf,EAkHqB6G,CAAkBrT,GACjC8N,MAAM,WACF,UAEP,IAKDwF,EAAyB,IAAIlE,KAAY4C,GAE/C,OACErQ,EAAAA,EAAAA,MAAA0H,EAAAA,SAAA,CAAAvH,SAAA,EACEC,EAAAA,EAAAA,KAACwR,GAAAA,GAAQ,CACPrC,KAAMG,EACNjC,QAASkE,EACTE,SAAS,MACT/B,cAAeA,EACfgC,sBAnE6BC,IACjChC,EAAiBgC,EAAiB,EAmE9BC,cA9JsDC,CAC1DC,EACAC,KAEID,EAAOzT,SAAW2T,GAAAA,EAAuBC,cAC3CF,EAAMG,qBAAsB,EAC9B,EAyJIC,iBAlHoBC,IACxB,IAAIC,EACJ,MAAMC,EAAc9C,EAAYrI,MAAMiG,GAAQA,EAAInP,KAAOmU,EAAOnU,KAE1DsU,EAAgBlF,EACnB2C,QACEpB,GACc,SAAbA,EAAIgB,QACF7I,IAAMqL,EAAOxD,EAAIX,QAAQuE,WAAmC,OAAtBJ,EAAOxD,EAAIX,UAEtDhR,KAAK2R,GAAQA,EAAIG,aAEd0D,EAAgBpF,EACnB2C,QAAQpB,GAA8B,KAAtBwD,EAAOxD,EAAIX,SAC3BhR,KAAK2R,GAAQA,EAAIG,aAEpB,IAAK,MAAMH,KAAOvB,EACC,SAAbuB,EAAIgB,OACNwC,EAAOxD,EAAIX,OAASlH,IAAMqL,EAAOxD,EAAIX,QAAQyE,OAAO,eAIxD,GAAID,EAAc/V,OAAS,EAEzB,YADAqJ,EAAS,CAAE6J,KAAM,UAAWC,WAAW,GAAD8C,OAAKF,EAAcG,KAAK,SAGhE,GAAIL,EAAc7V,OAAS,EAEzB,YADAqJ,EAAS,CAAE6J,KAAM,UAAWC,WAAW,GAAD8C,OAAKJ,EAAcK,KAAK,SAI3DN,GAIHD,EAAa,IAAKD,EAAQpB,OAAO,GACjCtD,EAAa0E,EAAOnU,GAAIoU,KAJxBA,EAAa,IAAKD,EAAQpB,OAAO,GACjCvD,EAAW,IAAK2E,KAKlB,MAAMS,EAAUvD,EAAYrS,KAAKmQ,GAC/BA,EAAInP,KAAOmU,EAAOnU,GAAKoU,EAAajF,IAGtC,OADAmC,EAAesD,GACRR,CAAU,EAyEbS,mBAAiB,EACjBC,4BAA0B,EAC1BC,aAAc,CACZC,WAAY,CACVC,gBAAiB,CACfC,SAAU,KAIhBC,MAAO,CACLC,QAvNR,SAAqB7T,GACnB,MAAM,eAAE+P,EAAc,iBAAEI,GAAqBnQ,EA6B7C,OACEQ,EAAAA,EAAAA,KAACsT,GAAAA,EAAoB,CAAAvT,UACnBC,EAAAA,EAAAA,KAACgM,EAAAA,EAAM,CACLD,MAAM,YACNG,WAAWlM,EAAAA,EAAAA,KAACuT,GAAAA,EAAO,IACnBhI,QAhCiBiI,KAAO,IAADC,EAC3B,GAAI9F,EAEF,YADAoC,GAAoB,MAAS1D,MAAM,EAAMe,IAAK,SAKhD,GAAY,OAAP9J,QAAO,IAAPA,IAAAA,EAASsB,OAEZ,YADAmB,EAAS,CAAE6J,KAAM,YAAaC,WAAY,OAI5C,GAAkB,QAAlB4D,EAAInE,EAAY,UAAE,IAAAmE,GAAdA,EAAgBzC,MAAO,OAE3B,MAAM/S,EAvDK,GAAA0U,OACZe,KAAKC,MAAsB,IAAhBD,KAAKE,WAAiBjB,OAAGe,KAAKE,SACzCC,SAAS,IACTC,UAAU,EAAG,IAqDN1B,EAAS,CAAEnU,KAAI+S,OAAO,GACtB+C,EAAW1G,EAAQS,QAAO,CAACC,EAAKC,KAC7B,IAAKD,EAAK,CAACC,EAAOC,OAAQ,MAChCmE,GAEH7C,GAAgByE,GAAY,CAACD,KAAaC,KAC1CrE,GAAkBsE,IAAQ,IACrBA,EACH,CAAChW,GAAK,CAAEoS,KAAMC,GAAAA,GAAaC,KAAM2D,aAAc7G,EAAQ,GAAGY,UACzD,EAQyBlO,UAExBC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAAC9I,GAAI,CAAEkL,WAAY,IAAKnC,SAAU,IAAKnJ,SAAC,wBAM3D,GA8KMoU,UAAW,CACTd,QAAS,CACP9D,iBACAI,qBAGJyE,aAAcA,IAAM,OACpBjU,GAAI,CACFkU,UAAW,IACX,uDAAwD,CAAE5M,GAAI,OAC9D,wDAAyD,CACvDA,GAAI,QAEN,2DAA4D,CAC1DA,GAAI,QAEN,iCAAkC,CAAE4D,WAAY,SAE9CgE,KAENrP,EAAAA,EAAAA,KAACoM,EAAAA,EAAQ,CACPC,KAAW,OAALjQ,QAAK,IAALA,OAAK,EAALA,EAAOwT,KACbtD,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,iBAAkB,IAClB5G,QAASA,IAAME,EAAS,CAAE6J,KAAM,KAAMC,WAAY,OAAQ9P,UAE1DH,EAAAA,EAAAA,MAACuJ,EAAAA,EAAK,CAACC,SAAS,QAAOrJ,SAAA,EACrBH,EAAAA,EAAAA,MAACyJ,EAAAA,EAAU,CAAAtJ,SAAA,CACQ,aAAX,OAAL3D,QAAK,IAALA,OAAK,EAALA,EAAOwT,OAAsB,8DACb,aAAX,OAALxT,QAAK,IAALA,OAAK,EAALA,EAAOwT,OAAsB,4CAC9B5P,EAAAA,EAAAA,KAAA,UAAAD,SACmB,eAAX,OAAL3D,QAAK,IAALA,OAAK,EAALA,EAAOwT,OACN,mFAGN5P,EAAAA,EAAAA,KAAA,UAAAD,SAAc,OAAL3D,QAAK,IAALA,OAAK,EAALA,EAAOyT,kBAGnBlC,IACC3N,EAAAA,EAAAA,KAACmN,GAAY,CACXC,IAAK0C,EAAiB1C,IACtBf,KAAMyD,EAAiBzD,KACvBiB,MAAOA,IAAMyC,GAAoB,MAAS1D,MAAM,EAAOe,IAAK,SAC5DI,MAAOA,EACPC,WAAYA,EACZC,aAAcA,EACdL,QAASA,MAGZ,EC5TDiH,GAAkB,CACtB,8BAA+B,CAC7BhM,OAAQ,OACRG,MAAO,QAET,qDAAsD,CACpD8L,SAAU,MACVC,YAAa,QAEf,wDAAyD,CACvDD,SAAU,EACVE,QAAS,GAEX,sDAAuD,CACrDvL,SAAU,OACVwL,aAAc,EACdC,YAAa,WAIF,SAASC,KACtB,MAAM,SAAEjH,IAAaC,EAAAA,GAAAA,OACf,QAAEtK,EAAO,WAAEnB,IAAeC,EAAAA,EAAAA,MAC1B,WAAEgB,GAAe0J,MACjB,eAAE9H,GAAmBgI,MACrB,iBAAElD,GAAqBmD,MAEtBkC,EAAM0F,IAAWnR,EAAAA,EAAAA,UAAuB,KACxCtH,EAAO2J,IAAYrC,EAAAA,EAAAA,UAAS,CAAEsC,OAAO,EAAO1J,QAAS,MAS5DyG,EAAAA,EAAAA,YAAU,KAAO,IAAD+R,EACd,MAAM3F,EAAc,OAAP7L,QAAO,IAAPA,OAAO,EAAPA,EAASyR,uBAChBvF,EAAcL,EAAOnT,KAAKgZ,MAAMhZ,KAAKC,UAAUkT,IAAS,GAC1DK,GAVeL,KACnBA,EAAKlS,KAAKmQ,IACRA,EAAIzG,WAAY+C,EAAAA,EAAAA,IAAmB0D,EAAIzG,WACvCyG,EAAIxG,SAAU8C,EAAAA,EAAAA,IAAmB0D,EAAIxG,QAAQ,GAC7C,EAMeqO,CAAYzF,GAC7BqF,GAAe,OAAPvR,QAAO,IAAPA,GAA+B,QAAxBwR,EAAPxR,EAASyR,8BAAsB,IAAAD,OAAxB,EAAPA,EAAiCpY,QAAS,EAAI8S,EAAc,GAAG,GACtE,CAAClM,IAEJ,MAAM4R,EAAchZ,IAEhB6K,IAAM7K,EAAKyK,UAAW,cAAcK,QAClCD,IAAM7K,EAAK0K,QAAS,iBAGtBb,EAAS,CAAEC,OAAO,EAAM1J,QAAS,2EAC1B,GAoCL6Y,EAAmBA,CAACrD,EAAQsD,KAChCtD,EAAOuD,IAAIC,iBAAiB,IACvBxD,EACH1T,MAAOgX,GACP,EAGE/H,EAAwB,CAK5B,CACEY,MAAO,aACPc,WAAY,sDACZtG,MAAQkF,EAAiB,IAAN,IACnB4H,UAAU,GAEZ,CACEtH,MAAO,iBACPc,WAAY,qBACZtG,MAAO,IACP8M,UAAU,GAEZ,CACEtH,MAAO,aACPc,WAAY,6BACZtG,MAAO,IACP8M,UAAU,GAEZ,CACEtH,MAAO,YACPc,WAAY,yBACZa,KAAM,OACNnH,MAAO,IACP8M,UAAU,EACVC,YAAc1D,GACL/K,IAAM+K,EAAO1T,MAAO,cAAcqX,SAE3CC,eAAe5D,IACNpI,EAAAA,EAAAA,IAAmBoI,EAAO1T,OAEnCuX,eAAiB7D,IAEb9R,EAAAA,EAAAA,KAAC4I,EAAAA,EAAU,CACTzI,GAAImU,GACJsB,SAAWC,GAAMV,EAAiBrD,EAAQ+D,GAC1CzX,MAAO0T,EAAO1T,SAKtB,CACE6P,MAAO,UACPc,WAAY,mBACZa,KAAM,OACNnH,MAAO,IACP8M,UAAU,EACVC,YAAc1D,GACL/K,IAAM+K,EAAO1T,MAAO,cAAcqX,SAE3CC,eAAe5D,IACNpI,EAAAA,EAAAA,IAAmBoI,EAAO1T,OAEnCuX,eAAiB7D,IAEb9R,EAAAA,EAAAA,KAAC4I,EAAAA,EAAU,CACTzI,GAAImU,GACJsB,SAAWC,GAAMV,EAAiBrD,EAAQ+D,GAC1CzX,MAAO0T,EAAO1T,UAOxB,OACEwB,EAAAA,EAAAA,MAAC+M,EAAAA,EAAS,CAAC1O,GAAG,YAAW8B,SAAA,EACvBC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACa,QAAQ,OAAOuE,eAAe,gBAAgB7D,WAAW,SAAQhJ,UACpEC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACa,QAAQ,OAAMtI,UACjBC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACoC,WAAY,IAAKnC,SAAU,GAAI2D,WAAY,EAAE9M,SAAC,wCAK9DC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,KACRvH,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACsO,GAAI,EAAGC,GAAI,EAAEhW,UAChBC,EAAAA,EAAAA,KAACgW,GAAY,CACX1S,QAASA,EACT6L,KAAMA,EACN9B,QAASA,EACTG,MAAO,iCACPC,WA3HyBvR,IAC3BgZ,EAAWhZ,IACbkH,EAAWlH,EAKb,EAqHMwR,aAnH0BuI,CAAChY,EAAI/B,KACjCgZ,EAAWhZ,IACb8I,EAAe,CAAC/G,EAAI/B,GAUtB,EAwGMkT,aAtG2BnR,IACjC6L,EAAiB7L,EAAG,EAsGd+U,aAAc,CACZC,WAAY,CACVC,gBAAiB,CACfC,SAAU,IAGd9F,QAAS,CACP6I,sBAAuB,CACrBC,gBAAiBxI,EACjByI,YAAazI,EACbhH,WAAYgH,EACZ/G,SAAU+G,EACV1P,IAAI,UAOd+B,EAAAA,EAAAA,KAACoM,EAAAA,EAAQ,CACPC,KAAW,OAALjQ,QAAK,IAALA,OAAK,EAALA,EAAO4J,MACbsG,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,iBAAkB,IAClB5G,QAASA,IAAME,EAAS,CAAEC,OAAO,EAAO1J,QAAS,KAAMyD,UAEvDH,EAAAA,EAAAA,MAACuJ,EAAAA,EAAK,CAACC,SAAS,QAAOrJ,SAAA,EACrBC,EAAAA,EAAAA,KAACqJ,EAAAA,EAAU,CAAAtJ,UACTC,EAAAA,EAAAA,KAAA,UAAAD,SAAc,OAAL3D,QAAK,IAALA,OAAK,EAALA,EAAOE,YACL,oGAMvB,C,gBCxOA,MA6BA,GA7BwB+Z,KACtB,MAAMpV,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,KAEZ8B,EAAmBoT,EAAAA,GAAcnT,QAE/B9B,OAAQ+B,EAAU,UAAE7B,IAAcE,EAAAA,EAAAA,aAIxCyB,EAAkB,CAClBtB,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAGzD,MAAO,CACL8G,aACA7B,YACD,ECCH,GA3B8BgV,KAC5B,MAAMtV,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MACVC,OAAQ2D,EAAc,UAAEzD,IAAcE,EAAAA,EAAAA,cAI5CwD,IAAA,IAAEhH,EAAI/B,GAAK+I,EAAA,OAAKqR,EAAAA,GAAcnR,OAAOlH,EAAI/B,EAAK,GAAE,CAChD0F,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACL0I,iBACAzD,YACD,ECGH,GA3B8BiV,KAC5B,MAAMvV,GAAcC,EAAAA,EAAAA,mBACd,MAAEC,IAAUC,EAAAA,EAAAA,MACVC,OAAQyI,EAAgB,UAAEvI,IAAcE,EAAAA,EAAAA,cAI7CxD,GAAOqY,EAAAA,GAAcvM,OAAO9L,IAAK,CAClC2D,UAAY/D,IACS,MAAfA,EAAIK,QACNiD,EAAMW,QAAQ,CAAEC,QAASlE,EAAIvB,UAC7B2E,EAAYY,kBAAkB,sBAE9BV,EAAM/E,MAAM,CAAE2F,QAASlE,EAAIvB,SAC7B,EAEF0F,QAAU5F,IACR+E,EAAM/E,MAAM,CAAE2F,QAAS3F,EAAMP,SAASK,KAAKI,SAAU,IAIzD,MAAO,CACLwN,mBACAvI,YACD,ECmFH,SAlGA,WACE,MAAM,SAAEoM,IAAaC,EAAAA,GAAAA,OACf,QAAEtK,IAAYlB,EAAAA,EAAAA,MACd,WAAEgB,GAAeiT,MACjB,eAAErR,GAAmBuR,MACrB,iBAAEzM,GAAqB0M,MAEtBC,EAASC,IAAchT,EAAAA,EAAAA,WAAS,IAsBhCyL,EAAM0F,IAAWnR,EAAAA,EAAAA,UAAuB,KAE/CX,EAAAA,EAAAA,YAAU,KACG,OAAPO,QAAO,IAAPA,GAAAA,EAASqT,iBAAmBrT,EAAQqT,gBAAgBja,OAAS,GAC/DmY,EAAQvR,EAAQqT,gBAClB,GACC,CAACrT,IAEJ,MAAM+J,EAAwB,CAC5B,CACEY,MAAO,aACPc,WAAY,sBACZtG,MAAQkF,EAAiB,IAAN,IACnB4H,UAAU,GAEZ,CACEtH,MAAO,QACPc,WAAY,2CACZtG,MAAO,IACP8M,UAAU,IAId,OAAIkB,GAEAzW,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACrH,GAAI,CAAEsI,MAAO,QAAS1I,UACzBC,EAAAA,EAAAA,KAAC4W,GAAAA,EAAc,OAMnBhX,EAAAA,EAAAA,MAAC+M,EAAAA,EAAS,CAAC1O,GAAG,eAAc8B,SAAA,EAC1BC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACa,QAAQ,OAAOuE,eAAe,gBAAgB7D,WAAW,SAAQhJ,UACpEC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACa,QAAQ,OAAMtI,UACjBC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAACoC,WAAY,IAAKnC,SAAU,GAAI2D,WAAY,EAAE9M,SAAC,gDAK9DC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,KACRvH,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACsO,GAAI,EAAGC,GAAI,EAAEhW,UAChBC,EAAAA,EAAAA,KAACgW,GAAY,CACX7G,KAAMA,EACN9B,QAASA,EACTG,MAAO,mCACPC,WAlEqBhS,UAC3Bib,GAAW,GACX,MAAMlT,EAAU,IAAKtH,GACrBkH,EAAWI,GACXkT,GAAW,EAAM,EA+DXhJ,aA5DuBjS,MAAOwC,EAAI/B,KACxCwa,GAAW,GACX,MAAMlT,EAAU,IAAKtH,GACrB8I,EAAe,CAAC/G,EAAIuF,IACpBkT,GAAW,EAAM,EAyDXtH,aAtDuB3T,UAC7Bib,GAAW,GACX5M,EAAiB7L,GACjByY,GAAW,EAAM,EAoDXpT,QAASA,EACT0P,aAAc,CACZC,WAAY,CACVC,gBAAiB,CACfC,SAAU,IAGd9F,QAAS,CACP6I,sBAAuB,CACrBW,OAAQlJ,EACR1P,IAAI,WAQpB,E,8JC5EA,MAAM6Y,GAAQ7R,IAAA,IAAC,SAAElF,GAAUkF,EAAA,OACzBjF,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAACwD,QAAQ,QAAQ7K,GAAI,CAAEyH,GAAI,EAAGmP,UAAW,uBAAwBhX,SAClEA,GACG,EAGFiX,GAAW,CACf,CACEvG,MAAMzQ,EAAAA,EAAAA,KAACiX,GAAAA,EAAsB,CAAC9W,GAAI,CAAEsI,MAAO,MAC3C+E,MAAO,6BACPvP,GAAI,YAEN,CACEwS,MAAMzQ,EAAAA,EAAAA,KAACkX,GAAAA,EAAe,CAAC/W,GAAI,CAAEsI,MAAO,MACpC+E,MAAO,qBACPvP,GAAI,WAEN,CACEwS,MAAMzQ,EAAAA,EAAAA,KAACmX,GAAAA,EAAsB,CAAChX,GAAI,CAAEsI,MAAO,MAC3C+E,MAAO,qCACPvP,GAAI,mBAEN,CACEwS,MAAMzQ,EAAAA,EAAAA,KAACoX,GAAAA,EAAkB,CAACjX,GAAI,CAAEsI,MAAO,MACvC+E,MAAO,iCACPvP,GAAI,aAEN,CACEwS,MAAMzQ,EAAAA,EAAAA,KAACqX,GAAAA,EAA4B,CAAClX,GAAI,CAAEsI,MAAO,MACjD+E,MAAO,yCACPvP,GAAI,iBAIO,SAASqZ,KACtB,MAAOC,EAAaC,IAAkB9T,EAAAA,EAAAA,WAAS,IACxC+T,EAAUC,IAAehU,EAAAA,EAAAA,WAAS,IAClCiU,EAAaC,IAAkBlU,EAAAA,EAAAA,WAAS,IACzC,cAAEV,EAAa,UAAEzB,IAAcU,EAAAA,GAAAA,MAC/B,QAAEqB,EAAO,WAAEnB,IAAeC,EAAAA,EAAAA,MAC1B,aAAEd,IAAiBN,EAAAA,EAAAA,KACnB6W,GAAWC,EAAAA,GAAAA,OAEX,SAAEnK,IAAaC,EAAAA,GAAAA,MA8CrB,OAVA7K,EAAAA,EAAAA,YAAU,KACJ0U,GACFI,EAAS,gCACX,GACC,CAACJ,KAEJ1U,EAAAA,EAAAA,YAAU,KACRZ,EAAWa,EAAc,GACxB,CAACA,IAEAzB,GAAkBvB,EAAAA,EAAAA,KAAC+X,GAAAA,EAAc,KAEnCnY,EAAAA,EAAAA,MAAA0H,EAAAA,SAAA,CAAAvH,SAAA,EACEH,EAAAA,EAAAA,MAAC+M,EAAAA,EAAS,CAAA5M,SAAA,EACRC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CAAC7I,GAAI,EAAG8I,SAAU,GAAImC,WAAY,IAAItL,SAAC,mDAGlDH,EAAAA,EAAAA,MAAC8H,EAAAA,GAAI,CAACC,WAAS,EAACS,cAAe,EAAGhI,GAAI,EAAEL,SAAA,EACtCC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACxK,MAAI,EAAC4K,GAAK6F,EAAgB,GAAL,GAAQ5N,SAChCiX,GAAS/Z,KAAK+a,IACbpY,EAAAA,EAAAA,MAACkX,GAAK,CAAA/W,SAAA,CACY,aAAfiY,EAAQ/Z,KAAqB+B,EAAAA,EAAAA,KAACiY,EAAAA,EAAQ,IACvB,YAAfD,EAAQ/Z,KAAoB+B,EAAAA,EAAAA,KAACkY,EAAO,IACrB,oBAAfF,EAAQ/Z,KAA4B+B,EAAAA,EAAAA,KAAC0M,EAAU,IAChC,cAAfsL,EAAQ/Z,KAAsB+B,EAAAA,EAAAA,KAAC4U,GAAS,IACzB,iBAAfoD,EAAQ/Z,KAAyB+B,EAAAA,EAAAA,KAAC2E,GAAM,MAL/BqT,EAAQ/Z,SASxB+B,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CACHxK,MAAI,EACJ4K,GAAK6F,EAAe,EAAJ,EAChBxN,GAAI,CAAEkI,QAAS,CAAEP,GAAI,OAAQC,GAAI,WAAahI,UAE9CC,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CACFwD,QAAQ,QACR7K,GAAI,CAAE4W,UAAW,uBACjBtO,MAAO,IACP0P,SAAS,SACTC,IAAK,GAAGrY,UAERC,EAAAA,EAAAA,KAACqY,GAAAA,EAAe,CAACrB,SAAUA,cA5BpB,WAiCfpX,EAAAA,EAAAA,MAAC0Y,GAAAA,EAAS,CAAAvY,SAAA,EACRC,EAAAA,EAAAA,KAACgM,EAAAA,EAAM,CACLT,QApDO9P,UACbic,GAAY,EAAK,EAoDX3M,QAAQ,WACRgB,MAAM,YACN5L,GAAI,CAAEsI,MAAO,KAAM1I,SACpB,mBAGDC,EAAAA,EAAAA,KAACgM,EAAAA,EAAM,CAACjB,QAAQ,YAAY5K,GAAI,CAAEsI,MAAO,KAAO8C,QAzFjC9P,UAEnB,GADAmc,GAAe,GACJ,OAAPtU,QAAO,IAAPA,GAAAA,EAASsB,OAAQ,CACnB,MAAM2T,GAAgBC,EAAAA,GAAAA,GAAelV,EAAS,UACxCmV,QAAwBC,EAAAA,GAAAA,GAC5B1d,GAAAA,GACA,CAACud,GACD,KACA,CACE,GAAM,EACN,GAAM,IAGJI,QAA0BD,EAAAA,GAAAA,GAC9Brd,GAAAA,GACAod,GAEIG,GAAWC,EAAAA,GAAAA,GAAaF,GAC9BrX,EAAa,IACRgC,EACHsV,UAAiB,OAAPtV,QAAO,IAAPA,OAAO,EAAPA,EAASwV,QAAS,KAAOF,IAErClB,GAAY,GACZE,GAAe,EACjB,MACEJ,GAAe,GACfI,GAAe,EACjB,EA8D0E7X,SAAC,iCAIzEC,EAAAA,EAAAA,KAACoM,EAAAA,EAAQ,CACPC,KAAMkL,EACNjL,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,iBAAkB,IAClB5G,QAASA,IAAM2R,GAAe,GAAOzX,UAErCC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAK,CAACC,SAAS,QAAOrJ,UACrBC,EAAAA,EAAAA,KAACqJ,EAAAA,EAAU,CAAAtJ,SACRwX,GAAe,sDAItBvX,EAAAA,EAAAA,KAAC+Y,EAAAA,EAAQ,CACP5Y,GAAI,CAAE4L,MAAO,OAAQiN,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAC9D7M,KAAMsL,EAAY5X,UAElBC,EAAAA,EAAAA,KAAC+X,GAAAA,EAAc,QAIvB,C,2CChMO,MAAMc,EAAeA,CAACJ,EAAwBU,KAAoB,IAADC,EACtE,GAAIX,EAAgB/b,QAAU,IAAM4F,QAAQmW,EAAgB,IAAK,MAAO,GAExE,MAAM1a,EAAS0a,EAAgB,GAC/B,IAAK1a,EAAQ,MAAO,GAEpB,MAAMsb,EAAmB,OAANtb,QAAM,IAANA,OAAM,EAANA,EAAQub,QAAQ,KAC7BC,EAAiB,OAANxb,QAAM,IAANA,OAAM,EAANA,EAAQyb,YAAY,KACrC,QAAmB9a,IAAf2a,QAAyC3a,IAAb6a,EAAwB,MAAO,GAE/D,IAAoB,IAAhBF,EAEF,OADA9c,QAAQH,MAAM,+CACP,GAGT,IAAkB,IAAdmd,EAEF,OADAhd,QAAQH,MAAM,+CACP,GAIT,MAAMqd,EAAwB,OAAN1b,QAAM,IAANA,GACe,QADTqb,EAANrb,EACpB+V,UAAUuF,EAAa,EAAGE,UAAS,IAAAH,OADT,EAANA,EAEpBM,QAAQ,OAAQ,IAQdC,GAL4B,OAAfF,QAAe,IAAfA,OAAe,EAAfA,EAAiBC,QAAQ,2BAA4B,KAGxCE,MAAM,KAELC,MAAM,EAAG,IAC1C,OAAkB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAa/G,KAAK,IAAI,EAU/B,MAAMkH,EAAmBA,CACvBxW,EACAyW,EACAC,KAGA,GAAoB,WAAhBD,EAA0B,CAAC,IAADE,EAC5B,MAAMC,EAAc5W,EACpB,MAAO,CACLmD,SAAqB,OAAXyT,QAAW,IAAXA,OAAW,EAAXA,EAAazT,SACvB9C,WAAuB,OAAXuW,QAAW,IAAXA,OAAW,EAAXA,EAAavW,WACzB0B,iBAA6B,OAAX6U,QAAW,IAAXA,OAAW,EAAXA,EAAa7U,iBAAiBpI,KAAKkH,IAC5C,CACLsC,SAAUtC,EAAWsC,SACrBK,eAAgB3C,EAAW2C,mBAG/BiO,uBAAmC,OAAXmF,QAAW,IAAXA,OAAW,EAAXA,EAAanF,uBAAuB9X,KACzDkd,GAAcA,EAAUhE,iBAE3BQ,gBAA4B,OAAXuD,QAAW,IAAXA,GAA4B,QAAjBD,EAAXC,EAAavD,uBAAe,IAAAsD,OAAjB,EAAXA,EAA8Bhd,KAC5CgH,GAAWA,EAAOmS,aAGzB,CACE,MAAO,CACL3P,SAAiB,OAAPnD,QAAO,IAAPA,OAAO,EAAPA,EAASmD,SACnB9C,WAAmB,OAAPL,QAAO,IAAPA,OAAO,EAAPA,EAASK,WACrByW,UAAWJ,EAEf,EAIK,SAASxB,EACd6B,EACAN,EACAC,GAGA,OADsBF,EAAiBO,EAAQN,EAAaC,EAE9D,C","sources":["GPT/roles.ts","GPT/sendChatGPTRequest.ts","components/SelectInput/index.tsx","constants/uploadFileRule.ts","modules/jobProfile/onlineProfile/hooks/useMutateUpdateOnlineProfile.ts","modules/jobProfile/onlineProfile/hooks/useQueryOnlineProfile.ts","modules/jobProfile/onlineProfile/hooks/useMutateOnlineProfile.ts","modules/jobProfile/onlineProfile/components/General/index.tsx","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateExperience.ts","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateUpdateExperience.ts","modules/jobProfile/onlineProfile/hooks/useWorkExperience.ts","modules/jobProfile/onlineProfile/components/Experience/EditWork.tsx","modules/jobProfile/onlineProfile/components/Experience/hooks/useMutateDeleteExperience.ts","modules/jobProfile/onlineProfile/components/Experience/ViewWork.tsx","modules/jobProfile/onlineProfile/components/Experience/index.tsx","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateEducation.ts","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateUpdateEducation.ts","modules/jobProfile/onlineProfile/components/Education/hooks/useMutateDeleteEducation.ts","components/EditDataGrid/EditFormOnMobile.tsx","components/EditDataGrid/index.tsx","modules/jobProfile/onlineProfile/components/Education/index.tsx","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateDegree.ts","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateUpdateDegree.ts","modules/jobProfile/onlineProfile/components/Degree/hooks/useMutateDeleteDegree.ts","modules/jobProfile/onlineProfile/components/Degree/index.tsx","modules/jobProfile/onlineProfile/index.tsx","utils/keywords.ts"],"sourcesContent":["export const cvAnalysist = `Bây giờ, bạn là một chuyên gia lâu năm trong lĩnh vực Nhân sự. Bạn có khả năng phân tích từ khóa quan trọng trong hồ sơ xin việc. Tôi cần xác định những yếu tố quan trọng trong hồ sơ xin việc sau. Hãy liệt kê 10 từ khóa quan trọng liên quan đến công việc của trong nội dung hồ sơ tôi cung cấp. Các từ khóa này bao gồm cả kỹ năng cứng và mềm, cũng như kinh nghiệm và trình độ chuyên môn. Sắp xếp chúng theo mức độ quan trọng dựa trên tần số xuất hiện trong phần mô tả công việc và yêu cầu công việc. Hãy chú ý những kỹ năng chuyên môn thường theo sau các cụm từ như 'có hiểu biết', 'thành thạo', 'có kinh nghiệm', 'có kiến thức về' để xác định từ khóa kĩ năng cứng (kĩ năng chuyên môn). Đồng thời, cũng phải chú ý tới tên các chứng chỉ, chuyên ngành để xác định từ khóa về trình độ chuyên môn. Ngoài ra, tìm các mô tả về tính cách, cách hành xử, thái độ và sức khỏe của con người để xác định từ khóa về kỹ năng mềm. Kết quả trả về dưới dạng mảng các chuỗi từ khóa (nếu không tìm được từ khóa nào thì trả về danh sách rỗng []). Lưu ý rằng: Mỗi từ khóa tìm được không được quá 20 kí tự.\n***Quan trọng: Câu trả lời của bạn (ChatGPT) chứa 10 từ khóa và câu trả lời là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ về câu trả lời minh họa là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]\nNội dung hồ sơ xin việc cung cấp như sau:\n`;\n\nexport const jobAnalysist = `Bây giờ, bạn là một chuyên gia lâu năm trong lĩnh vực Nhân sự. Bạn có khả năng phân tích từ khóa quan trọng trong tin tuyển dụng. Tôi cần xác định những yếu tố mà nhà tuyển dụng quan tâm trong tin tuyển dụng sau. Hãy liệt kê 10 từ khóa quan trọng liên quan đến công việc của trong nội dung tin tuyển dụng tôi cung cấp. Các từ khóa này bao gồm cả kỹ năng cứng và mềm, cũng như kinh nghiệm chuyên môn. Sắp xếp chúng theo mức độ quan trọng dựa trên tần số xuất hiện trong phần mô tả công việc và yêu cầu công việc. Hãy chú ý những kỹ năng chuyên môn thường theo sau các cụm từ như 'có hiểu biết', 'thành thạo', 'có kinh nghiệm', 'có kiến thức về' để tìm ra từ khóa kĩ năng cứng (kĩ năng chuyên môn). Ngoài ra, tìm các mô tả về tính cách, cách hành xử, thái độ và sức khỏe của con người để tìm ra từ khóa về kỹ năng mềm. Kết quả trả về dưới dạng mảng các chuỗi từ khóa, viết hoa chữ cái đầu tiên của mỗi cụm từ khóa (nếu không tìm được từ khóa nào thì trả về danh sách rỗng []). Lưu ý rằng: Mỗi từ khóa tìm được không được quá 20 kí tự.\n***Quan trọng: Câu trả lời của bạn (ChatGPT) là có duy nhất 1 danh sách các từ khóa sau khi dịch sang tiếng Việt và câu trả lời là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ về câu trả lời minh họa là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]\nNội dung tin tuyển dụng cung cấp như sau:\n`;\n\nexport const RoundOneCheck = `Bây giờ, bạn là một chuyên gia phân tích hồ sơ xin việc.\nHãy đọc hồ sơ xin việc và yêu cầu tuyển dụng sau đó so sánh và đánh giá xem thông tin emplyee_Profile có phù hợp với thông tin tuyển dụng hay không. Hãy đánh giá xem hồ sơ xin việc theo các tiêu chí sau.\n- 1. Ngành nghề trong hồ sơ xin việc phải có ít nhất 1 ngành nghề liên quan tới ngành nghề trong danh sách các ngành nghề trong yêu cầu tuyển dụng thì mới đạt yêu cầu. (Ví dụ Kỹ sư phần mềm, Công nghệ thông tin, Khoa học Máy tính, Web, Frontend, Backend... là mức độ liên quan cao; Quảng cáo, sale, bán sỉ, bán lẻ, Marketing, Bán hàng, Kinh doanh... là mức độ liên quan cao).\n- 2. Trình độ trong hồ sơ xin việc phải cao hơn hoặc bằng với trình độ trong yêu cầu tuyển dụng thì mới đạt yêu cầu.\n- 3. kinh nghiệm trong hồ sơ xin việc phải cao hơn kinh nghiệm trong yêu cầu tuyển dụng thì mới đạt yêu cầu.\n* result chỉ có thể là 1 trong 2 con số -10 hoặc 30.\n* Nếu đạt hết TẤT CẢ 4 tiêu chí trên thì result là con số 30. Ví dụ result là: 30\n* Nếu có bất kì 1 tiêu chí nào không đạt yêu cầu thì dừng phân tích ngay, đồng thời trả ra result là con số -10. Ví dụ result là: -10\n***Lưu ý quan trọng: câu trả lời của bạn (ChatGPT) không quá 25 kí tự, câu trả lời là ở dạng Object bao gồm 2 thuộc tính là id (tương ứng với application_id) và result (là con số result sau khi phân tích, là 1 trong 2 con số 30 hoặc -10). Ngoài ra không kèm theo lời giải thích nào cả. Ví dụ nếu application.id = 1, hồ sơ xin việc đạt hết tất cả tiêu chí thì trả về:\n{\n    \"id\": 1,\n    \"result\": 30\n}`;\n\nexport const checkContent = `Bây giờ bạn là 1 chuyên gia kiểm duyệt văn bản. Hãy kiểm tra xem trong văn bản có chứa những từ ngữ nhạy cảm, thô tục, vi phạm pháp luật hay không. Kết quả lưu trong thuộc tính result. Nếu có vi phạm thì result = true, nếu không vi phạm thì result = false. \n***Lưu ý quan trọng: câu trả lời của bạn (ChatGPT) không quá 25 kí tự, câu trả lời là ở dạng Object như ví dụ bên dưới bao gồm 2 thuộc tính là id (tương ứng với postId) và result (là true nếu vi phạm, false nếu không vi phạm). Ví dụ nếu văn bản có chứa từ ngữ nhạy cảm, thô tục, vi phạm pháp luật thì trả về:\n{\n    \"id\": 1,\n    \"result\": true\n}\n`;\n\nexport const extractSkill = `Trích ra danh sách các kĩ năng (bao gồm kĩ năng cứng và kĩ năng mềm, kinh nghiệm chuyên môn) trong hồ sơ xin việc sau. \n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ câu trả lời là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]. Hãy dịch các kĩ năng sang tiếng Việt, và viết lại từng kĩ năng đã dịch ở dạng từ khóa, viết hoa chữ cái đầu.`;\n\nexport const translate = `Hãy dịch các từ khóa sau sang tiếng Việt, và viết hoa chữ cái đầu. \n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ câu trả lời là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]. `;\n\nexport const extractCommonInfo = `Trích ra thông tin về ngành nghề (profession), trình độ học vấn (degree), số năm kinh nghiệm làm việc trong ngành (experience) trong hồ sơ xin việc. Kết quả các thông tin có định dạng sau:\n- profession: tên ngành nghề,\n- degree: (Tiến sĩ, Thạc sĩ, cử nhân, cao đẳng, trung cấp, phổ thông, ...),\n- experience: (số) năm. (nếu không có kinh nghiệp làm việc thì trả về 0 năm)\n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Object, không chứa bất kì lời nào khác. Ví dụ câu trả lời là:\n{ \n    \"profession\": \"Công nghệ thông tin\",\n    \"degree\": \"Thạc sĩ\",\n    \"experience\": \"3 năm\", \n}\n`;\n","import alertDialog from 'src/utils/alertDialog';\n\nconst FREE_GPT_API_KEY =\n  'Bearer sk-idLv1WJ8H0Xec0FjTujkzGClFhuOLvUcVw7FJBA0ERBhN8Y2'; // free\nconst GPT_API_KEY =\n  'Bearer sk-ASMcBs6iBFaFfCxCizltjPPGTLCkB9tyESkmxxsQb9Tie4Fx';\n\nconst API_KEY = GPT_API_KEY || FREE_GPT_API_KEY;\n\n// Common function to handle API requests\nconst sendRequest = async (url, headers, body) => {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(body)\n    });\n\n    const data = await response.json();\n    if (data?.error) {\n      throw new Error(data.error.message);\n    }\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\n\n// Common function to process messages\nconst processMessages = async (content, sendMessage) => {\n  const responses = [];\n  let hasShownAlert = false;\n\n  const results = await Promise.allSettled(\n    content.map((inputText) => sendMessage(JSON.stringify(inputText)))\n  );\n\n  for (const result of results) {\n    if (result.status === 'fulfilled') {\n      responses.push(result.value);\n    } else if (result.status === 'rejected') {\n      if (!hasShownAlert) {\n        console.error('Error in sendMessage:', result.reason);\n        // alertDialog({\n        //   message: result.reason.message,\n        //   hideCancelButton: true\n        // });\n        hasShownAlert = true;\n      }\n      break;\n    }\n  }\n\n  return responses;\n};\n\nconst sendChatGPTRequest = async (\n  request,\n  content,\n  max_tokens = null,\n  logit_bias = null\n) => {\n  if (!content || content.length === 0) return [];\n\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: API_KEY\n  };\n\n  const sendMessage = async (inputText) => {\n    if (!inputText.trim()) return;\n\n    const body = {\n      model: 'gpt-3.5-turbo',\n      messages: [\n        { role: 'system', content: request },\n        { role: 'user', content: inputText }\n      ],\n      temperature: 0,\n      presence_penalty: 0.7,\n      frequency_penalty: 0.7,\n      max_tokens: max_tokens,\n      logit_bias: logit_bias\n    };\n\n    const data = await sendRequest(\n      'https://api.chatanywhere.cn/v1/chat/completions',\n      headers,\n      body\n    );\n    return data?.choices?.[0]?.message?.content;\n  };\n\n  return await processMessages(content, sendMessage);\n};\n\nexport const getEmbedding = async (content) => {\n  if (!content || content.length === 0) return [];\n\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: API_KEY\n  };\n\n  const sendMessage = async (inputText) => {\n    if (!inputText) return;\n\n    const body = {\n      model: 'text-embedding-3-large',\n      input: inputText\n    };\n\n    const data = await sendRequest(\n      'https://api.chatanywhere.cn/v1/embeddings',\n      headers,\n      body\n    );\n    return data?.data?.map((item) => item.embedding);\n  };\n\n  const processEmbeddings = async (content) => {\n    const responses = [];\n    let hasShownAlert = false;\n\n    const results = await Promise.allSettled(\n      content.map(async (inputText) => {\n        let i = 0;\n        const employer_Requirement = (\n          await sendMessage(inputText?.employer_Requirement)\n        )?.map((res) => ({\n          word: inputText?.employer_Requirement[i++],\n          result: res\n        }));\n\n        i = 0;\n        const employee_Profile = (\n          await sendMessage(inputText?.employee_Profile)\n        )?.map((res) => ({\n          word: inputText?.employee_Profile[i++],\n          result: res\n        }));\n\n        return {\n          id: inputText?.id,\n          employer_Requirement: employer_Requirement,\n          employee_Profile: employee_Profile\n        };\n      })\n    );\n\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        responses.push(result.value);\n      } else if (result.status === 'rejected') {\n        if (!hasShownAlert) {\n          console.error('Error in sendMessage:', result.reason);\n          // alertDialog({\n          //   message: result.reason.message,\n          //   hideCancelButton: true\n          // });\n          hasShownAlert = true;\n        }\n        break;\n      }\n    }\n\n    return responses;\n  };\n\n  return await processEmbeddings(content);\n};\n\nexport default sendChatGPTRequest;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent, SelectProps } from '@mui/material/Select';\n\nexport type Option = {\n  value: number | string;\n  label: string | React.ReactElement;\n};\nexport type PropsSelectInput = SelectProps & {\n  options?: Option[];\n  labelmargintop?: string;\n};\nexport default function SelectInput(props: PropsSelectInput) {\n  const { options = [], label, labelmargintop = 0 } = props;\n  return (\n    <FormControl fullWidth>\n      <InputLabel size=\"small\" sx={{ mt: labelmargintop }}>\n        {label}\n      </InputLabel>\n      <Select size=\"small\" {...props}>\n        {options.map((item, idx) => (\n          <MenuItem key={idx} value={item.value}>\n            {item.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","export const defaultImage = {\n  companyAvatar:\n    'https://th.bing.com/th/id/OIP.EK1rvrib-MWNflZRM2XiDQHaH_?pid=ImgDet&w=183&h=197&c=7&dpr=1.3',\n  companyCover:\n    'https://png.pngtree.com/background/20210706/original/pngtree-business-background-white-collar-jobs-picture-image_216619.jpg'\n};\n\nexport const avatarFormat = {\n  acceptTypes: ['image/jpeg', 'image/png', 'image/gif'],\n  acceptSize: 1 * 1024 * 1024\n};\nexport const CVFormat = {\n  acceptTypes: ['application/pdf'],\n  acceptSize: 2 * 1024 * 1024\n};\nexport const coverImgFormat = {\n  acceptTypes: ['image/jpeg', 'image/png', 'image/gif'],\n  acceptSize: 4 * 1024 * 1024\n};\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateUpdateOnlineProfile = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const useMutateFunction = (data) =>\n    OnlineProfileService.updateWithoutId(data);\n\n  const {\n    mutate: onUpdateData,\n    isLoading,\n    isSuccess\n  } = useMutation<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>,\n    OnlineProfile\n  >(useMutateFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-OnlineProfile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onUpdateData,\n    isSuccess\n  };\n};\n\nexport default useMutateUpdateOnlineProfile;\n","import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\nimport { useEffect, useState } from 'react';\nimport { getAccessToken } from 'src/utils/localStorage';\nimport { useApp } from 'src/modules/app/hooks';\nimport useOnlineProfile from './useOnlineProfile';\n\nconst useQueryOnlineProfile = () => {\n  const { isEmployee } = useApp();\n  const { setProfile } = useOnlineProfile();\n  const isLoggedIn = Boolean(getAccessToken());\n\n  const { data, isLoading, isSuccess, refetch } = useQuery<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>\n  >(['get-OnlineProfile'], OnlineProfileService.get, {\n    retry: (failureCount, error) =>\n      error.response.status === 404 ? false : failureCount < 2,\n    refetchOnWindowFocus: false,\n    enabled: isLoggedIn && isEmployee\n  });\n\n  useEffect(() => {\n    // Handle the data or error here\n    if (data && isSuccess) {\n      setProfile(data?.data);\n    }\n  }, [isSuccess]);\n\n  return {\n    onlineProfile: data?.data,\n    isLoading,\n    refetch\n  };\n};\n\nexport default useQueryOnlineProfile;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { OnlineProfile } from 'src/modules/jobProfile/model/index';\nimport { OnlineProfileService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateOnlineProfile = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const mutationFunction = OnlineProfileService.create;\n\n  const { mutate: onSaveData, isSuccess } = useMutation<\n    ResponseData<OnlineProfile>,\n    AxiosError<ResponseData<OnlineProfile>>,\n    OnlineProfile\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-OnlineProfile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isSuccess\n  };\n};\n\nexport default useMutateOnlineProfile;\n","import { useState, useEffect } from 'react';\nimport GeneralForm from '../../../GeneralForm';\nimport { OnlineProfile } from '../../../model';\nimport useMutateOnlineProfile from '../../hooks/useMutateOnlineProfile';\nimport useUpdateOnlineProfile from '../../hooks/useMutateUpdateOnlineProfile';\nimport {\n  EXPERIENCE,\n  POSITION_LEVEL,\n  WORKING_FORM,\n  DEGREE,\n  PROFESSION,\n  WORK_AT\n} from 'src/constants/option';\nimport { convertStringToObjectList, findObjectKey } from 'src/utils/formatData';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { Degree } from 'src/constants/enum';\n\nexport default function OnlineGeneral() {\n  const { profile, setProfile } = useOnlineProfile();\n  const { onSaveData } = useMutateOnlineProfile();\n  const { onUpdateData } = useUpdateOnlineProfile();\n  const [newData, setNewData] = useState(null);\n\n  const options = {\n    profession: PROFESSION,\n    workAddress: WORK_AT,\n    positionLevel: POSITION_LEVEL,\n    degree: DEGREE,\n    experience: EXPERIENCE,\n    workingForm: WORKING_FORM\n  };\n\n  const handleSaveProfile = (data: OnlineProfile) => {\n    const degree = findObjectKey(data.degree, Degree);\n\n    const newData = data;\n    // setProfile(newData);\n    if (profile?.userId) onUpdateData(newData);\n    else onSaveData(newData);\n  };\n\n  const formatInputData = (data: OnlineProfile) => ({\n    ...data,\n    profession: convertStringToObjectList(data?.profession, options.profession),\n    workAddress: convertStringToObjectList(\n      data?.workAddress,\n      options.workAddress\n    )\n  });\n\n  useEffect(() => {\n    setNewData(formatInputData(profile as OnlineProfile));\n  }, [profile]);\n\n  return (\n    <GeneralForm\n      data={newData}\n      options={options}\n      onSubmit={handleSaveProfile}\n    />\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { WorkExperience } from 'src/modules/jobProfile/model/index';\nimport { WorkExperienceService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = WorkExperienceService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    WorkExperience\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateExperience;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { ExperienceService } from 'src/modules/jobProfile/employeeProfileService';\nimport { WorkExperience } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    [id: string, data: WorkExperience]\n  >(([id, data]) => ExperienceService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateExperience;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from 'src/redux/hooks';\nimport { WorkExperience } from '../../model';\nimport {\n  selectWorkExperience,\n  setWorkExperience as setWorkExperienceAction\n} from '../workExperienceSlice';\n\nconst useWorkExperience = () => {\n  const { work_experiences } = useAppSelector(selectWorkExperience);\n  const dispatch = useAppDispatch();\n\n  const setWorkExperience = (data) => {\n    dispatch(setWorkExperienceAction(data));\n  };\n\n  return {\n    work_experiences,\n    setWorkExperience\n  };\n};\n\nexport default useWorkExperience;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  Typography,\n  Divider,\n  Checkbox,\n  InputLabel,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport FormControl from 'src/components/FormControl';\nimport TextField from 'src/components/TextField';\nimport { useForm } from 'react-hook-form';\nimport { WorkExperience } from '../../../model';\nimport useMutateExperience from './hooks/useMutateExperience';\nimport useMutateUpdateExperience from './hooks/useMutateUpdateExperience';\nimport DatePicker from 'src/components/DatePicker';\nimport dayjs from 'dayjs';\nimport { toInputDateString, toOutputDateString } from 'src/utils/formatData';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport useWorkExperience from '../../hooks/useWorkExperience';\nimport { v4 } from 'uuid';\n\nexport default function EditExperience(props) {\n  const { onSaveData } = useMutateExperience();\n  const { onSaveDataById } = useMutateUpdateExperience();\n  const { onClose, workId } = props;\n  const { profile, setProfile } = useOnlineProfile();\n  const { work_experiences, setWorkExperience } = useWorkExperience();\n  const [error, setError] = useState({ state: false, message: '' });\n\n  const defaultUserValues = {\n    jobTitle: '',\n    companyName: '',\n    startDate: null,\n    endDate: null,\n    isDoing: false,\n    jobDescription: ''\n  };\n\n  const {\n    control,\n    watch,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<WorkExperience>({\n    defaultValues: defaultUserValues\n  });\n\n  const isDoing = watch('isDoing', false);\n  const startDate = watch('startDate');\n  const endDate = watch('endDate');\n\n  const validateDates = () => {\n    if (startDate && endDate) {\n      if (dayjs(startDate).isAfter(endDate)) {\n        setError({\n          state: true,\n          message: 'Ngày kết thúc phải sau ngày bắt đầu'\n        });\n      } else {\n        setError({ state: false, message: '' });\n      }\n    }\n    if (isDoing) setError({ state: false, message: '' });\n  };\n\n  useEffect(() => {\n    validateDates();\n  }, [startDate, endDate, isDoing]);\n\n  const processInputData = (data) => {\n    if (!data.isDoing)\n      return {\n        ...data,\n        startDate: toInputDateString(data.startDate),\n        endDate: toInputDateString(data.endDate)\n      };\n    return {\n      ...data,\n      startDate: toInputDateString(data.startDate),\n      endDate: null\n    };\n  };\n\n  const processOutputData = (data) => {\n    if (!data.isDoing)\n      return {\n        ...data,\n        startDate: toOutputDateString(data.startDate),\n        endDate: toOutputDateString(data.endDate)\n      };\n    return {\n      ...data,\n      startDate: toOutputDateString(data.startDate),\n      endDate: null\n    };\n  };\n\n  const handleSaveExperienceData = async (data) => {\n    if (error.state) return;\n    const formattedOutputData = processOutputData(data);\n    // if (!profile.userId) {\n    //   if (data.id) {\n    //     const index = work_experiences.findIndex((item) => item.id === data.id);\n    //     if (index !== -1) {\n    //       const expList = [...work_experiences];\n    //       expList[index] = { ...formattedOutputData, id: data.id };\n    //       setWorkExperience(expList);\n    //     }\n    //   } else {\n    //     const expList = [\n    //       ...work_experiences,\n    //       { id: v4(), ...formattedOutputData }\n    //     ];\n    //     setWorkExperience(expList);\n    //     setProfile({ work_experiences: expList });\n    //   }\n    // } else {\n    // }\n    if (data.id) onSaveDataById([data.id, formattedOutputData]);\n    else onSaveData(formattedOutputData);\n    onClose();\n  };\n\n  useEffect(() => {\n    const foundExperience =\n      profile?.work_experiences?.find(\n        (experience) => experience.id === workId\n      ) || work_experiences?.find((experience) => experience.id === workId);\n    if (foundExperience) {\n      const formattedInputData = processInputData(foundExperience);\n      reset(formattedInputData);\n    }\n  }, [workId, profile]);\n\n  return (\n    <>\n      <Divider />\n      <Box py={3}>\n        <Grid container mb={4} spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"jobTitle\"\n              label=\"Chức danh\"\n              name=\"jobTitle\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"companyName\"\n              label=\"Công ty\"\n              name=\"companyName\"\n              required\n            />\n          </Grid>\n          <Grid item container xs={12} columnSpacing={3}>\n            <Grid item xs={12} display=\"flex\" height={30}>\n              <FormControl\n                element={<Checkbox checked={isDoing} />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"isDoing\"\n                label=\"Tôi đang làm ở đây\"\n                name=\"isDoing\"\n                sx={{ width: 10, height: 10, mr: 1 }}\n              />\n              <InputLabel htmlFor=\"isDoing\">Tôi đang làm ở đây</InputLabel>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<DatePicker />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"startDate\"\n                label=\"Thời gian bắt đầu\"\n                name=\"startDate\"\n                maxDate={dayjs()}\n              />\n            </Grid>\n            {!isDoing && (\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<DatePicker />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"endDate\"\n                  label=\"Thời gian kết thúc\"\n                  name=\"endDate\"\n                  maxDate={dayjs()}\n                />\n              </Grid>\n            )}\n            {isDoing && (\n              <Grid\n                item\n                xs={12}\n                sm={6}\n                display=\"flex\"\n                alignContent=\"center\"\n                alignItems=\"center\"\n              >\n                <TrendingFlatIcon />\n                <Typography fontSize={20}>Hiện tại</Typography>\n              </Grid>\n            )}\n          </Grid>\n          {error.state && (\n            <Grid item xs={12}>\n              <Alert severity=\"error\">\n                <AlertTitle>{error.message}</AlertTitle>\n              </Alert>\n            </Grid>\n          )}\n          <Grid item xs={12}>\n            <FormControl\n              element={<TextField />}\n              control={control}\n              errors={errors}\n              fullWidth\n              id=\"jobDescription\"\n              label=\"Mô tả công việc\"\n              name=\"jobDescription\"\n              minRows={3}\n              required\n              multiline\n            />\n          </Grid>\n        </Grid>\n        <ButtonGroup\n          handleSubmit={handleSubmit(handleSaveExperienceData)}\n          handleCancel={onClose}\n        />\n      </Box>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { ExperienceService } from 'src/modules/jobProfile/employeeProfileService';\nimport { WorkExperience } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteExperience = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<WorkExperience>,\n    AxiosError<ResponseData<WorkExperience>>,\n    string\n  >((id) => ExperienceService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteExperience;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  Divider,\n  Avatar,\n  IconButton,\n  Snackbar,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport AutoFixHighOutlinedIcon from '@mui/icons-material/AutoFixHighOutlined';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport ModeEditOutlineIcon from '@mui/icons-material/ModeEditOutline';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport { defaultImage } from 'src/constants/uploadFileRule';\nimport EditExperience from './EditWork';\nimport useMutateDeleteExperience from './hooks/useMutateDeleteExperience';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport useWorkExperience from '../../hooks/useWorkExperience';\nimport { toOutputDateString } from 'src/utils/formatData';\nimport alertDialog from 'src/utils/alertDialog';\n\nexport default function ExperienceView(props) {\n  const { onDeleteDataById } = useMutateDeleteExperience();\n  const { profile } = useOnlineProfile();\n  const { work_experiences, setWorkExperience } = useWorkExperience();\n  const [listOfWork, setListOfWork] = useState([]);\n  const [selectedWorkId, setSelectedWorkId] = useState(null);\n  const [isEditWorkVisible, setIsEditWorkVisible] = useState(false);\n  const [isNoProfile, setIsNoProfile] = useState(false);\n\n  const handleEditWork = (workId) => {\n    if (workId) setSelectedWorkId(workId);\n    setIsEditWorkVisible(true);\n  };\n\n  const handleAddWork = () => {\n    if (!profile?.work_experiences) {\n      setIsNoProfile(true);\n      return;\n    }\n    setSelectedWorkId(null);\n    setIsEditWorkVisible(true);\n  };\n\n  const handleDeleteWork = (id) => {\n    alertDialog({\n      selectedId: id,\n      handleConfirm: handleConfirmDelete\n    });\n  };\n\n  const handleConfirmDelete = (id) => {\n    onDeleteDataById(id);\n  };\n\n  useEffect(() => {\n    profile?.work_experiences ? setListOfWork(profile?.work_experiences) : [];\n    //   : setListOfWork(work_experiences);\n  }, [profile, work_experiences]);\n\n  return (\n    <>\n      {listOfWork?.map((work) => (\n        <Box key={work.id} display=\"flex\" columnGap={2} my={2}>\n          <Box>\n            <Avatar\n              src={defaultImage.companyAvatar}\n              variant=\"rounded\"\n              sx={{\n                bgcolor: '#a0b9cfc2',\n                height: 80,\n                width: 80\n              }}\n            >\n              <BusinessIcon />\n            </Avatar>\n          </Box>\n          <Box display=\"flex\" flexDirection=\"column\" rowGap=\"3px\" flex={1}>\n            <Typography fontWeight={700}>{work.jobTitle}</Typography>\n            <Typography fontSize={12}>{work.companyName}</Typography>\n            <Typography fontSize={12}>\n              {toOutputDateString(work.startDate)} -{' '}\n              {work.endDate && work.endDate !== '1899-11-30'\n                ? toOutputDateString(work.endDate)\n                : 'Hiện tại'}\n            </Typography>\n            <Box display=\"flex\">\n              <Typography fontSize={12}>Mô tả công việc:&nbsp;</Typography>\n              <Box>\n                <Typography fontSize={12}>{work.jobDescription}</Typography>\n              </Box>\n            </Box>\n          </Box>\n          <Box>\n            <IconButton onClick={() => handleEditWork(work.id)}>\n              <ModeEditOutlineIcon />\n            </IconButton>\n            <IconButton onClick={() => handleDeleteWork(work.id)}>\n              <DeleteOutlineIcon />\n            </IconButton>\n          </Box>\n        </Box>\n      ))}\n      {isEditWorkVisible && (\n        <EditExperience\n          workId={selectedWorkId}\n          onClose={() => setIsEditWorkVisible(false)}\n          onlineProfile={profile}\n        />\n      )}\n      {(!isEditWorkVisible || listOfWork?.length === 0) && (\n        <>\n          <Typography fontSize={12} color={'grey.600'}>\n            <em>\n              Mô tả kinh nghiệm làm việc của bạn càng chi tiết càng tốt, điều đó\n              giúp bạn có cơ hội được tuyển dụng cao hơn{' '}\n            </em>\n          </Typography>\n          <Divider />\n          <Button\n            variant=\"text\"\n            color=\"secondary\"\n            onClick={handleAddWork}\n            startIcon={<AutoFixHighOutlinedIcon fontSize=\"large\" />}\n            sx={{ my: 1 }}\n          >\n            <Typography>Thêm kinh nghiệm làm việc</Typography>\n          </Button>\n          <Snackbar\n            open={isNoProfile}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            autoHideDuration={5000}\n            onClose={() => setIsNoProfile(false)}\n          >\n            <Alert severity=\"error\">\n              <AlertTitle>\n                <strong>\n                  {isNoProfile &&\n                    'Vui lòng hoàn thành trước phần Thông tin chung!'}\n                </strong>\n              </AlertTitle>\n            </Alert>\n          </Snackbar>\n        </>\n      )}\n    </>\n  );\n}\n","import { Box, Typography, Container, Divider } from '@mui/material';\nimport ExperienceView from './ViewWork';\n\nexport default function Experience() {\n  return (\n    <>\n      <Container id=\"work_experience\">\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Box display=\"flex\">\n            <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n              Kinh nghiệm nghề nghiệp\n            </Typography>\n          </Box>\n        </Box>\n        <Divider />\n        <ExperienceView />\n      </Container>\n    </>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationInformation } from 'src/modules/jobProfile/model/index';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = EducationService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    EducationInformation\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateEducation;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\nimport { EducationInformation } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    [id: string, data: EducationInformation]\n  >(([id, data]) => EducationService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateEducation;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { EducationService } from 'src/modules/jobProfile/employeeProfileService';\nimport { EducationInformation } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteEducation = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<EducationInformation>,\n    AxiosError<ResponseData<EducationInformation>>,\n    string\n  >((id) => EducationService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteEducation;\n","import {\n  Box,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  Grid\n} from '@mui/material';\nimport React, { useEffect, useMemo } from 'react';\nimport FormControl from '../FormControl';\nimport TextField from '../TextField';\nimport ButtonGroup from '../ButtonGroup';\nimport { useForm } from 'react-hook-form';\nimport { useResponsive } from 'src/utils/responsive';\nimport DatePicker from '../DatePicker';\nimport dayjs from 'dayjs';\nimport {\n  isIsoDate,\n  toInputDateString,\n  toOutputDateString\n} from 'src/utils/formatData';\nimport { log10 } from 'mathjs';\n\nconst dateType = ['startDate', 'endDate'];\n\nexport default function EditGridInfo(props) {\n  const {\n    row,\n    columns,\n    open,\n    close,\n    handleClose,\n    title,\n    handleSave,\n    handleUpdate\n  } = props;\n  const { isMobile } = useResponsive();\n  console.log('row', row);\n  console.log('columns', columns);\n\n  const defaultValues = columns.reduce((acc, column) => {\n    acc[column.field] = '';\n    return acc;\n  }, {});\n\n  const defaultData = useMemo(() => {\n    const data = { ...row };\n    if (row?.startDate) {\n      data.startDate = toInputDateString(row?.startDate, 'DD/MM/YYYY');\n    }\n    if (row?.endDate)\n      data.endDate = toInputDateString(row?.endDate, 'DD/MM/YYYY');\n    return data;\n  }, [row]);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm({\n    defaultValues: defaultValues\n  });\n\n  const handleSaveInfo = (data) => {\n    for (let key in data) {\n      if (!data.hasOwnProperty(key)) continue;\n\n      if (dateType.includes(key)) {\n        debugger;\n        const dateString = toOutputDateString(data[key]);\n        data[key] = dateString;\n      }\n    }\n\n    if (row?.id) handleUpdate(row?.id, data);\n    else handleSave(data);\n    reset(defaultValues);\n    close();\n  };\n\n  useEffect(() => {\n    if (!row) reset(defaultValues);\n\n    reset(defaultData);\n  }, [row]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      fullWidth\n      maxWidth={'md'}\n      fullScreen={isMobile}\n    >\n      <DialogTitle\n        sx={{\n          textAlign: 'center',\n          fontWeight: 700,\n          fontSize: { md: '1.3rem', xs: '1rem' }\n        }}\n      >\n        {title}\n      </DialogTitle>\n      <Divider />\n      <DialogContent>\n        <Box sx={{ p: 3 }}>\n          <Grid container spacing={3} mb={4}>\n            {columns?.map(\n              (col, index) =>\n                col?.field !== 'id' && (\n                  <Grid key={index} item xs={12}>\n                    <FormControl\n                      element={\n                        dateType.includes(col?.field) ? (\n                          <DatePicker />\n                        ) : (\n                          <TextField />\n                        )\n                      }\n                      control={control}\n                      errors={errors}\n                      fullWidth\n                      label={col?.headerName}\n                      name={col?.field}\n                      multiline\n                      required\n                    />\n                  </Grid>\n                )\n            )}\n          </Grid>\n          <ButtonGroup\n            handleSubmit={handleSubmit(handleSaveInfo)}\n            handleCancel={() => close()}\n          />\n        </Box>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Snackbar,\n  Alert,\n  AlertTitle,\n  Typography,\n  Dialog,\n  DialogTitle,\n  Divider,\n  DialogContent\n} from '@mui/material';\nimport {\n  GridRowsProp,\n  GridRowModesModel,\n  GridRowModes,\n  DataGrid,\n  GridColDef,\n  GridToolbarContainer,\n  GridActionsCellItem,\n  GridEventListener,\n  GridRowId,\n  GridRowModel,\n  GridRowEditStopReasons\n} from '@mui/x-data-grid';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport dayjs from 'dayjs';\nimport alertDialog from 'src/utils/alertDialog';\nimport EditGridInfo from './EditFormOnMobile';\nimport { useResponsive } from 'src/utils/responsive';\n\nconst randomId = () =>\n  `${Math.floor(Math.random() * 10000)}${Math.random()\n    .toString(36)\n    .substring(2, 7)}`;\n\ninterface EditToolbarProps {\n  setCurrentRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\n  setRowModesModel: (\n    newModel: (oldModel: GridRowModesModel) => GridRowModesModel\n  ) => void;\n}\n\nconst EditDataGrid = (props) => {\n  const {\n    columns,\n    rows,\n    handleSave,\n    handleUpdate,\n    handleDelete,\n    profile,\n    title,\n    ...rest\n  } = props;\n  const [currentRows, setCurrentRows] = useState<GridRowsProp>([]);\n  const [initialRows, setInitialRows] = useState<GridRowsProp>([]);\n  const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\n  const [error, setError] = useState({ type: null, errorField: null });\n  const [openEditOnMobile, setOpenEditOnMobile] = useState({\n    open: false,\n    row: null\n  });\n  const { isMobile } = useResponsive();\n\n  useEffect(() => {\n    setCurrentRows(rows?.length > 0 ? rows : []);\n    setInitialRows(rows?.length > 0 ? rows : []);\n  }, [rows]);\n\n  function EditToolbar(props: EditToolbarProps) {\n    const { setCurrentRows, setRowModesModel } = props;\n\n    const handleAddClick = () => {\n      if (isMobile) {\n        setOpenEditOnMobile(() => ({ open: true, row: null }));\n        return;\n      }\n\n      // Have not fill common info\n      if (!profile?.userId) {\n        setError({ type: 'noProfile', errorField: null });\n        return;\n      }\n      // Is editing\n      if (currentRows[0]?.isNew) return;\n\n      const id = randomId();\n      const newRow = { id, isNew: true };\n      const emptyRow = columns.reduce((acc, column) => {\n        return { ...acc, [column.field]: '' };\n      }, newRow);\n\n      setCurrentRows((oldRows) => [emptyRow, ...oldRows]);\n      setRowModesModel((oldModel) => ({\n        ...oldModel,\n        [id]: { mode: GridRowModes.Edit, fieldToFocus: columns[0].field }\n      }));\n    };\n\n    return (\n      <GridToolbarContainer>\n        <Button\n          color=\"secondary\"\n          startIcon={<AddIcon />}\n          onClick={handleAddClick}\n        >\n          <Typography sx={{ fontWeight: 700, fontSize: 16 }}>\n            Thêm mới\n          </Typography>\n        </Button>\n      </GridToolbarContainer>\n    );\n  }\n\n  const handleRowEditStop: GridEventListener<'rowEditStop'> = (\n    params,\n    event\n  ) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const handleEditOnMobile = (row) => {\n    setOpenEditOnMobile({ open: true, row: row });\n  };\n\n  const handleEditClick = (id: GridRowId) => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleSaveClick = (id: GridRowId) => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n  };\n\n  const handleDeleteClick = (id: GridRowId) => {\n    alertDialog({\n      selectedId: id,\n      handleConfirm: handleConfirmDelete\n    });\n  };\n\n  const handleConfirmDelete = (id: GridRowId) => {\n    setCurrentRows(currentRows.filter((row) => row.id !== id));\n    handleDelete(id);\n  };\n\n  const handleCancelClick = (id: GridRowId) => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true }\n    });\n\n    const editedRow = currentRows.find((row) => row.id === id);\n    if (editedRow!.isNew) {\n      setCurrentRows(currentRows.filter((row) => row.id !== id));\n    }\n  };\n\n  const processRowUpdate = (newRow: GridRowModel) => {\n    let updatedRow;\n    const existingRow = initialRows.find((row) => row.id === newRow.id);\n\n    const invalidFields = columns\n      .filter(\n        (col) =>\n          col.type === 'date' &&\n          (!dayjs(newRow[col.field]).isValid() || newRow[col.field] === null)\n      )\n      .map((col) => col.headerName);\n\n    const missingFields = columns\n      .filter((col) => newRow[col.field] === '')\n      .map((col) => col.headerName);\n\n    for (const col of columns) {\n      if (col.type === 'date') {\n        newRow[col.field] = dayjs(newRow[col.field]).format('DD/MM/YYYY');\n      }\n    }\n\n    if (missingFields.length > 0) {\n      setError({ type: 'missing', errorField: `${missingFields.join(', ')}` });\n      return;\n    }\n    if (invalidFields.length > 0) {\n      setError({ type: 'invalid', errorField: `${invalidFields.join(', ')}` });\n      return;\n    }\n\n    if (!existingRow) {\n      updatedRow = { ...newRow, isNew: false };\n      handleSave({ ...newRow });\n    } else {\n      updatedRow = { ...newRow, isNew: false };\n      handleUpdate(newRow.id, updatedRow);\n    }\n    const rowList = currentRows.map((row) =>\n      row.id === newRow.id ? updatedRow : row\n    );\n    setCurrentRows(rowList);\n    return updatedRow;\n  };\n\n  const handleRowModesModelChange = (newRowModesModel: GridRowModesModel) => {\n    setRowModesModel(newRowModesModel);\n  };\n\n  const actionColumns: GridColDef[] = [\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: 'Chỉnh sửa',\n      width: 100,\n      cellClassName: 'actions',\n      getActions: ({ id, row }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveIcon />}\n              label=\"Save\"\n              sx={{\n                color: 'primary.main'\n              }}\n              onClick={() => handleSaveClick(id)}\n              key=\"save\"\n            />,\n            <GridActionsCellItem\n              icon={<CancelIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={() => handleCancelClick(id)}\n              color=\"inherit\"\n              key=\"cancel\"\n            />\n          ];\n        }\n        return [\n          <GridActionsCellItem\n            icon={<EditIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={() =>\n              isMobile ? handleEditOnMobile(row) : handleEditClick(id)\n            }\n            color=\"inherit\"\n            key=\"edit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={() => handleDeleteClick(id)}\n            color=\"inherit\"\n            key=\"delete\"\n          />\n        ];\n      }\n    }\n  ];\n\n  const fullCols: GridColDef[] = [...columns, ...actionColumns];\n\n  return (\n    <>\n      <DataGrid\n        rows={currentRows}\n        columns={fullCols}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        processRowUpdate={processRowUpdate}\n        disableColumnMenu\n        hideFooterSelectedRowCount\n        initialState={{\n          pagination: {\n            paginationModel: {\n              pageSize: 5\n            }\n          }\n        }}\n        slots={{\n          toolbar: EditToolbar\n        }}\n        slotProps={{\n          toolbar: {\n            setCurrentRows,\n            setRowModesModel\n          }\n        }}\n        getRowHeight={() => 'auto'}\n        sx={{\n          minHeight: 208,\n          '&.MuiDataGrid-root--densityCompact .MuiDataGrid-cell': { py: '8px' },\n          '&.MuiDataGrid-root--densityStandard .MuiDataGrid-cell': {\n            py: '15px'\n          },\n          '&.MuiDataGrid-root--densityComfortable .MuiDataGrid-cell': {\n            py: '22px'\n          },\n          '.MuiDataGrid-columnHeaderTitle': { fontWeight: 700 }\n        }}\n        {...rest}\n      />\n      <Snackbar\n        open={error?.type}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={5000}\n        onClose={() => setError({ type: null, errorField: null })}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            {error?.type === 'missing' && 'Chưa nhập đầy đủ thông tin'}\n            {error?.type === 'invalid' && 'Thời gian không hợp lệ'}\n            <strong>\n              {error?.type === 'noProfile' &&\n                'Vui lòng hoàn thành trước phần Thông tin chung!'}\n            </strong>\n          </AlertTitle>\n          <strong>{error?.errorField}</strong>\n        </Alert>\n      </Snackbar>\n      {isMobile && (\n        <EditGridInfo\n          row={openEditOnMobile.row}\n          open={openEditOnMobile.open}\n          close={() => setOpenEditOnMobile(() => ({ open: false, row: null }))}\n          title={title}\n          handleSave={handleSave}\n          handleUpdate={handleUpdate}\n          columns={columns}\n        />\n      )}\n    </>\n  );\n};\n\nexport default EditDataGrid;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Divider,\n  Alert,\n  AlertTitle,\n  Snackbar,\n  styled\n} from '@mui/material';\nimport { GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport useQueryOnlineProfile from '../../hooks/useQueryOnlineProfile';\nimport useMutateEducation from './hooks/useMutateEducation';\nimport useMutateUpdateEducation from './hooks/useMutateUpdateEducation';\nimport useMutateDeleteEducation from './hooks/useMutateDeleteEducation';\nimport dayjs from 'dayjs';\nimport EditDataGrid from 'src/components/EditDataGrid';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { toOutputDateString } from 'src/utils/formatData';\nimport DatePicker from 'src/components/DatePicker';\nimport { useResponsive } from 'src/utils/responsive';\n\nconst DatePickerStyle = {\n  '.css-i4bv87-MuiSvgIcon-root': {\n    height: '14px',\n    width: '14px'\n  },\n  '.css-1qrfzum-MuiButtonBase-root-MuiIconButton-root': {\n    paddingX: '0px',\n    marginRight: '-5px'\n  },\n  '.css-yykmq0-MuiInputBase-input-MuiOutlinedInput-input': {\n    paddingX: 0,\n    marginX: 0\n  },\n  '.css-33lv7h-MuiInputBase-root-MuiOutlinedInput-root': {\n    fontSize: '12px',\n    paddingRight: 0,\n    paddingLeft: '-100px'\n  }\n};\n\nexport default function Education() {\n  const { isMobile } = useResponsive();\n  const { profile, setProfile } = useOnlineProfile();\n  const { onSaveData } = useMutateEducation();\n  const { onSaveDataById } = useMutateUpdateEducation();\n  const { onDeleteDataById } = useMutateDeleteEducation();\n\n  const [rows, setRows] = useState<GridRowsProp>([]);\n  const [error, setError] = useState({ state: false, message: '' });\n\n  const processData = (rows: GridRowsProp) => {\n    rows.map((row) => {\n      row.startDate = toOutputDateString(row.startDate);\n      row.endDate = toOutputDateString(row.endDate);\n    });\n  };\n\n  useEffect(() => {\n    const rows = profile?.education_informations;\n    const initialRows = rows ? JSON.parse(JSON.stringify(rows)) : [];\n    if (initialRows) processData(initialRows);\n    setRows(profile?.education_informations?.length > 0 ? initialRows : []);\n  }, [profile]);\n\n  const validation = (data) => {\n    if (\n      dayjs(data.startDate, 'DD/MM/YYYY').isAfter(\n        dayjs(data.endDate, 'DD/MM/YYYY')\n      )\n    ) {\n      setError({ state: true, message: 'Ngày kết thúc phải sau ngày bắt đầu' });\n      return false;\n    }\n    return true;\n  };\n\n  const handleSaveEducationData = (data) => {\n    if (validation(data)) {\n      onSaveData(data);\n      // console.log(data);\n      // const prevList = profile?.education_informations || [];\n      // const eduList = [...prevList, { ...data }];\n      // setProfile({ education_informations: eduList });\n    }\n  };\n  const handleUpdateEducationData = (id, data) => {\n    if (validation(data)) {\n      onSaveDataById([id, data]);\n      // const index = profile?.education_informations?.findIndex(\n      //   (item) => item.id === data.id\n      // );\n\n      // if (index !== -1) {\n      //   const eduList = [...profile?.education_informations] || [];\n      //   eduList[index] = data;\n      //   setProfile({ education_informations: eduList });\n      // }\n    }\n  };\n  const handleDeleteEducationData = (id) => {\n    onDeleteDataById(id);\n    // const eduList = profile?.education_informations?.filter(\n    //   (edu) => edu.id !== id\n    // );\n    // setProfile({ education_informations: eduList });\n  };\n\n  const handleDateChange = (params, date) => {\n    params.api.setEditCellValue({\n      ...params,\n      value: date // Cập nhật giá trị đã chọn từ DatePicker vào row\n    });\n  };\n\n  const columns: GridColDef[] = [\n    // {\n    //   field: 'id',\n    //   headerName: 'ID'\n    // },\n    {\n      field: 'schoolName',\n      headerName: 'Trường/ Trung tâm đào tạo',\n      width: !isMobile ? 240 : 190,\n      editable: true\n    },\n    {\n      field: 'specialization',\n      headerName: 'Chuyên ngành',\n      width: 220,\n      editable: true\n    },\n    {\n      field: 'degreeName',\n      headerName: 'Tên chứng chỉ',\n      width: 150,\n      editable: true\n    },\n    {\n      field: 'startDate',\n      headerName: 'Bắt đầu',\n      type: 'date',\n      width: 110,\n      editable: true,\n      valueGetter: (params) => {\n        return dayjs(params.value, 'DD/MM/YYYY').toDate();\n      },\n      valueFormatter(params) {\n        return toOutputDateString(params.value);\n      },\n      renderEditCell: (params) => {\n        return (\n          <DatePicker\n            sx={DatePickerStyle}\n            onChange={(e) => handleDateChange(params, e)}\n            value={params.value}\n          />\n        );\n      }\n    },\n    {\n      field: 'endDate',\n      headerName: 'Kết thúc',\n      type: 'date',\n      width: 110,\n      editable: true,\n      valueGetter: (params) => {\n        return dayjs(params.value, 'DD-MM-YYYY').toDate();\n      },\n      valueFormatter(params) {\n        return toOutputDateString(params.value);\n      },\n      renderEditCell: (params) => {\n        return (\n          <DatePicker\n            sx={DatePickerStyle}\n            onChange={(e) => handleDateChange(params, e)}\n            value={params.value}\n          />\n        );\n      }\n    }\n  ];\n\n  return (\n    <Container id=\"education\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin học vấn\n          </Typography>\n        </Box>\n      </Box>\n      <Divider />\n      <Box pt={3} pb={6}>\n        <EditDataGrid\n          profile={profile}\n          rows={rows}\n          columns={columns}\n          title={'Thông tin học vấn'}\n          handleSave={handleSaveEducationData}\n          handleUpdate={handleUpdateEducationData}\n          handleDelete={handleDeleteEducationData}\n          initialState={{\n            pagination: {\n              paginationModel: {\n                pageSize: 5\n              }\n            },\n            columns: {\n              columnVisibilityModel: {\n                specialization: !isMobile,\n                degreeName: !isMobile,\n                startDate: !isMobile,\n                endDate: !isMobile,\n                id: false\n              }\n            }\n          }}\n        />\n      </Box>\n\n      <Snackbar\n        open={error?.state}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={5000}\n        onClose={() => setError({ state: false, message: '' })}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            <strong>{error?.message}</strong>\n          </AlertTitle>\n          Dữ liệu của bạn sẽ không được lưu lại\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { AnotherDegree } from 'src/modules/jobProfile/model/index';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\n\nconst useMutateDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n\n  const mutationFunction = DegreeService.create;\n\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    AnotherDegree\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateDegree;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\nimport { AnotherDegree } from 'src/modules/jobProfile/model';\n\nconst useMutateUpdateDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onSaveDataById, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    [id: string, data: AnotherDegree]\n  >(([id, data]) => DegreeService.update(id, data), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onSaveDataById,\n    isLoading\n  };\n};\n\nexport default useMutateUpdateDegree;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { DegreeService } from 'src/modules/jobProfile/employeeProfileService';\nimport { AnotherDegree } from 'src/modules/jobProfile/model';\n\nconst useMutateDeleteDegree = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const { mutate: onDeleteDataById, isLoading } = useMutation<\n    ResponseData<AnotherDegree>,\n    AxiosError<ResponseData<AnotherDegree>>,\n    string\n  >((id) => DegreeService.remove(id), {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        queryClient.invalidateQueries('get-OnlineProfile');\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n\n  return {\n    onDeleteDataById,\n    isLoading\n  };\n};\n\nexport default useMutateDeleteDegree;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  LinearProgress,\n  Container,\n  Divider\n} from '@mui/material';\nimport { GridRowsProp, GridColDef } from '@mui/x-data-grid';\nimport useMutateDegree from './hooks/useMutateDegree';\nimport useMutateUpdateDegree from './hooks/useMutateUpdateDegree';\nimport useMutateDeleteDegree from './hooks/useMutateDeleteDegree';\nimport EditDataGrid from 'src/components/EditDataGrid';\nimport useOnlineProfile from '../../hooks/useOnlineProfile';\nimport { useResponsive } from 'src/utils/responsive';\n\nfunction Degree() {\n  const { isMobile } = useResponsive();\n  const { profile } = useOnlineProfile();\n  const { onSaveData } = useMutateDegree();\n  const { onSaveDataById } = useMutateUpdateDegree();\n  const { onDeleteDataById } = useMutateDeleteDegree();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSaveDegreeData = async (data) => {\n    setLoading(true);\n    const newData = { ...data };\n    onSaveData(newData);\n    setLoading(false);\n  };\n\n  const handleUpdateDegreeData = async (id, data) => {\n    setLoading(true);\n    const newData = { ...data };\n    onSaveDataById([id, newData]);\n    setLoading(false);\n  };\n\n  const handleDeleteDegreeData = async (id) => {\n    setLoading(true);\n    onDeleteDataById(id);\n    setLoading(false);\n  };\n\n  const [rows, setRows] = useState<GridRowsProp>([]);\n\n  useEffect(() => {\n    if (profile?.another_degrees && profile.another_degrees.length > 0) {\n      setRows(profile.another_degrees);\n    }\n  }, [profile]);\n\n  const columns: GridColDef[] = [\n    {\n      field: 'degreeName',\n      headerName: 'Chứng chỉ',\n      width: !isMobile ? 420 : 190,\n      editable: true\n    },\n    {\n      field: 'level',\n      headerName: 'Mức độ thành thạo',\n      width: 410,\n      editable: true\n    }\n  ];\n\n  if (loading) {\n    return (\n      <Box sx={{ width: '100%' }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Container id=\"other_degree\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Những chứng chỉ khác\n          </Typography>\n        </Box>\n      </Box>\n      <Divider />\n      <Box pt={3} pb={6}>\n        <EditDataGrid\n          rows={rows}\n          columns={columns}\n          title={'Thông tin chứng chỉ'}\n          handleSave={handleSaveDegreeData}\n          handleUpdate={handleUpdateDegreeData}\n          handleDelete={handleDeleteDegreeData}\n          profile={profile}\n          initialState={{\n            pagination: {\n              paginationModel: {\n                pageSize: 5\n              }\n            },\n            columns: {\n              columnVisibilityModel: {\n                level: !isMobile,\n                id: false\n              }\n            }\n          }}\n        />\n      </Box>\n    </Container>\n  );\n}\n\nexport default Degree;\n","import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  Typography,\n  Button,\n  Snackbar,\n  Alert,\n  AlertTitle,\n  Backdrop,\n  useTheme\n} from '@mui/material';\nimport Personal from '../Personal';\nimport General from './components/General';\nimport Experience from './components/Experience';\nimport Education from './components/Education';\nimport Degree from './components/Degree';\nimport TableOfContents from '../TableOfContent';\nimport AccountBoxOutlinedIcon from '@mui/icons-material/AccountBoxOutlined';\nimport WorkOutlineIcon from '@mui/icons-material/WorkOutline';\nimport AssignmentOutlinedIcon from '@mui/icons-material/AssignmentOutlined';\nimport SchoolOutlinedIcon from '@mui/icons-material/SchoolOutlined';\nimport WorkspacePremiumOutlinedIcon from '@mui/icons-material/WorkspacePremiumOutlined';\nimport useQueryOnlineProfile from './hooks/useQueryOnlineProfile';\nimport useOnlineProfile from './hooks/useOnlineProfile';\nimport SuspenseLoader from 'src/components/SuspenseLoader';\nimport SubmitBox from '../SubmitBox';\nimport { useNavigate } from 'react-router';\nimport useMutateUpdateOnlineProfile from './hooks/useMutateUpdateOnlineProfile';\nimport { OnlineProfile as OnlineProfileType } from '../model';\nimport { loadKeywords, preProcessData } from 'src/utils/keywords';\nimport sendChatGPTRequest from 'src/GPT/sendChatGPTRequest';\nimport { cvAnalysist, translate } from 'src/GPT/roles';\nimport { checkIsMobile, useResponsive } from 'src/utils/responsive';\n\nconst MyBox = ({ children }) => (\n  <Box bgcolor=\"#ffff\" sx={{ mb: 4, boxShadow: '2px 2px 6px #aae2f7' }}>\n    {children}\n  </Box>\n);\n\nconst sections = [\n  {\n    icon: <AccountBoxOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin cá nhân',\n    id: 'personal'\n  },\n  {\n    icon: <WorkOutlineIcon sx={{ width: 20 }} />,\n    title: 'Thông tin chung',\n    id: 'general'\n  },\n  {\n    icon: <AssignmentOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin nghề nghiệp',\n    id: 'work_experience'\n  },\n  {\n    icon: <SchoolOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Thông tin học vấn',\n    id: 'education'\n  },\n  {\n    icon: <WorkspacePremiumOutlinedIcon sx={{ width: 20 }} />,\n    title: 'Những chứng chỉ khác',\n    id: 'other_degree'\n  }\n];\n\nexport default function OnlineProfile() {\n  const [missingInfo, setMissingInfo] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const { onlineProfile, isLoading } = useQueryOnlineProfile();\n  const { profile, setProfile } = useOnlineProfile();\n  const { onUpdateData } = useMutateUpdateOnlineProfile();\n  const navigate = useNavigate();\n\n  const { isMobile } = useResponsive();\n\n  const handleSubmit = async () => {\n    setIsAnalyzing(true);\n    if (profile?.userId) {\n      const dataToAnalyze = preProcessData(profile, 'online');\n      const analysisResults = await sendChatGPTRequest(\n        cvAnalysist,\n        [dataToAnalyze],\n        null,\n        {\n          '58': 5,\n          '60': 5\n        }\n      );\n      const translatedResults = await sendChatGPTRequest(\n        translate,\n        analysisResults\n      );\n      const keywords = loadKeywords(translatedResults);\n      onUpdateData({\n        ...profile,\n        keywords: profile?.skills + ', ' + keywords\n      } as OnlineProfileType);\n      setFinished(true);\n      setIsAnalyzing(false);\n    } else {\n      setMissingInfo(true);\n      setIsAnalyzing(false);\n    }\n  };\n\n  const goBack = async () => {\n    setFinished(true);\n  };\n\n  useEffect(() => {\n    if (finished) {\n      navigate('/employee/recruitment-profile');\n    }\n  }, [finished]);\n\n  useEffect(() => {\n    setProfile(onlineProfile);\n  }, [onlineProfile]);\n\n  if (isLoading) return <SuspenseLoader />;\n  return (\n    <>\n      <Container key=\"online\">\n        <Typography mt={3} fontSize={22} fontWeight={700}>\n          Tạo hồ sơ trực tuyến\n        </Typography>\n        <Grid container columnSpacing={2} mt={2}>\n          <Grid item xs={!isMobile ? 10 : 12}>\n            {sections.map((section) => (\n              <MyBox key={section.id}>\n                {section.id === 'personal' && <Personal />}\n                {section.id === 'general' && <General />}\n                {section.id === 'work_experience' && <Experience />}\n                {section.id === 'education' && <Education />}\n                {section.id === 'other_degree' && <Degree />}\n              </MyBox>\n            ))}\n          </Grid>\n          <Grid\n            item\n            xs={!isMobile ? 2 : 0}\n            sx={{ display: { xs: 'none', sm: 'inline' } }}\n          >\n            <Box\n              bgcolor=\"#ffff\"\n              sx={{ boxShadow: '2px 2px 6px #aae2f7' }}\n              width={200}\n              position=\"sticky\"\n              top={60}\n            >\n              <TableOfContents sections={sections} />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n      <SubmitBox>\n        <Button\n          onClick={goBack}\n          variant=\"outlined\"\n          color=\"secondary\"\n          sx={{ width: 200 }}\n        >\n          Quay lại\n        </Button>\n        <Button variant=\"contained\" sx={{ width: 200 }} onClick={handleSubmit}>\n          Lưu hồ sơ\n        </Button>\n      </SubmitBox>\n      <Snackbar\n        open={missingInfo}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        autoHideDuration={3000}\n        onClose={() => setMissingInfo(false)}\n      >\n        <Alert severity=\"error\">\n          <AlertTitle>\n            {missingInfo && 'Vui lòng cung cấp thông tin chung'}\n          </AlertTitle>\n        </Alert>\n      </Snackbar>\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={isAnalyzing}\n      >\n        <SuspenseLoader />\n      </Backdrop>\n    </>\n  );\n}\n","import { AttachedDocument, OnlineProfile } from 'src/modules/jobProfile/model';\n\nexport const loadKeywords = (analysisResults: any[], document?: any) => {\n  if (analysisResults.length <= 0 && !Boolean(analysisResults[0])) return '';\n\n  const result = analysisResults[0];\n  if (!result) return '';\n\n  const startIndex = result?.indexOf('[');\n  const endIndex = result?.lastIndexOf(']');\n  if (startIndex === undefined || endIndex === undefined) return '';\n\n  if (startIndex === -1) {\n    console.error(\"Không tìm thấy ký tự '['\");\n    return '';\n  }\n\n  if (endIndex === -1) {\n    console.error(\"Không tìm thấy ký tự ']'\");\n    return '';\n  }\n\n  // Trích xuất chuỗi con từ vị trí startIndex đến endIndex\n  const extractedString = result\n    ?.substring(startIndex + 1, endIndex)\n    ?.replace(/[\"]/g, '');\n\n  // B1: Thay thế dấu \"'\" thành dấu '\"' để đảm bảo JSON hợp lệ\n  const jsonString = extractedString?.replace(/[_!@#$%^&*;|<>'\"\\n\\t\\r]/g, '');\n\n  // B2: Parse string sang array\n  const keywordArray = jsonString.split(',');\n\n  const keywordList = keywordArray.slice(0, 20);\n  return keywordList?.join(',');\n};\n\nfunction removeDateAttributes(data) {\n  return data.map((item) => {\n    const { startDate, endDate, id, isDoing, ...rest } = item;\n    return rest;\n  });\n}\n\nconst removeAttributes = (\n  profile: Partial<OnlineProfile | AttachedDocument>,\n  profileType: string,\n  cvText?: string\n) => {\n  // if profile type is OnlineProfile then return\n  if (profileType === 'online') {\n    const profileData = profile as Partial<OnlineProfile>;\n    return {\n      jobTitle: profileData?.jobTitle,\n      profession: profileData?.profession,\n      work_experiences: profileData?.work_experiences.map((experience) => {\n        return {\n          jobTitle: experience.jobTitle,\n          jobDescription: experience.jobDescription\n        };\n      }),\n      education_informations: profileData?.education_informations.map(\n        (education) => education.specialization\n      ),\n      another_degrees: profileData?.another_degrees?.map(\n        (degree) => degree.degreeName\n      )\n    };\n  } else {\n    return {\n      jobTitle: profile?.jobTitle,\n      profession: profile?.profession,\n      cvContent: cvText\n    };\n  }\n};\n\ntype profileType = 'online' | 'document';\nexport function preProcessData(\n  object,\n  profileType: profileType,\n  cvText?: string\n) {\n  const dataToAnalyze = removeAttributes(object, profileType, cvText);\n  return dataToAnalyze;\n}\n"],"names":["cvAnalysist","jobAnalysist","RoundOneCheck","checkContent","extractSkill","translate","extractCommonInfo","API_KEY","sendRequest","async","url","headers","body","response","fetch","method","JSON","stringify","data","json","error","Error","message","console","getEmbedding","content","length","Authorization","sendMessage","_data$data","inputText","model","input","map","item","embedding","responses","hasShownAlert","results","Promise","allSettled","_await$sendMessage","_await$sendMessage2","i","employer_Requirement","res","word","result","employee_Profile","id","status","push","value","reason","processEmbeddings","request","max_tokens","arguments","undefined","logit_bias","processMessages","_data$choices","_data$choices$","_data$choices$$messag","trim","messages","role","temperature","presence_penalty","frequency_penalty","choices","SelectInput","props","options","label","labelmargintop","_jsxs","FormControl","fullWidth","children","_jsx","InputLabel","size","sx","mt","Select","idx","MenuItem","defaultImage","companyAvatar","companyCover","avatarFormat","acceptTypes","acceptSize","CVFormat","coverImgFormat","useMutateUpdateOnlineProfile","queryClient","useQueryClient","toast","useApp","mutate","onUpdateData","isLoading","isSuccess","useMutation","OnlineProfileService","updateWithoutId","onSuccess","invalidateQueries","success","massage","onError","useQueryOnlineProfile","isEmployee","setProfile","useOnlineProfile","isLoggedIn","Boolean","getAccessToken","refetch","useQuery","get","retry","failureCount","refetchOnWindowFocus","enabled","useEffect","onlineProfile","useMutateOnlineProfile","mutationFunction","create","onSaveData","OnlineGeneral","profile","useUpdateOnlineProfile","newData","setNewData","useState","profession","PROFESSION","workAddress","WORK_AT","positionLevel","POSITION_LEVEL","degree","DEGREE","experience","EXPERIENCE","workingForm","WORKING_FORM","convertStringToObjectList","GeneralForm","onSubmit","findObjectKey","Degree","userId","useMutateExperience","WorkExperienceService","useMutateUpdateExperience","onSaveDataById","_ref","ExperienceService","update","useWorkExperience","work_experiences","useAppSelector","selectWorkExperience","dispatch","useAppDispatch","setWorkExperience","setWorkExperienceAction","EditExperience","onClose","workId","setError","state","control","watch","reset","handleSubmit","formState","errors","useForm","defaultValues","jobTitle","companyName","startDate","endDate","isDoing","jobDescription","dayjs","isAfter","_profile$work_experie","foundExperience","find","formattedInputData","toInputDateString","_Fragment","Divider","Box","py","Grid","container","mb","spacing","xs","sm","element","TextField","name","required","columnSpacing","display","height","Checkbox","checked","width","mr","htmlFor","DatePicker","maxDate","alignContent","alignItems","TrendingFlatIcon","Typography","fontSize","Alert","severity","AlertTitle","minRows","multiline","ButtonGroup","formattedOutputData","toOutputDateString","processOutputData","handleCancel","useMutateDeleteExperience","onDeleteDataById","remove","ExperienceView","listOfWork","setListOfWork","selectedWorkId","setSelectedWorkId","isEditWorkVisible","setIsEditWorkVisible","isNoProfile","setIsNoProfile","handleConfirmDelete","work","columnGap","my","Avatar","src","variant","bgcolor","BusinessIcon","flexDirection","rowGap","flex","fontWeight","IconButton","onClick","handleEditWork","ModeEditOutlineIcon","handleDeleteWork","alertDialog","selectedId","handleConfirm","DeleteOutlineIcon","color","Button","handleAddWork","startIcon","AutoFixHighOutlinedIcon","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","Experience","Container","justifyContent","lineHeight","useMutateEducation","EducationService","useMutateUpdateEducation","useMutateDeleteEducation","dateType","EditGridInfo","row","columns","close","handleClose","title","handleSave","handleUpdate","isMobile","useResponsive","log","reduce","acc","column","field","defaultData","useMemo","Dialog","maxWidth","fullScreen","DialogTitle","textAlign","md","DialogContent","p","col","index","includes","headerName","key","hasOwnProperty","dateString","rows","handleDelete","rest","currentRows","setCurrentRows","initialRows","setInitialRows","rowModesModel","setRowModesModel","type","errorField","openEditOnMobile","setOpenEditOnMobile","filter","actionColumns","cellClassName","getActions","_rowModesModel$id","mode","GridRowModes","Edit","GridActionsCellItem","icon","SaveIcon","View","handleSaveClick","CancelIcon","className","ignoreModifications","isNew","handleCancelClick","EditIcon","handleEditOnMobile","handleEditClick","DeleteIcon","handleDeleteClick","fullCols","DataGrid","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","handleRowEditStop","params","event","GridRowEditStopReasons","rowFocusOut","defaultMuiPrevented","processRowUpdate","newRow","updatedRow","existingRow","invalidFields","isValid","missingFields","format","concat","join","rowList","disableColumnMenu","hideFooterSelectedRowCount","initialState","pagination","paginationModel","pageSize","slots","toolbar","GridToolbarContainer","AddIcon","handleAddClick","_currentRows$","Math","floor","random","toString","substring","emptyRow","oldRows","oldModel","fieldToFocus","slotProps","getRowHeight","minHeight","DatePickerStyle","paddingX","marginRight","marginX","paddingRight","paddingLeft","Education","setRows","_profile$education_in","education_informations","parse","processData","validation","handleDateChange","date","api","setEditCellValue","editable","valueGetter","toDate","valueFormatter","renderEditCell","onChange","e","pt","pb","EditDataGrid","handleUpdateEducationData","columnVisibilityModel","specialization","degreeName","useMutateDegree","DegreeService","useMutateUpdateDegree","useMutateDeleteDegree","loading","setLoading","another_degrees","LinearProgress","level","MyBox","boxShadow","sections","AccountBoxOutlinedIcon","WorkOutlineIcon","AssignmentOutlinedIcon","SchoolOutlinedIcon","WorkspacePremiumOutlinedIcon","OnlineProfile","missingInfo","setMissingInfo","finished","setFinished","isAnalyzing","setIsAnalyzing","navigate","useNavigate","SuspenseLoader","section","Personal","General","position","top","TableOfContents","SubmitBox","dataToAnalyze","preProcessData","analysisResults","sendChatGPTRequest","translatedResults","keywords","loadKeywords","skills","Backdrop","zIndex","theme","drawer","document","_result$substring","startIndex","indexOf","endIndex","lastIndexOf","extractedString","replace","keywordList","split","slice","removeAttributes","profileType","cvText","_profileData$another_","profileData","education","cvContent","object"],"sourceRoot":""}