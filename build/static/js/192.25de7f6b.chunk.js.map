{"version":3,"file":"static/js/192.25de7f6b.chunk.js","mappings":"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","sources":["modules/admin/hooks/useQueryPostingsReportByQuery.ts","modules/admin/hooks/useQueryCandidateStatisticsByQuery.ts","pages/admin/StatisticsAndReports.tsx"],"sourcesContent":["import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { AdminJobPostingsReportByQueryService } from '../adminService';\nimport dayjs from 'dayjs';\n\nconst useQueryJobPostingsReportByQuery = (params) => {\n  const { data, isLoading } = useQuery<\n    ResponseData<any[]>,\n    AxiosError<ResponseData<any[]>>\n  >(\n    ['get-job-postings-report-by-query', params],\n    () => AdminJobPostingsReportByQueryService.get({ params }),\n    {\n      keepPreviousData: true,\n      retry: 1,\n      refetchOnWindowFocus: false\n    }\n  );\n\n  return {\n    jobPostingData:\n      data?.data?.map((item) => ({\n        time: item?.time,\n        'Tin đăng': item?.value\n      })) || [],\n    isLoading\n  };\n};\n\nexport default useQueryJobPostingsReportByQuery;\n","import { AxiosError } from 'axios';\nimport { useQuery } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { AdminCandidateStatisticsByQueryService } from '../adminService';\n\nconst useQueryCandidateStatisticsByQuery = (params) => {\n  const { data, isLoading } = useQuery<\n    ResponseData<any[]>,\n    AxiosError<ResponseData<any[]>>\n  >(\n    ['get-candidate-statistics-by-query', params],\n    () => AdminCandidateStatisticsByQueryService.get({ params }),\n    {\n      keepPreviousData: true,\n      retry: 1,\n      refetchOnWindowFocus: false\n    }\n  );\n\n  return {\n    candidateStatistics: data?.data?.map((item) => ({ ...item })) || [],\n    isLoading\n  };\n};\n\nexport default useQueryCandidateStatisticsByQuery;\n","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Typography,\r\n  styled\r\n} from '@mui/material';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  PieChart, // Corrected component name\r\n  Pie, // Corrected component name\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  Cell,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport useQueryJobPostingsReport from 'src/modules/admin/hooks/useQueryPostingsReport';\r\nimport useQueryCandidateStatistics from 'src/modules/admin/hooks/useQueryCandidateStatistics';\r\nimport SuspenseLoader from 'src/components/SuspenseLoader';\r\nimport useQueryJobPostingsReportByQuery from 'src/modules/admin/hooks/useQueryPostingsReportByQuery';\r\nimport useQueryCandidateStatisticsByQuery from 'src/modules/admin/hooks/useQueryCandidateStatisticsByQuery';\r\nimport { MonthCalendar, YearCalendar } from '@mui/x-date-pickers';\r\nimport dayjs, { Dayjs } from 'dayjs';\r\nimport { isMobile, isTablet } from 'src/constants/reponsive';\r\nimport { saveAs } from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst ChartWrapper = styled(Grid)({\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'center',\r\n  alignItems: 'center'\r\n});\r\n\r\nconst CalendarStyles = {\r\n  maxWidth: '100%',\r\n  maxHeight: 210,\r\n  border: '1px solid #ccc',\r\n  borderRadius: 2,\r\n  p: 0,\r\n  overflowY: 'auto'\r\n};\r\n\r\nconst StatisticsAndReports = () => {\r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#814289'];\r\n  const [selectedYear, setSelectedYear] = useState<Dayjs | null>(dayjs());\r\n  const [selectedMonth, setSelectedMonth] = useState<Dayjs | null>(dayjs());\r\n\r\n  // const { jobPostingData, isLoading: isLoadingJobData } =\r\n  //   useQueryJobPostingsReport();\r\n  // const { candidateStatistics, isLoading: isLoadingCandidate } =\r\n  //   useQueryCandidateStatistics();\r\n\r\n  const { jobPostingData, isLoading: isLoadingJobData } =\r\n    useQueryJobPostingsReportByQuery({\r\n      year: selectedYear?.year(),\r\n      month: selectedMonth && selectedMonth?.month() + 1\r\n    });\r\n  const { candidateStatistics, isLoading: isLoadingCandidate } =\r\n    useQueryCandidateStatisticsByQuery({\r\n      year: selectedYear?.year(),\r\n      month: selectedMonth && selectedMonth?.month() + 1\r\n    });\r\n\r\n  const handleSatisticByMonth = (e) => {\r\n    const isChecked = e.target.checked;\r\n    if (!isChecked) setSelectedMonth(null);\r\n    else setSelectedMonth(dayjs());\r\n  };\r\n\r\n  const formattedJobPostingData = jobPostingData?.map((item) => ({\r\n    ...item,\r\n    time:\r\n      (dayjs(item?.time, 'MMM').isValid() &&\r\n        dayjs(item?.time, 'MMM').format('MM')) ||\r\n      item.time\r\n  }));\r\n\r\n  let XAxisInterval = 1;\r\n\r\n  if (!selectedMonth) {\r\n    XAxisInterval = 1;\r\n  } else {\r\n    XAxisInterval = isMobile ? 3 : isTablet ? 2 : 1;\r\n  }\r\n\r\n  const handleDownloadExcel = () => {\r\n    const statisticsData = [\r\n      { data: jobPostingData, sheetName: 'Job_Posting' },\r\n      { data: candidateStatistics, sheetName: 'Candidate' }\r\n    ];\r\n\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    statisticsData.forEach(({ data, sheetName }) => {\r\n      const ws = XLSX.utils.json_to_sheet(data);\r\n      XLSX.utils.book_append_sheet(wb, ws, sheetName);\r\n    });\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], {\r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    });\r\n    saveAs(data, 'devices_data.xlsx');\r\n  };\r\n\r\n  if (isLoadingJobData || isLoadingCandidate) return <SuspenseLoader />;\r\n  return (\r\n    <Container maxWidth=\"xl\">\r\n      <Card>\r\n        <CardHeader title=\"Thống kê và Báo cáo\" />\r\n        <Divider />\r\n        <CardContent\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            my: 2,\r\n            padding: 2\r\n          }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"stretch\"\r\n            marginTop={0}\r\n          >\r\n            <Grid item sm={3} xs={12} mb={3}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                onClick={handleDownloadExcel}\r\n              >\r\n                Tải Excel\r\n              </Button>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  alignItems: 'center',\r\n                  my: 2\r\n                }}\r\n              >\r\n                <Typography variant=\"h4\" textAlign={'center'}>\r\n                  Thống kê theo năm\r\n                </Typography>\r\n              </Box>\r\n              <YearCalendar\r\n                value={selectedYear?.isValid() && dayjs(selectedYear)}\r\n                onChange={(newValue) => setSelectedYear(newValue)}\r\n                disableFuture\r\n                maxDate={dayjs()}\r\n                sx={{\r\n                  ...CalendarStyles\r\n                }}\r\n              />\r\n\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  alignItems: 'center',\r\n                  mt: 2\r\n                }}\r\n              >\r\n                <Typography variant=\"h4\" textAlign={'center'}>\r\n                  Thống kê theo tháng\r\n                </Typography>\r\n                <Checkbox defaultChecked onChange={handleSatisticByMonth} />\r\n              </Box>\r\n              <MonthCalendar\r\n                value={selectedMonth?.isValid() && dayjs(selectedMonth)}\r\n                onChange={(newValue) => setSelectedMonth(newValue)}\r\n                disableFuture={selectedYear?.year() === dayjs().year()}\r\n                sx={{\r\n                  ...CalendarStyles,\r\n                  display: !selectedMonth && 'none'\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item sm={9} xs={12}>\r\n              <Grid container rowGap={3}>\r\n                <ChartWrapper item xs={12}>\r\n                  <Typography variant=\"h4\">Số lượng tin đăng tuyển</Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={400}>\r\n                    {formattedJobPostingData.length <= 0 ? (\r\n                      <Typography\r\n                        color=\"text.disabled\"\r\n                        textAlign=\"center\"\r\n                        sx={{ marginTop: 10 }}\r\n                      >\r\n                        Không có dữ liệu\r\n                      </Typography>\r\n                    ) : (\r\n                      <LineChart\r\n                        data={formattedJobPostingData}\r\n                        margin={{ top: 30, right: 30, left: 0, bottom: 20 }}\r\n                      >\r\n                        <XAxis\r\n                          dataKey=\"time\"\r\n                          label={{\r\n                            value: 'Tháng',\r\n                            position: 'insideBottom',\r\n                            offset: -10\r\n                          }}\r\n                          tickSize={10}\r\n                          interval={XAxisInterval}\r\n                        />\r\n                        <YAxis\r\n                          type=\"number\"\r\n                          domain={[0, 'dataMax + 5']}\r\n                          label={{\r\n                            value: 'Tin đăng',\r\n                            position: 'insideLeft',\r\n                            angle: -90,\r\n                            offset: 20\r\n                          }}\r\n                        />\r\n                        <Tooltip />\r\n                        <Line\r\n                          type=\"monotone\"\r\n                          dataKey=\"Tin đăng\"\r\n                          stroke=\"#8884d8\"\r\n                        />\r\n                      </LineChart>\r\n                    )}\r\n                  </ResponsiveContainer>\r\n                </ChartWrapper>\r\n                <ChartWrapper item xs={12}>\r\n                  <Typography variant=\"h4\">Thống Kê Ứng Viên</Typography>\r\n                  <ResponsiveContainer\r\n                    width=\"80%\"\r\n                    height={isMobile ? 400 : 300}\r\n                  >\r\n                    {candidateStatistics.length <= 0 ? (\r\n                      <Typography\r\n                        color=\"text.disabled\"\r\n                        textAlign=\"center\"\r\n                        sx={{ marginTop: 10 }}\r\n                      >\r\n                        Không có dữ liệu\r\n                      </Typography>\r\n                    ) : (\r\n                      <PieChart>\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Pie\r\n                          data={candidateStatistics}\r\n                          dataKey=\"value\"\r\n                          nameKey=\"name\"\r\n                          outerRadius={80}\r\n                          fill=\"#8884d8\"\r\n                          startAngle={90}\r\n                          endAngle={-270}\r\n                        >\r\n                          {candidateStatistics?.map((entry, index) => (\r\n                            <Cell\r\n                              key={`cell-${index}`}\r\n                              fill={COLORS[index % COLORS.length]}\r\n                            />\r\n                          ))}\r\n                        </Pie>\r\n                      </PieChart>\r\n                    )}\r\n                  </ResponsiveContainer>\r\n                </ChartWrapper>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StatisticsAndReports;\r\n"],"names":["params","_data$data","data","isLoading","useQuery","AdminJobPostingsReportByQueryService","get","keepPreviousData","retry","refetchOnWindowFocus","jobPostingData","map","item","time","value","AdminCandidateStatisticsByQueryService","candidateStatistics","ChartWrapper","styled","Grid","display","flexDirection","justifyContent","alignItems","CalendarStyles","maxWidth","maxHeight","border","borderRadius","p","overflowY","StatisticsAndReports","COLORS","selectedYear","setSelectedYear","useState","dayjs","selectedMonth","setSelectedMonth","isLoadingJobData","useQueryJobPostingsReportByQuery","year","month","isLoadingCandidate","useQueryCandidateStatisticsByQuery","formattedJobPostingData","isValid","format","XAxisInterval","isMobile","isTablet","_jsx","SuspenseLoader","Container","children","_jsxs","Card","CardHeader","title","Divider","CardContent","sx","my","padding","container","direction","marginTop","sm","xs","mb","Button","fullWidth","variant","onClick","handleDownloadExcel","statisticsData","sheetName","wb","XLSX","book_new","forEach","_ref","ws","json_to_sheet","book_append_sheet","excelBuffer","bookType","type","Blob","saveAs","Box","Typography","textAlign","YearCalendar","onChange","newValue","disableFuture","maxDate","mt","Checkbox","defaultChecked","e","isChecked","target","checked","MonthCalendar","rowGap","ResponsiveContainer","width","height","length","color","LineChart","margin","top","right","left","bottom","XAxis","dataKey","label","position","offset","tickSize","interval","YAxis","domain","angle","Tooltip","Line","stroke","PieChart","Legend","Pie","nameKey","outerRadius","fill","startAngle","endAngle","entry","index","Cell","concat"],"sourceRoot":""}