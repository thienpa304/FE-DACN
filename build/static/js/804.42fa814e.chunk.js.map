{"version":3,"file":"static/js/804.42fa814e.chunk.js","mappings":"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","sources":["components/ButtonGroup/index.tsx","components/DatePicker/index.tsx","components/EditButton/index.tsx","components/NumberFormatCustom/index.tsx","components/SelectInput/index.tsx","components/TextField/index.tsx","components/UploadError/index.tsx","constants/uploadFileRule.ts","gpt/roles.ts","gpt/sendChatGPTRequest.ts","modules/jobProfile/GeneralForm.tsx","modules/jobProfile/Personal.tsx","modules/jobProfile/SubmitBox.tsx","modules/jobProfile/TableOfContent.tsx","modules/users/hooks/useMutateAvatar.ts","modules/users/hooks/useMutateUserHook.ts","utils/keywords.ts"],"sourcesContent":["import { Box, Button } from '@mui/material';\n\nexport default function ButtonGroup(props) {\n  const { handleSubmit, handleCancel } = props;\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" sx={{ gap: 3 }}>\n      <Button\n        onClick={handleCancel}\n        variant=\"outlined\"\n        color=\"secondary\"\n        sx={{ width: 120 }}\n      >\n        Hủy\n      </Button>\n      <Button\n        color=\"success\"\n        onClick={handleSubmit}\n        variant=\"contained\"\n        sx={{ width: 120 }}\n      >\n        Xác nhận\n      </Button>\n    </Box>\n  );\n}\n","import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker as DatePickerMui } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport dayjs from 'dayjs';\n\nexport default function DatePicker(props) {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DatePickerMui\n        format=\"DD/MM/YYYY\"\n        {...props}\n        value={props.value ? dayjs(props.value) : null}\n        slotProps={{ textField: { size: 'small', fullWidth: true } }}\n      />\n    </LocalizationProvider>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Button, Typography, ButtonProps } from '@mui/material';\nimport AutoFixHighOutlinedIcon from '@mui/icons-material/AutoFixHighOutlined';\n\nexport default function EditButton(props: ButtonProps) {\n  return (\n    <Button\n      {...props}\n      variant=\"outlined\"\n      color=\"secondary\"\n      startIcon={<AutoFixHighOutlinedIcon fontSize=\"large\" />}\n      sx={{ borderRadius: 5 }}\n    >\n      <Typography textTransform=\"none\">Chỉnh sửa</Typography>\n    </Button>\n  );\n}\n","import * as React from 'react';\nimport { NumericFormat, NumericFormatProps } from 'react-number-format';\n\ninterface CustomProps {\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\nconst NumericFormatCustom = React.forwardRef<NumericFormatProps, CustomProps>(\n  function NumericFormatCustom(props, ref) {\n    const { onChange, ...other } = props;\n\n    return (\n      <NumericFormat\n        {...other}\n        getInputRef={ref}\n        onValueChange={(values) => {\n          onChange({\n            target: {\n              name: props.name,\n              value: values.value\n            }\n          });\n        }}\n        thousandSeparator\n        valueIsNumericString\n      />\n    );\n  }\n);\n\nexport default NumericFormatCustom;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent, SelectProps } from '@mui/material/Select';\n\nexport type Option = {\n  value: number | string;\n  label: string | React.ReactElement;\n};\nexport type PropsSelectInput = SelectProps & {\n  options?: Option[];\n  labelmargintop?: string;\n};\nexport default function SelectInput(props: PropsSelectInput) {\n  const { options = [], label, labelmargintop = 0 } = props;\n  return (\n    <FormControl fullWidth>\n      <InputLabel size=\"small\" sx={{ mt: labelmargintop }}>\n        {label}\n      </InputLabel>\n      <Select size=\"small\" {...props}>\n        {options.map((item, idx) => (\n          <MenuItem key={idx} value={item.value}>\n            {item.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { TextFieldProps, TextField as TextInput } from '@mui/material';\n\nconst TextField = (props: TextFieldProps) => {\n  return <TextInput size=\"small\" fullWidth {...props} />;\n};\n\nexport default TextField;\n","import { Typography } from '@mui/material';\nimport {\n  avatarFormat,\n  CVFormat,\n  coverImgFormat\n} from 'src/constants/uploadFileRule';\n\nconst generateErrorText = (\n  object: string,\n  acceptTypes: string[],\n  acceptSize: number,\n  fileType: string\n) => {\n  const typeRegex = new RegExp(`${fileType}/`, 'g');\n  return (\n    <Typography color=\"error\" my={1} fontWeight={700} fontSize={13}>\n      {object} phải có định dạng&nbsp;\n      {acceptTypes.join(', ').replace(typeRegex, '.')} và dung lượng{' '}\n      {` <=${acceptSize / 1024 / 1024}MB`}\n    </Typography>\n  );\n};\n\nconst generateOverTokenErrorText = () => {\n  return (\n    <Typography color=\"error\" my={1} fontWeight={700} fontSize={13}>\n      Rất tiếc, hệ thống chỉ có thể phân tích hồ sơ chứa tối đa 4000 từ. Vui\n      lòng tải hồ sơ khác !\n    </Typography>\n  );\n};\n\nconst generateFailedOCRErrorText = () => {\n  return (\n    <Typography color=\"error\" my={1} fontWeight={700} fontSize={13}>\n      Không nhận diện được nội dung trong file hồ sơ của bạn. Vui lòng tải hồ sơ\n      khác !\n    </Typography>\n  );\n};\n\nexport const avatarErrorText = generateErrorText(\n  'Ảnh đại diện',\n  avatarFormat.acceptTypes,\n  avatarFormat.acceptSize,\n  'image'\n);\nexport const coverErrorText = generateErrorText(\n  'Ảnh bìa',\n  coverImgFormat.acceptTypes,\n  coverImgFormat.acceptSize,\n  'image'\n);\nexport const applicationErrorText = generateErrorText(\n  'CV',\n  CVFormat.acceptTypes,\n  CVFormat.acceptSize,\n  'application'\n);\nexport const overTokenErrorText = generateOverTokenErrorText();\nexport const failedOCRErrorText = generateFailedOCRErrorText();\n","export const defaultImage = {\n  companyAvatar:\n    'https://th.bing.com/th/id/OIP.EK1rvrib-MWNflZRM2XiDQHaH_?pid=ImgDet&w=183&h=197&c=7&dpr=1.3',\n  companyCover:\n    'https://png.pngtree.com/background/20210706/original/pngtree-business-background-white-collar-jobs-picture-image_216619.jpg'\n};\n\nexport const avatarFormat = {\n  acceptTypes: ['image/jpeg', 'image/png', 'image/gif'],\n  acceptSize: 1 * 1024 * 1024\n};\nexport const CVFormat = {\n  acceptTypes: ['application/pdf'],\n  acceptSize: 2 * 1024 * 1024\n};\nexport const coverImgFormat = {\n  acceptTypes: ['image/jpeg', 'image/png', 'image/gif'],\n  acceptSize: 4 * 1024 * 1024\n};\n","export const cvAnalysist = `Bây giờ, bạn là một chuyên gia lâu năm trong lĩnh vực Nhân sự. Bạn có khả năng phân tích từ khóa quan trọng trong hồ sơ xin việc. Tôi cần xác định những yếu tố quan trọng trong hồ sơ xin việc sau. Hãy liệt kê 10 từ khóa quan trọng liên quan đến công việc của trong nội dung hồ sơ tôi cung cấp. Các từ khóa này bao gồm cả kỹ năng cứng và mềm, cũng như kinh nghiệm và trình độ chuyên môn. Sắp xếp chúng theo mức độ quan trọng dựa trên tần số xuất hiện trong phần mô tả công việc và yêu cầu công việc. Hãy chú ý những kỹ năng chuyên môn thường theo sau các cụm từ như 'có hiểu biết', 'thành thạo', 'có kinh nghiệm', 'có kiến thức về' để xác định từ khóa kĩ năng cứng (kĩ năng chuyên môn). Đồng thời, cũng phải chú ý tới tên các chứng chỉ, chuyên ngành để xác định từ khóa về trình độ chuyên môn. Ngoài ra, tìm các mô tả về tính cách, cách hành xử, thái độ và sức khỏe của con người để xác định từ khóa về kỹ năng mềm. Kết quả trả về dưới dạng mảng các chuỗi từ khóa (nếu không tìm được từ khóa nào thì trả về danh sách rỗng []). Lưu ý rằng: Mỗi từ khóa tìm được không được quá 20 kí tự.\r\n***Quan trọng: Câu trả lời của bạn (ChatGPT) chứa 10 từ khóa và câu trả lời là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ về câu trả lời minh họa là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]\r\nNội dung hồ sơ xin việc cung cấp như sau:\r\n`;\r\n\r\nexport const jobAnalysist = `Bây giờ, bạn là một chuyên gia lâu năm trong lĩnh vực Nhân sự. Bạn có khả năng phân tích từ khóa quan trọng trong tin tuyển dụng. Tôi cần xác định những yếu tố mà nhà tuyển dụng quan tâm trong tin tuyển dụng sau. Hãy liệt kê 10 từ khóa quan trọng liên quan đến công việc của trong nội dung tin tuyển dụng tôi cung cấp. Các từ khóa này bao gồm cả kỹ năng cứng và mềm, cũng như kinh nghiệm chuyên môn. Sắp xếp chúng theo mức độ quan trọng dựa trên tần số xuất hiện trong phần mô tả công việc và yêu cầu công việc. Hãy chú ý những kỹ năng chuyên môn thường theo sau các cụm từ như 'có hiểu biết', 'thành thạo', 'có kinh nghiệm', 'có kiến thức về' để tìm ra từ khóa kĩ năng cứng (kĩ năng chuyên môn). Ngoài ra, tìm các mô tả về tính cách, cách hành xử, thái độ và sức khỏe của con người để tìm ra từ khóa về kỹ năng mềm. Kết quả trả về dưới dạng mảng các chuỗi từ khóa, viết hoa chữ cái đầu tiên của mỗi cụm từ khóa (nếu không tìm được từ khóa nào thì trả về danh sách rỗng []). Lưu ý rằng: Mỗi từ khóa tìm được không được quá 20 kí tự.\r\n***Quan trọng: Câu trả lời của bạn (ChatGPT) là có duy nhất 1 danh sách các từ khóa sau khi dịch sang tiếng Việt và câu trả lời là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ về câu trả lời minh họa là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]\r\nNội dung tin tuyển dụng cung cấp như sau:\r\n`;\r\n\r\nexport const RoundOneCheck = `Bây giờ, bạn là một chuyên gia phân tích hồ sơ xin việc.\r\nHãy đọc hồ sơ xin việc (emplyee_Profile) và thông tin tuyển dụng (employer_Requirement) sau đó so sánh và đánh giá xem thông tin emplyee_Profile có phù hợp với thông tin tuyển dụng hay không. Hãy đánh giá xem emplyee_Profile theo các tiêu chí sau.\r\nSau đó, trích lọc ra các thông tin sau: giới tính (sex), ngày sinh (dob), ngành nghề (profession), bằng cấp (degree), kinh nghiệm (experience) và so sánh với yêu cầu tương ứng trong tin tuyển dụng theo các tiêu chí sau:\r\n- 1. Nếu emplyee_Profile thiếu bất kì 1 thông tin sex, dob, profession, degree, experience thì không đạt.\r\n- 2. sex trong emplyee_Profile phải hoàn toàn phù hợp với sex trong employer_Requirement thì mới đạt yêu cầu (ví dụ cùng là Nam hoặc cùng là Nữ).\r\n- 3. Dựa vào ngày sinh (dob) tính ra độ tuổi hiện tại, độ tuổi hiện tại phải lớn hơn minAge và nhỏ hơn maxAge trong employer_Requirement thì mới đạt.\r\n- 4. profession trong emplyee_Profile phải có ít nhất 1 ngành nghề chung ngành với ngành trong profession trong employer_Requirement thì mới đạt yêu cầu, Sử dụng các phương pháp như Phân tích ngữ cảnh, Phân tích ngữ cảnh dựa trên ngữ nghĩa, mạng ngữ nghĩa (Semantic Networks) để đánh giá mức độ liên quan giữa các từ khóa. (Ví dụ Kỹ sư phần mềm, Công nghệ thông tin, Khoa học Máy tính, Web, Frontend, Backend... là mức độ liên quan cao; Quảng cáo, sale, bán sỉ, bán lẻ, Marketing, Bán hàng, Kinh doanh... là mức độ liên quan cao).\r\n- 5. degree trong emplyee_Profile phải cao hơn hoặc bằng với degree trong employer_Requirement thì mới đạt yêu cầu (ví dụ Tiến sĩ > Thạc sĩ > cử nhân > cao đẳng > trung cấp > phổ thông, ... tương tự).\r\n- 6. experience trong emplyee_Profile phải lớn hơn experience trong employer_Requirement thì mới đạt yêu cầu (ví dụ trên 5 năm trở > 5 năm > 4 năm > ...> 1 năm > dưới 1 năm, ... tương tự).\r\n* result chỉ có thể là 1 trong 2 con số -10 hoặc 30.\r\n* Nếu đạt hết TẤT CẢ 6 tiêu chí trên thì result là con số 30. Ví dụ result là: 30\r\n* Nếu có bất kì 1 tiêu chí nào không đạt yêu cầu thì dừng phân tích ngay, đồng thời trả ra result là con số -10. Ví dụ result là: -10\r\n***Lưu ý quan trọng: câu trả lời của bạn (ChatGPT) không quá 25 kí tự, câu trả lời là ở dạng Object bao gồm 2 thuộc tính là id (tương ứng với application_id trong emplyee_Profile.application) và result (là con số result sau khi phân tích, là 1 trong 2 con số 30 hoặc -10). Ngoài ra không kèm theo lời giải thích nào cả. Ví dụ nếu emplyee_Profile.application.id = 1, emplyee_Profile đạt hết tất cả tiêu chí thì trả về:\r\n{\r\n    \"id\": 1,\r\n    \"result\": 30\r\n}`;\r\n\r\nexport const checkContent = `Bây giờ bạn là 1 chuyên gia kiểm duyệt văn bản. Hãy kiểm tra xem trong văn bản có chứa những từ ngữ nhạy cảm, thô tục, vi phạm pháp luật hay không. Kết quả lưu trong thuộc tính result. Nếu có vi phạm thì result = true, nếu không vi phạm thì result = false. \r\n***Lưu ý quan trọng: câu trả lời của bạn (ChatGPT) không quá 25 kí tự, câu trả lời là ở dạng Object như ví dụ bên dưới bao gồm 2 thuộc tính là id (tương ứng với postId) và result (là true nếu vi phạm, false nếu không vi phạm). Ví dụ nếu văn bản có chứa từ ngữ nhạy cảm, thô tục, vi phạm pháp luật thì trả về:\r\n{\r\n    \"id\": 1,\r\n    \"result\": true\r\n}\r\n`;\r\n\r\nexport const extractSkill = `Trích ra danh sách các kĩ năng (bao gồm kĩ năng cứng và kĩ năng mềm, kinh nghiệm chuyên môn) trong hồ sơ xin việc sau. \r\n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ câu trả lời là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]. Hãy dịch các kĩ năng sang tiếng Việt, và viết lại từng kĩ năng đã dịch ở dạng từ khóa, viết hoa chữ cái đầu.`;\r\n\r\nexport const translate = `Hãy dịch các từ khóa sau sang tiếng Việt, và viết hoa chữ cái đầu. \r\n***Lưu ý quan trọng: Câu trả lời của bạn (ChatGPT) là ở dạng Array duy nhất, không chứa bất kì lời nào khác. Ví dụ câu trả lời là: [\"PHP\", \"Backend\", \"Tiếng hoa\", \"Đàm phán\", \"Làm việc nhóm\", \"Giao tiếp\", \"Thuyết trình\"]. `;\r\n","const sendChatGPTRequest = async (\r\n  request: string,\r\n  content: any[],\r\n  max_tokens = null,\r\n  logit_bias = null\r\n) => {\r\n  const responses = [];\r\n\r\n  if (!content || content.length === 0) {\r\n    return responses;\r\n  }\r\n\r\n  const sendMessage = async (inputText) => {\r\n    if (!inputText.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        'https://api.chatanywhere.cn/v1/chat/completions',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization:\r\n              'Bearer sk-ASMcBs6iBFaFfCxCizltjPPGTLCkB9tyESkmxxsQb9Tie4Fx'\r\n            // 'Bearer sk-idLv1WJ8H0Xec0FjTujkzGClFhuOLvUcVw7FJBA0ERBhN8Y2' //free\r\n          },\r\n          body: JSON.stringify({\r\n            model: 'gpt-3.5-turbo',\r\n            messages: [\r\n              {\r\n                role: 'system',\r\n                content: request\r\n              },\r\n              { role: 'user', content: inputText }\r\n            ],\r\n            temperature: 0,\r\n            presence_penalty: 0.7,\r\n            frequency_penalty: 0.7,\r\n            max_tokens: max_tokens,\r\n            logit_bias: logit_bias\r\n          })\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      return data?.choices?.[0]?.message?.content;\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  await Promise.all(\r\n    content.map(async (inputText) => {\r\n      const response = await sendMessage(JSON.stringify(inputText)).catch(\r\n        () => ''\r\n      );\r\n      responses.push(response);\r\n    })\r\n  );\r\n\r\n  return responses;\r\n};\r\n\r\nexport const getEmbedding = async (content: any[]) => {\r\n  const responses = [];\r\n\r\n  if (!content || content.length === 0) {\r\n    return responses;\r\n  }\r\n\r\n  const sendMessage = async (inputText) => {\r\n    if (!inputText) return;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        'https://api.chatanywhere.cn/v1/embeddings',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization:\r\n              'Bearer sk-ASMcBs6iBFaFfCxCizltjPPGTLCkB9tyESkmxxsQb9Tie4Fx'\r\n            // 'Bearer sk-idLv1WJ8H0Xec0FjTujkzGClFhuOLvUcVw7FJBA0ERBhN8Y2' //free\r\n          },\r\n          body: JSON.stringify({\r\n            model: 'text-embedding-3-large',\r\n            input: inputText\r\n            // dimensions: 100\r\n          })\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      return data?.data?.map((item) => item.embedding);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  await Promise.all(\r\n    content.map(async (inputText) => {\r\n      let i = 0;\r\n      const employer_Requirement = (\r\n        await sendMessage(inputText?.employer_Requirement)\r\n      ).map((res) => ({\r\n        word: inputText?.employer_Requirement[i++],\r\n        result: res\r\n      }));\r\n\r\n      i = 0;\r\n\r\n      const employee_Profile = (\r\n        await sendMessage(inputText?.employee_Profile)\r\n      ).map((res) => ({\r\n        word: inputText?.employee_Profile[i++],\r\n        result: res\r\n      }));\r\n\r\n      responses.push({\r\n        id: inputText?.id,\r\n        employer_Requirement: employer_Requirement,\r\n        employee_Profile: employee_Profile\r\n      });\r\n      console.log(responses);\r\n    })\r\n  );\r\n\r\n  return responses;\r\n};\r\n\r\nexport default sendChatGPTRequest;\r\n","import React, { useState, useEffect } from 'react';\nimport { Box, Grid, Typography, Container, Divider } from '@mui/material';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from 'src/components/FormControl';\nimport SelectInput from 'src/components/SelectInput';\nimport TextField from 'src/components/TextField';\nimport Autocomplete from 'src/components/Autocomplete';\nimport { useForm } from 'react-hook-form';\nimport {\n  convertObjectListToString,\n  convertObjectListToStringForSkill,\n  convertToObjectsForSkill,\n  findObjectKey\n} from 'src/utils/inputOutputFormat';\nimport NumericFormatCustom from 'src/components/NumberFormatCustom';\nimport EditButton from 'src/components/EditButton';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport {\n  Degree,\n  EmploymentType,\n  Experience,\n  PositionLevel\n} from 'src/constants/enum';\nimport GeneralViewUI from './GeneralViewUI';\nimport TagInput from 'src/components/TagInput';\nimport skills from 'src/constants/skills';\nimport { SKILLS } from 'src/constants';\ninterface Option {\n  value: any;\n  label: any;\n}\n\ninterface FormProps {\n  jobTitle: string;\n  profession: string | Option[];\n  currentPosition: string;\n  desiredPosition: string;\n  desiredSalary: number;\n  degree: string;\n  experience: string;\n  workAddress: string | Option[];\n  employmentType: string;\n  careerGoal: string;\n  skills: string;\n}\n\ninterface GeneralFormProps {\n  data: FormProps;\n  options: {\n    profession: Option[];\n    workAddress: Option[];\n    positionLevel: Option[];\n    degree: Option[];\n    experience: Option[];\n    workingForm: Option[];\n  };\n  onSubmit: (data: FormProps) => void;\n}\n\nconst GeneralForm: React.FC<GeneralFormProps> = ({\n  data,\n  options,\n  onSubmit\n}) => {\n  const defaultValues: FormProps = {\n    jobTitle: '',\n    profession: '',\n    currentPosition: '',\n    desiredPosition: '',\n    desiredSalary: null,\n    degree: '',\n    experience: '',\n    workAddress: '',\n    employmentType: '',\n    careerGoal: '',\n    skills: ''\n  };\n\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<FormProps>({\n    defaultValues: defaultValues\n  });\n\n  const ref = React.useRef(null);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const [employeeSkills, setSetEmployeeSkills] = useState(null);\n\n  const handleSaveProfile = (data: FormProps) => {\n    const newData = processDataPayload(data);\n    onSubmit(newData);\n    setIsReadOnly(true);\n  };\n\n  const handleCancel = () => {\n    reset(data);\n    setIsReadOnly(true);\n  };\n\n  const onEdit = () => setIsReadOnly(false);\n\n  const processDataPayload = (data: FormProps) => {\n    return {\n      ...data,\n      profession: convertObjectListToString(data?.profession as Option[]),\n      workAddress: convertObjectListToString(data?.workAddress as Option[]),\n      skills: Array.isArray(data.skills)\n        ? data.skills.map((item) => item.value || item).join(', ')\n        : data.skills\n    };\n  };\n\n  useEffect(() => {\n    reset(data);\n    data?.skills &&\n      setSetEmployeeSkills(convertToObjectsForSkill(data?.skills));\n  }, [data]);\n\n  return (\n    <Container id=\"general\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin chung\n          </Typography>\n        </Box>\n        {isReadOnly && <EditButton onClick={onEdit} />}\n      </Box>\n      <Divider />\n      {isReadOnly ? (\n        <GeneralViewUI\n          user={{\n            ...data,\n            degree: Degree[data.degree] ? Degree[data.degree] : data.degree\n          }}\n        />\n      ) : (\n        <Grid sx={{ mt: 1 }} py={2}>\n          <Grid container mb={4} spacing={3}>\n            <Grid item xs={12}>\n              <FormControl\n                element={<TextField />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"jobTitle\"\n                label=\"Vị trí mong muốn\"\n                name=\"jobTitle\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={<Autocomplete />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"profession\"\n                label=\"Nghề nghiệp\"\n                name=\"profession\"\n                options={options.profession}\n                required\n                disabled={isReadOnly}\n                defaultValue={data?.profession}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.positionLevel}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"currentPosition\"\n                label=\"Cấp bậc hiện tại\"\n                name=\"currentPosition\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.positionLevel}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"desiredPosition\"\n                label=\"Cấp bậc mong muốn\"\n                name=\"desiredPosition\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<TextField />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"desiredSalary\"\n                label=\"Mức lương mong muốn\"\n                name=\"desiredSalary\"\n                pattern=\"integer\"\n                required\n                disabled={isReadOnly}\n                InputProps={{\n                  inputComponent: NumericFormatCustom as any,\n                  endAdornment: (\n                    <InputAdornment position=\"end\">triệu VNĐ</InputAdornment>\n                  )\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.degree}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"degree\"\n                label=\"Trình độ học vấn\"\n                name=\"degree\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.experience}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"experience\"\n                label=\"Số năm kinh nghiệm\"\n                name=\"experience\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl\n                element={<SelectInput />}\n                options={options.workingForm}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"employmentType\"\n                label=\"Hình thức làm việc\"\n                name=\"employmentType\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={<Autocomplete />}\n                options={options.workAddress}\n                control={control}\n                errors={errors}\n                defaultValue={data?.workAddress}\n                fullWidth\n                id=\"workAddress\"\n                label=\"Địa chỉ làm việc\"\n                name=\"workAddress\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={<TextField />}\n                control={control}\n                errors={errors}\n                fullWidth\n                id=\"careerGoal\"\n                label=\"Mục tiêu nghề nghiệp\"\n                name=\"careerGoal\"\n                required\n                disabled={isReadOnly}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl\n                element={\n                  <Autocomplete\n                    freeSolo={true}\n                    limitTags={7}\n                    options={SKILLS.map((item) => item.value)}\n                  />\n                }\n                defaultValue={data?.skills?.split(', ')}\n                control={control}\n                errors={errors}\n                id=\"skills\"\n                label=\"Kĩ năng bắt buộc\"\n                name=\"skills\"\n                required\n              />\n              <Typography\n                fontSize={12}\n                color=\"secondary\"\n                fontStyle={'italic'}\n                sx={{ display: 'flex', justifyContent: 'center' }}\n              >\n                Hãy liệt kê tối đa 10 từ khóa. Ví dụ: Python, ReactJS, HTML,\n                Go... Sẽ giúp hệ thống tìm kiếm được doanh nghiệp phù hợp với hồ\n                sơ bạn nhất\n              </Typography>\n            </Grid>\n          </Grid>\n          {!isReadOnly && (\n            <ButtonGroup\n              handleSubmit={handleSubmit(handleSaveProfile)}\n              handleCancel={handleCancel}\n            />\n          )}\n        </Grid>\n      )}\n    </Container>\n  );\n};\n\nexport default GeneralForm;\n","import { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  Typography,\n  Container,\n  styled,\n  Divider,\n  Avatar,\n  useTheme\n} from '@mui/material';\nimport AddPhotoAlternateOutlinedIcon from '@mui/icons-material/AddPhotoAlternateOutlined';\nimport DoNotDisturbOnOutlinedIcon from '@mui/icons-material/DoNotDisturbOnOutlined';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport FormControl from 'src/components/FormControl';\nimport SelectInput from 'src/components/SelectInput';\nimport DatePicker from 'src/components/DatePicker';\nimport TextField from 'src/components/TextField';\nimport EditButton from 'src/components/EditButton';\nimport { useForm } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { User } from '../users/model';\nimport { useApp } from 'src/modules/app/hooks';\nimport useMutateUserData from '../users/hooks/useMutateUserHook';\nimport { GENDER, ISMARRIED, ISMARRIED_OPTION } from 'src/constants/option';\nimport {\n  GetFileByUserId,\n  UploadFileByUserId,\n  RemoveFileByUserId,\n  DocumentType,\n  getFileByUrl,\n  uploadFile,\n  removeFileByUrl\n} from 'src/common/firebaseService';\nimport { avatarFormat } from 'src/constants/uploadFileRule';\nimport {\n  toOutputDateString,\n  toInputDateString\n} from 'src/utils/inputOutputFormat';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport { avatarErrorText } from 'src/components/UploadError';\nimport useMutateAvatar from 'src/modules/users/hooks/useMutateAvatar';\nimport PersonalViewUI from './PersonalViewUI';\nimport { checkIsMobile, checkIsTablet } from 'src/utils/responsive';\n\nconst Input = styled('input')({\n  display: 'none'\n});\n\nexport default function Personal() {\n  const [avatarState, setAvatarState] = useState({\n    avatar: null,\n    avatarError: false,\n    storageAvatar: null,\n    uploadFile: null\n  });\n  const { user, setUserApp } = useApp();\n  const { onSaveData: onSavaAvatar } = useMutateAvatar();\n  const { onSaveData } = useMutateUserData();\n  const { acceptTypes, acceptSize } = avatarFormat;\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    reset(defaultUserValues);\n    handleGetAvatar();\n  }, [user]);\n\n  const handleEdit = () => setIsReadOnly(false);\n\n  const handleSaveProfile = async (data) => {\n    setLoading(true);\n\n    let avatarUrl = user.avatar;\n    if (avatarState.uploadFile)\n      avatarUrl = await uploadFile(avatarState.uploadFile).catch(() => '');\n    if (!avatarState.avatar) {\n      await removeFileByUrl(user.avatar);\n      avatarUrl = '';\n    }\n\n    const newData = {\n      ...data,\n      dob: toOutputDateString(data.dob),\n      isMarried: data.isMarried === 'Đã kết hôn' ? '1' : '0',\n      avatar: avatarUrl\n    };\n    setUserApp({\n      ...newData,\n      isMarried: newData.isMarried === '1',\n      sex: GENDER.find((item) => item.value === newData.sex)?.label,\n      avatar: avatarUrl\n    });\n    onSaveData(newData);\n\n    onSavaAvatar(newData);\n    setLoading(false);\n    setIsReadOnly(true);\n  };\n\n  const handleCancel = () => {\n    reset(defaultUserValues);\n    setAvatarState({ ...avatarState, avatar: avatarState.storageAvatar });\n    setIsReadOnly(true);\n  };\n\n  const handleGetAvatar = async () => {\n    const avatarUrl = await getFileByUrl(user?.avatar).catch(() => '');\n    setAvatarState({\n      ...avatarState,\n      avatar: avatarUrl,\n      storageAvatar: avatarUrl\n    });\n  };\n\n  const handleUploadAvatar = (e) => {\n    const image = e.target.files[0];\n    if (!image) return;\n    if (!acceptTypes.includes(image.type) || image.size > acceptSize) {\n      setAvatarState({ ...avatarState, avatarError: true });\n      return;\n    }\n    const imageUrl = URL.createObjectURL(image);\n    setAvatarState({\n      ...avatarState,\n      avatar: imageUrl,\n      uploadFile: image,\n      avatarError: false\n    });\n  };\n\n  const handleDeleteAvatar = () => {\n    setAvatarState({ ...avatarState, avatar: null, avatarError: false });\n  };\n\n  const defaultUserValues = {\n    ...user,\n    dob: toInputDateString(user.dob as string, 'DD-MM-YYYY'),\n    sex: GENDER.find((item) => item.label === user.sex)?.value,\n    isMarried: user.isMarried ? 'Đã kết hôn' : 'Độc thân'\n  };\n\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<User>({\n    defaultValues: defaultUserValues\n  });\n\n  const theme = useTheme();\n  const isMobile = checkIsMobile(theme);\n  const isTablet = checkIsTablet(theme);\n  console.log(isTablet);\n\n  return (\n    <Container id=\"personal\">\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Box display=\"flex\">\n          <Typography fontWeight={700} fontSize={21} lineHeight={3}>\n            Thông tin cá nhân\n          </Typography>\n        </Box>\n        {isReadOnly && <EditButton onClick={handleEdit} />}\n      </Box>\n      <Divider />\n      <Grid container sx={{ mt: 1 }} py={2}>\n        <Grid item xs={isTablet ? 12 : 3} pr={2}>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            rowGap={2}\n          >\n            <Avatar\n              alt={user.name}\n              src={avatarState.avatar}\n              sx={{\n                borderRadius: 2,\n                width: '75%',\n                maxWidth: '180px',\n                height: 180,\n                objectFit: 'cover'\n              }}\n            />\n            {!avatarState.avatar && !isReadOnly && (\n              <label htmlFor=\"userAvatar\">\n                <Button\n                  component=\"label\"\n                  size=\"small\"\n                  startIcon={<AddPhotoAlternateOutlinedIcon />}\n                  variant=\"text\"\n                  color=\"secondary\"\n                >\n                  <FormControl\n                    element={<Input type=\"file\" accept=\"image/*\" />}\n                    control={control}\n                    name=\"userAvatar\"\n                    id=\"userAvatar\"\n                    label=\"Ảnh đại diện\"\n                    onChange={handleUploadAvatar}\n                    // sx={{ fontSize: 15 }}\n                  />\n                  <Typography sx={{ fontSize: 15, fontWeight: 700 }}>\n                    Tải lên\n                  </Typography>\n                </Button>\n              </label>\n            )}\n\n            {avatarState.avatar && !isReadOnly && (\n              <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                <Button\n                  component=\"label\"\n                  size=\"small\"\n                  startIcon={<AddPhotoAlternateOutlinedIcon />}\n                  variant=\"text\"\n                  color=\"secondary\"\n                >\n                  <FormControl\n                    element={<Input type=\"file\" accept=\"image/*\" />}\n                    control={control}\n                    name=\"userAvatar\"\n                    id=\"userAvatar\"\n                    label=\"Ảnh đại diện\"\n                    onChange={handleUploadAvatar}\n                  />\n                  <Typography sx={{ fontSize: 15, fontWeight: 700 }}>\n                    Thay đổi\n                  </Typography>\n                </Button>\n                <Button\n                  component=\"label\"\n                  onClick={handleDeleteAvatar}\n                  size=\"small\"\n                  startIcon={<DoNotDisturbOnOutlinedIcon />}\n                  variant=\"text\"\n                  color=\"secondary\"\n                >\n                  <Typography sx={{ fontSize: 15, fontWeight: 700 }}>\n                    Xóa\n                  </Typography>\n                </Button>\n              </Box>\n            )}\n            {avatarState.avatarError && avatarErrorText}\n          </Box>\n        </Grid>\n        <Grid item xs={isTablet ? 12 : 9}>\n          {!isReadOnly ? (\n            <Grid container mb={4} spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"name\"\n                  label=\"Họ và tên\"\n                  name=\"name\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email\"\n                  name=\"email\"\n                  pattern=\"email\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"phone\"\n                  label=\"Số điện thoại\"\n                  name=\"phone\"\n                  pattern=\"phone\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<DatePicker maxDate={dayjs()} />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"dob\"\n                  label=\"Ngày sinh\"\n                  name=\"dob\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<SelectInput />}\n                  options={GENDER}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"sex\"\n                  label=\"Giới tính\"\n                  name=\"sex\"\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl\n                  element={<SelectInput />}\n                  options={ISMARRIED_OPTION}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"isMarried\"\n                  label=\"Tình trạng hôn nhân\"\n                  name=\"isMarried\"\n                  disabled={isReadOnly}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl\n                  element={<TextField />}\n                  control={control}\n                  errors={errors}\n                  fullWidth\n                  id=\"address\"\n                  label=\"Địa chỉ\"\n                  name=\"address\"\n                  required\n                  disabled={isReadOnly}\n                />\n              </Grid>\n            </Grid>\n          ) : (\n            <PersonalViewUI user={user} />\n          )}\n          {!isReadOnly && (\n            <Box display=\"flex\" justifyContent=\"center\" sx={{ gap: 3 }}>\n              {loading ? (\n                <CircularProgress size={20} />\n              ) : (\n                <ButtonGroup\n                  handleSubmit={handleSubmit(handleSaveProfile)}\n                  handleCancel={handleCancel}\n                />\n              )}\n            </Box>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import { Box, styled } from '@mui/material';\n\nconst SubmitBox = styled(Box)(({ theme }) => ({\n  background: '#ffff',\n  height: 70,\n  width: '100%',\n  boxShadow: '0px 0px 10px #aae2f7',\n  left: 0,\n  right: 0,\n  bottom: 0,\n  zIndex: 1,\n  position: 'sticky',\n  display: 'flex',\n  justifyContent: 'flex-end',\n  alignItems: 'center',\n  gap: theme.spacing(4)\n}));\n\nexport default SubmitBox;\n","import { List, ListItem, Button, Typography, Grid } from '@mui/material';\n\nconst handleScrollToSection = (sectionId) => {\n  const element = document.getElementById(sectionId);\n  if (element) {\n    element.scrollIntoView({ behavior: 'smooth' });\n  }\n};\n\nconst TableOfContents = ({ sections }) => {\n  return (\n    <List component=\"nav\" sx={{ px: 0 }}>\n      <ListItem>\n        <Typography fontSize={14} fontWeight={700}>\n          Hồ sơ trực tuyến của bạn\n        </Typography>\n      </ListItem>\n      {sections.map((section) => (\n        <ListItem key={section.id} sx={{ p: 0 }}>\n          <Button\n            sx={{ py: 1 }}\n            fullWidth\n            onClick={() => handleScrollToSection(section.id)}\n            color=\"secondary\"\n          >\n            <Grid container>\n              <Grid\n                item\n                xs={2}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n              >\n                {section.icon}\n              </Grid>\n              <Grid\n                item\n                xs={10}\n                display=\"flex\"\n                justifyContent=\"left\"\n                alignItems=\"center\"\n              >\n                <Typography fontSize={13}>{section.title}</Typography>\n              </Grid>\n            </Grid>\n          </Button>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default TableOfContents;\n","import { AxiosError } from 'axios';\nimport { useMutation } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { UploadAvatar } from '../userService';\nimport { User } from '../model';\n\nconst useMutateAvatar = () => {\n  const { toast, setUserApp } = useApp();\n  const mutationFunction = UploadAvatar.create;\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<Partial<User>>,\n    AxiosError<ResponseData<Partial<User>>>,\n    string\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        toast.success({ massage: res.message });\n        setUserApp({ avatar: res.data.avatar });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateAvatar;\n","import { AxiosError } from 'axios';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { ResponseData } from 'src/common/http-request';\nimport { useApp } from 'src/modules/app/hooks';\nimport { User } from '../model';\nimport { SetProfile } from '../userService';\n\nconst useMutateUserData = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useApp();\n  const mutationFunction = SetProfile.create;\n  const { mutate: onSaveData, isLoading } = useMutation<\n    ResponseData<User>,\n    AxiosError<ResponseData<User>>,\n    User\n  >(mutationFunction, {\n    onSuccess: (res) => {\n      if (res.status === 200) {\n        queryClient.invalidateQueries('get-Profile');\n        toast.success({ massage: res.message });\n      } else {\n        toast.error({ massage: res.message });\n      }\n    },\n    onError: (error) => {\n      toast.error({ massage: error.response.data.message });\n    }\n  });\n  return {\n    onSaveData,\n    isLoading\n  };\n};\n\nexport default useMutateUserData;\n","import _ from 'lodash';\r\nimport { AttachedDocument, OnlineProfile } from 'src/modules/jobProfile/model';\r\n\r\n// export function tfidfReview(keywordArray: string[], documentText: string) {\r\n//   const termFreq = keywordArray.reduce((result, keywordArray) => {\r\n//     const regex = new RegExp(`\\\\b${keywordArray}\\\\b`, 'gi');\r\n//     const matches = documentText.match(regex) || [];\r\n//     result[keywordArray] = matches.length;\r\n//     return result;\r\n//   }, {});\r\n\r\n//   const totalWords = documentText.split(/\\s+/).length;\r\n\r\n//   const tfidf = {};\r\n\r\n//   Object.entries(termFreq).forEach(([word, termCount]) => {\r\n//     if (typeof termCount === 'number') {\r\n//       // Check if termCount is a number\r\n//       const tf = termCount / totalWords;\r\n//       const idf = Math.log(keywordArray.length / (termCount || 1));\r\n//       tfidf[word] = tf * idf;\r\n//     } else {\r\n//       // Handle the case where termCount is not a number\r\n//       console.error(`Term count for \"${word}\" is not a number.`);\r\n//     }\r\n//   });\r\n\r\n//   return _.entries(tfidf)\r\n//     .sort((a, b) => b[1] - a[1])\r\n//     .map((entry) => entry[0]);\r\n// }\r\n\r\nexport const loadKeywords = (analysisResults: any[], document?: any) => {\r\n  if (analysisResults.length <= 0 && !Boolean(analysisResults[0])) return '';\r\n\r\n  const result = analysisResults[0];\r\n  if (!result) return '';\r\n\r\n  const startIndex = result.indexOf('[');\r\n  if (startIndex === -1) {\r\n    console.log(\"Không tìm thấy ký tự '['\");\r\n    return '';\r\n  }\r\n\r\n  // Tìm vị trí kết thúc của ']'\r\n  const endIndex = result.lastIndexOf(']');\r\n  if (endIndex === -1) {\r\n    console.log(\"Không tìm thấy ký tự ']'\");\r\n    return '';\r\n  }\r\n\r\n  // Trích xuất chuỗi con từ vị trí startIndex đến endIndex\r\n  const extractedString = result\r\n    .substring(startIndex + 1, endIndex)\r\n    .replace(/[\"]/g, '');\r\n\r\n  // B1: Thay thế dấu \"'\" thành dấu '\"' để đảm bảo JSON hợp lệ\r\n  const jsonString = extractedString.replace(/[_!@#$%^&*;|<>'\"\\n\\t\\r]/g, '');\r\n\r\n  // B2: Parse string sang array\r\n  const keywordArray = jsonString.split(',');\r\n\r\n  const keywordList = keywordArray.slice(0, 20);\r\n  return keywordList?.join(', ');\r\n};\r\n\r\nfunction removeDateAttributes(data) {\r\n  return data.map((item) => {\r\n    const { startDate, endDate, id, isDoing, ...rest } = item;\r\n    return rest;\r\n  });\r\n}\r\n\r\nconst removeAttributes = (\r\n  profile: Partial<OnlineProfile | AttachedDocument>,\r\n  profileType: string,\r\n  cvText?: string\r\n) => {\r\n  // if profile type is OnlineProfile then return\r\n  if (profileType === 'online') {\r\n    const profileData = profile as Partial<OnlineProfile>;\r\n    return {\r\n      jobTitle: profileData?.jobTitle,\r\n      profession: profileData?.profession,\r\n      work_experiences: profileData?.work_experiences.map((experience) => {\r\n        return {\r\n          jobTitle: experience.jobTitle,\r\n          jobDescription: experience.jobDescription\r\n        };\r\n      }),\r\n      education_informations: profileData?.education_informations.map(\r\n        (education) => education.specialization\r\n      ),\r\n      another_degrees: profileData?.another_degrees?.map(\r\n        (degree) => degree.degreeName\r\n      )\r\n    };\r\n  } else {\r\n    return {\r\n      jobTitle: profile?.jobTitle,\r\n      profession: profile?.profession,\r\n      cvContent: cvText\r\n    };\r\n  }\r\n};\r\n\r\ntype profileType = 'online' | 'document';\r\nexport function preProcessData(\r\n  object,\r\n  profileType: profileType,\r\n  cvText?: string\r\n) {\r\n  const dataToAnalyze = removeAttributes(object, profileType, cvText);\r\n  return dataToAnalyze;\r\n}\r\n"],"names":["ButtonGroup","props","handleSubmit","handleCancel","_jsxs","Box","display","justifyContent","sx","gap","children","_jsx","Button","onClick","variant","color","width","DatePicker","LocalizationProvider","dateAdapter","AdapterDayjs","DatePickerMui","format","value","dayjs","slotProps","textField","size","fullWidth","EditButton","startIcon","AutoFixHighOutlinedIcon","fontSize","borderRadius","Typography","textTransform","React","ref","onChange","other","NumericFormat","getInputRef","onValueChange","values","target","name","thousandSeparator","valueIsNumericString","SelectInput","options","label","labelmargintop","FormControl","InputLabel","mt","Select","map","item","idx","MenuItem","TextInput","generateErrorText","object","acceptTypes","acceptSize","fileType","typeRegex","RegExp","concat","my","fontWeight","join","replace","avatarErrorText","avatarFormat","coverErrorText","coverImgFormat","applicationErrorText","CVFormat","overTokenErrorText","failedOCRErrorText","defaultImage","companyAvatar","companyCover","cvAnalysist","jobAnalysist","RoundOneCheck","checkContent","extractSkill","translate","getEmbedding","async","responses","content","length","sendMessage","inputText","_data$data","response","fetch","method","headers","Authorization","body","JSON","stringify","model","input","data","json","embedding","error","console","Promise","all","i","employer_Requirement","res","word","result","employee_Profile","push","id","log","request","max_tokens","arguments","undefined","logit_bias","trim","_data$choices","_data$choices$","_data$choices$$messag","messages","role","temperature","presence_penalty","frequency_penalty","choices","message","catch","_ref","_data$skills","onSubmit","control","reset","formState","errors","useForm","defaultValues","jobTitle","profession","currentPosition","desiredPosition","desiredSalary","degree","experience","workAddress","employmentType","careerGoal","skills","isReadOnly","setIsReadOnly","useState","employeeSkills","setSetEmployeeSkills","processDataPayload","convertObjectListToString","Array","isArray","useEffect","convertToObjectsForSkill","Container","alignItems","lineHeight","onEdit","Divider","GeneralViewUI","user","Degree","Grid","py","container","mb","spacing","xs","element","TextField","required","disabled","Autocomplete","defaultValue","sm","positionLevel","pattern","InputProps","inputComponent","NumericFormatCustom","endAdornment","InputAdornment","position","workingForm","freeSolo","limitTags","SKILLS","split","fontStyle","newData","Input","styled","Personal","_GENDER$find2","avatarState","setAvatarState","avatar","avatarError","storageAvatar","uploadFile","setUserApp","useApp","onSaveData","onSavaAvatar","useMutateAvatar","useMutateUserData","loading","setLoading","defaultUserValues","handleGetAvatar","avatarUrl","getFileByUrl","handleUploadAvatar","e","image","files","includes","type","imageUrl","URL","createObjectURL","dob","toInputDateString","sex","GENDER","find","isMarried","theme","useTheme","isTablet","checkIsMobile","checkIsTablet","handleEdit","pr","flexDirection","rowGap","Avatar","alt","src","maxWidth","height","objectFit","htmlFor","component","AddPhotoAlternateOutlinedIcon","accept","handleDeleteAvatar","DoNotDisturbOnOutlinedIcon","PersonalViewUI","maxDate","ISMARRIED_OPTION","CircularProgress","_GENDER$find","removeFileByUrl","toOutputDateString","background","boxShadow","left","right","bottom","zIndex","sections","List","px","ListItem","section","p","sectionId","document","getElementById","scrollIntoView","behavior","handleScrollToSection","icon","title","toast","mutationFunction","UploadAvatar","create","mutate","isLoading","useMutation","onSuccess","status","success","massage","onError","queryClient","useQueryClient","SetProfile","invalidateQueries","loadKeywords","analysisResults","Boolean","startIndex","indexOf","endIndex","lastIndexOf","keywordList","substring","slice","removeAttributes","profile","profileType","cvText","_profileData$another_","profileData","work_experiences","jobDescription","education_informations","education","specialization","another_degrees","degreeName","cvContent","preProcessData"],"sourceRoot":""}